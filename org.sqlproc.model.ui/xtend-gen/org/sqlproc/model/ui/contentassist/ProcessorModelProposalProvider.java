/**
 * generated by Xtext
 */
package org.sqlproc.model.ui.contentassist;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.sqlproc.model.generator.ProcessorGeneratorUtils;
import org.sqlproc.model.processorModel.AbstractPojoEntity;
import org.sqlproc.model.processorModel.AnnotatedEntity;
import org.sqlproc.model.processorModel.DatabaseProperty;
import org.sqlproc.model.processorModel.DriverMethodOutputAssignement;
import org.sqlproc.model.processorModel.Entity;
import org.sqlproc.model.processorModel.ExportAssignement;
import org.sqlproc.model.processorModel.ImportAssignement;
import org.sqlproc.model.processorModel.InheritanceAssignement;
import org.sqlproc.model.processorModel.ManyToManyAssignement;
import org.sqlproc.model.processorModel.MetagenProperty;
import org.sqlproc.model.processorModel.PojoAnnotatedProperty;
import org.sqlproc.model.processorModel.PojoDefinition;
import org.sqlproc.model.processorModel.PojoEntity;
import org.sqlproc.model.processorModel.PojoProperty;
import org.sqlproc.model.processorModel.PojogenProperty;
import org.sqlproc.model.processorModel.Property;
import org.sqlproc.model.processorModel.ShowColumnTypeAssignement;
import org.sqlproc.model.processorModel.TableDefinition;
import org.sqlproc.model.resolver.DbExport;
import org.sqlproc.model.resolver.DbImport;
import org.sqlproc.model.resolver.DbResolver;
import org.sqlproc.model.resolver.PojoResolver;
import org.sqlproc.model.ui.contentassist.AbstractProcessorModelProposalProvider;

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
@SuppressWarnings("all")
public class ProcessorModelProposalProvider extends AbstractProcessorModelProposalProvider {
  @Inject
  private PojoResolver pojoResolver;
  
  @Inject
  private DbResolver dbResolver;
  
  @Inject
  private IQualifiedNameConverter qualifiedNameConverter;
  
  @Inject
  @Extension
  private ProcessorGeneratorUtils _processorGeneratorUtils;
  
  private final ArrayList<String> DEBUG_LEVELS = CollectionLiterals.<String>newArrayList("DEBUG", "INFO", "FATAL", "ERROR", "WARN", "TRACE");
  
  public void addProposalList(final List<String> values, final String lexerRule, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final String prefix) {
    if (values!=null) {
      final Procedure1<String> _function = new Procedure1<String>() {
        public void apply(final String value) {
          IValueConverterService _valueConverter = ProcessorModelProposalProvider.this.getValueConverter();
          String _elvis = null;
          if (prefix != null) {
            _elvis = prefix;
          } else {
            _elvis = "";
          }
          String _plus = (_elvis + value);
          final String proposal = _valueConverter.toString(_plus, lexerRule);
          ICompletionProposal _createCompletionProposal = ProcessorModelProposalProvider.this.createCompletionProposal(proposal, context);
          acceptor.accept(_createCompletionProposal);
        }
      };
      IterableExtensions.<String>forEach(values, _function);
    }
  }
  
  public StringBuilder append(final StringBuilder sb, final String s) {
    StringBuilder _xblockexpression = null;
    {
      int _length = sb.length();
      boolean _greaterThan = (_length > 0);
      if (_greaterThan) {
        sb.append(".");
      }
      _xblockexpression = sb.append(s);
    }
    return _xblockexpression;
  }
  
  public boolean isResolvePojo(final EObject model) {
    return this.pojoResolver.isResolvePojo(model);
  }
  
  public boolean isResolveDb(final EObject model) {
    return this.dbResolver.isResolveDb(model);
  }
  
  public String getClass(final PojoDefinition pojo) {
    String _xifexpression = null;
    JvmType _classx = pojo.getClassx();
    boolean _notEquals = (!Objects.equal(_classx, null));
    if (_notEquals) {
      JvmType _classx_1 = pojo.getClassx();
      _xifexpression = _classx_1.getQualifiedName();
    } else {
      _xifexpression = pojo.getClass_();
    }
    return _xifexpression;
  }
  
  protected PojoEntity _getPojoEntity(final Entity baseEntity, final String property) {
    return null;
  }
  
  protected PojoEntity _getPojoEntity(final PojoEntity baseEntity, final String property) {
    PojoEntity _xblockexpression = null;
    {
      boolean _or = false;
      boolean _equals = Objects.equal(baseEntity, null);
      if (_equals) {
        _or = true;
      } else {
        boolean _equals_1 = Objects.equal(property, null);
        _or = _equals_1;
      }
      if (_or) {
        return baseEntity;
      }
      int _indexOf = property.indexOf(".");
      boolean _equals_2 = (_indexOf == (-1));
      if (_equals_2) {
        return baseEntity;
      }
      String checkProperty = property;
      int pos1 = checkProperty.indexOf("=");
      if ((pos1 > 0)) {
        int pos2 = checkProperty.indexOf(".", pos1);
        if ((pos2 > pos1)) {
          String _substring = checkProperty.substring(0, pos1);
          String _substring_1 = checkProperty.substring(pos2);
          String _plus = (_substring + _substring_1);
          checkProperty = _plus;
        }
      }
      String innerProperty = ((String) null);
      int _indexOf_1 = checkProperty.indexOf(".");
      pos1 = _indexOf_1;
      if ((pos1 > 0)) {
        String _substring_2 = checkProperty.substring((pos1 + 1));
        innerProperty = _substring_2;
        String _substring_3 = checkProperty.substring(0, pos1);
        checkProperty = _substring_3;
      }
      final String _checkProperty = checkProperty;
      List<PojoProperty> _attributes = this._processorGeneratorUtils.attributes(baseEntity);
      final Function1<PojoProperty, Boolean> _function = new Function1<PojoProperty, Boolean>() {
        public Boolean apply(final PojoProperty it) {
          String _name = it.getName();
          return Boolean.valueOf(Objects.equal(_name, _checkProperty));
        }
      };
      PojoProperty innerPojoProperty = IterableExtensions.<PojoProperty>findFirst(_attributes, _function);
      boolean _or_1 = false;
      boolean _equals_3 = Objects.equal(innerPojoProperty, null);
      if (_equals_3) {
        _or_1 = true;
      } else {
        boolean _and = false;
        Entity _ref = innerPojoProperty.getRef();
        boolean _equals_4 = Objects.equal(_ref, null);
        if (!_equals_4) {
          _and = false;
        } else {
          PojoEntity _gref = innerPojoProperty.getGref();
          boolean _equals_5 = Objects.equal(_gref, null);
          _and = _equals_5;
        }
        _or_1 = _and;
      }
      if (_or_1) {
        return null;
      }
      Entity _elvis = null;
      Entity _ref_1 = innerPojoProperty.getRef();
      if (_ref_1 != null) {
        _elvis = _ref_1;
      } else {
        PojoEntity _gref_1 = innerPojoProperty.getGref();
        _elvis = ((Entity) _gref_1);
      }
      Entity innerEntity = _elvis;
      _xblockexpression = this.getPojoEntity(innerEntity, innerProperty);
    }
    return _xblockexpression;
  }
  
  public List<PojoProperty> getProperties(final PojoEntity pojoEntity, final List<PojoProperty> inproperties) {
    List<PojoProperty> _elvis = null;
    if (inproperties != null) {
      _elvis = inproperties;
    } else {
      ArrayList<PojoProperty> _newArrayList = CollectionLiterals.<PojoProperty>newArrayList();
      _elvis = _newArrayList;
    }
    final List<PojoProperty> properties = _elvis;
    boolean _equals = Objects.equal(pojoEntity, null);
    if (_equals) {
      return properties;
    }
    EList<PojoAnnotatedProperty> _features = pojoEntity.getFeatures();
    final Function1<PojoAnnotatedProperty, PojoProperty> _function = new Function1<PojoAnnotatedProperty, PojoProperty>() {
      public PojoProperty apply(final PojoAnnotatedProperty it) {
        return it.getFeature();
      }
    };
    List<PojoProperty> _map = ListExtensions.<PojoAnnotatedProperty, PojoProperty>map(_features, _function);
    final Procedure1<PojoProperty> _function_1 = new Procedure1<PojoProperty>() {
      public void apply(final PojoProperty it) {
        boolean _or = false;
        Entity _ref = it.getRef();
        boolean _notEquals = (!Objects.equal(_ref, null));
        if (_notEquals) {
          _or = true;
        } else {
          JvmType _type = it.getType();
          boolean _notEquals_1 = (!Objects.equal(_type, null));
          _or = _notEquals_1;
        }
        if (_or) {
          properties.add(it);
        }
      }
    };
    IterableExtensions.<PojoProperty>forEach(_map, _function_1);
    final PojoEntity superType = this._processorGeneratorUtils.getSuperType(pojoEntity);
    List<PojoProperty> _xifexpression = null;
    boolean _equals_1 = Objects.equal(superType, null);
    if (_equals_1) {
      _xifexpression = properties;
    } else {
      _xifexpression = this.getProperties(superType, properties);
    }
    return _xifexpression;
  }
  
  public boolean isPrimitive(final Class<?> clazz) {
    boolean _equals = Objects.equal(clazz, null);
    if (_equals) {
      return true;
    }
    boolean _equals_1 = Objects.equal(clazz, String.class);
    if (_equals_1) {
      return true;
    }
    boolean _equals_2 = Objects.equal(clazz, Date.class);
    if (_equals_2) {
      return true;
    }
    boolean _equals_3 = Objects.equal(clazz, java.sql.Date.class);
    if (_equals_3) {
      return true;
    }
    boolean _equals_4 = Objects.equal(clazz, Time.class);
    if (_equals_4) {
      return true;
    }
    boolean _equals_5 = Objects.equal(clazz, Timestamp.class);
    if (_equals_5) {
      return true;
    }
    boolean _equals_6 = Objects.equal(clazz, Blob.class);
    if (_equals_6) {
      return true;
    }
    boolean _equals_7 = Objects.equal(clazz, Clob.class);
    if (_equals_7) {
      return true;
    }
    boolean _equals_8 = Objects.equal(clazz, BigDecimal.class);
    if (_equals_8) {
      return true;
    }
    boolean _equals_9 = Objects.equal(clazz, BigInteger.class);
    if (_equals_9) {
      return true;
    }
    return false;
  }
  
  public String getClassName(final String baseClass, final String property) {
    boolean _or = false;
    boolean _equals = Objects.equal(baseClass, null);
    if (_equals) {
      _or = true;
    } else {
      boolean _equals_1 = Objects.equal(property, null);
      _or = _equals_1;
    }
    if (_or) {
      return baseClass;
    }
    int pos1 = property.indexOf(".");
    if ((pos1 == (-1))) {
      return baseClass;
    }
    String checkProperty = property;
    int _indexOf = checkProperty.indexOf("=");
    pos1 = _indexOf;
    if ((pos1 > 0)) {
      int pos2 = checkProperty.indexOf(".", pos1);
      if ((pos2 > pos1)) {
        String _substring = checkProperty.substring(0, pos1);
        String _substring_1 = checkProperty.substring(pos2);
        String _plus = (_substring + _substring_1);
        checkProperty = _plus;
      }
    }
    String innerProperty = ((String) null);
    int _indexOf_1 = checkProperty.indexOf(".");
    pos1 = _indexOf_1;
    if ((pos1 > 0)) {
      String _substring_2 = checkProperty.substring((pos1 + 1));
      innerProperty = _substring_2;
      String _substring_3 = checkProperty.substring(0, pos1);
      checkProperty = _substring_3;
    }
    PropertyDescriptor[] descriptors = this.pojoResolver.getPropertyDescriptors(baseClass);
    boolean _equals_2 = Objects.equal(descriptors, null);
    if (_equals_2) {
      return null;
    }
    final String _checkProperty = checkProperty;
    final PropertyDescriptor[] _converted_descriptors = (PropertyDescriptor[])descriptors;
    final Function1<PropertyDescriptor, Boolean> _function = new Function1<PropertyDescriptor, Boolean>() {
      public Boolean apply(final PropertyDescriptor descriptor) {
        String _name = descriptor.getName();
        return Boolean.valueOf(Objects.equal(_name, _checkProperty));
      }
    };
    PropertyDescriptor innerDesriptor = IterableExtensions.<PropertyDescriptor>findFirst(((Iterable<PropertyDescriptor>)Conversions.doWrapArray(_converted_descriptors)), _function);
    boolean _equals_3 = Objects.equal(innerDesriptor, null);
    if (_equals_3) {
      return null;
    }
    Class<?> innerClass = innerDesriptor.getPropertyType();
    boolean _isArray = innerClass.isArray();
    if (_isArray) {
      Method _readMethod = innerDesriptor.getReadMethod();
      Type _genericReturnType = _readMethod.getGenericReturnType();
      ParameterizedType type = ((ParameterizedType) _genericReturnType);
      boolean _or_1 = false;
      Type[] _actualTypeArguments = type.getActualTypeArguments();
      boolean _equals_4 = Objects.equal(_actualTypeArguments, null);
      if (_equals_4) {
        _or_1 = true;
      } else {
        Type[] _actualTypeArguments_1 = type.getActualTypeArguments();
        int _length = _actualTypeArguments_1.length;
        boolean _equals_5 = (_length == 0);
        _or_1 = _equals_5;
      }
      if (_or_1) {
        return null;
      }
      Type[] _actualTypeArguments_2 = type.getActualTypeArguments();
      Type _head = IterableExtensions.<Type>head(((Iterable<Type>)Conversions.doWrapArray(_actualTypeArguments_2)));
      innerClass = ((Class<?>) _head);
      boolean _isPrimitive = this.isPrimitive(innerClass);
      if (_isPrimitive) {
        return null;
      }
      String _name = innerClass.getName();
      return this.getClassName(_name, innerProperty);
    } else {
      boolean _isAssignableFrom = Collection.class.isAssignableFrom(innerClass);
      if (_isAssignableFrom) {
        Method _readMethod_1 = innerDesriptor.getReadMethod();
        Type _genericReturnType_1 = _readMethod_1.getGenericReturnType();
        ParameterizedType type_1 = ((ParameterizedType) _genericReturnType_1);
        boolean _or_2 = false;
        Type[] _actualTypeArguments_3 = type_1.getActualTypeArguments();
        boolean _equals_6 = Objects.equal(_actualTypeArguments_3, null);
        if (_equals_6) {
          _or_2 = true;
        } else {
          Type[] _actualTypeArguments_4 = type_1.getActualTypeArguments();
          int _length_1 = _actualTypeArguments_4.length;
          boolean _equals_7 = (_length_1 == 0);
          _or_2 = _equals_7;
        }
        if (_or_2) {
          return null;
        }
        Type[] _actualTypeArguments_5 = type_1.getActualTypeArguments();
        Type _head_1 = IterableExtensions.<Type>head(((Iterable<Type>)Conversions.doWrapArray(_actualTypeArguments_5)));
        innerClass = ((Class<?>) _head_1);
        boolean _isPrimitive_1 = this.isPrimitive(innerClass);
        if (_isPrimitive_1) {
          return null;
        }
        String _name_1 = innerClass.getName();
        return this.getClassName(_name_1, innerProperty);
      } else {
        boolean _isPrimitive_2 = this.isPrimitive(innerClass);
        if (_isPrimitive_2) {
          return null;
        }
        String _name_2 = innerClass.getName();
        return this.getClassName(_name_2, innerProperty);
      }
    }
  }
  
  public void acceptTables(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final String suffix) {
    List<String> _tables = this.dbResolver.getTables(model);
    final Function1<String, Boolean> _function = new Function1<String, Boolean>() {
      public Boolean apply(final String it) {
        int _indexOf = it.indexOf("$");
        return Boolean.valueOf((_indexOf < 0));
      }
    };
    Iterable<String> _filter = IterableExtensions.<String>filter(_tables, _function);
    final Procedure1<String> _function_1 = new Procedure1<String>() {
      public void apply(final String table) {
        IValueConverterService _valueConverter = ProcessorModelProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(table, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorModelProposalProvider.this.createCompletionProposal((proposal + suffix), context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    IterableExtensions.<String>forEach(_filter, _function_1);
  }
  
  public void acceptProcedures(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    List<String> _procedures = this.dbResolver.getProcedures(model);
    final Function1<String, Boolean> _function = new Function1<String, Boolean>() {
      public Boolean apply(final String it) {
        int _indexOf = it.indexOf("$");
        return Boolean.valueOf((_indexOf < 0));
      }
    };
    Iterable<String> _filter = IterableExtensions.<String>filter(_procedures, _function);
    final Procedure1<String> _function_1 = new Procedure1<String>() {
      public void apply(final String table) {
        IValueConverterService _valueConverter = ProcessorModelProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(table, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorModelProposalProvider.this.createCompletionProposal(proposal, context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    IterableExtensions.<String>forEach(_filter, _function_1);
  }
  
  public void acceptFunctions(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    List<String> _functions = this.dbResolver.getFunctions(model);
    final Function1<String, Boolean> _function = new Function1<String, Boolean>() {
      public Boolean apply(final String it) {
        int _indexOf = it.indexOf("$");
        return Boolean.valueOf((_indexOf < 0));
      }
    };
    Iterable<String> _filter = IterableExtensions.<String>filter(_functions, _function);
    final Procedure1<String> _function_1 = new Procedure1<String>() {
      public void apply(final String table) {
        IValueConverterService _valueConverter = ProcessorModelProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(table, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorModelProposalProvider.this.createCompletionProposal(proposal, context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    IterableExtensions.<String>forEach(_filter, _function_1);
  }
  
  public void acceptCheckConstraints(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    List<String> _checkConstraints = this.dbResolver.getCheckConstraints(model);
    final Function1<String, Boolean> _function = new Function1<String, Boolean>() {
      public Boolean apply(final String it) {
        int _indexOf = it.indexOf("$");
        return Boolean.valueOf((_indexOf < 0));
      }
    };
    Iterable<String> _filter = IterableExtensions.<String>filter(_checkConstraints, _function);
    final Procedure1<String> _function_1 = new Procedure1<String>() {
      public void apply(final String table) {
        IValueConverterService _valueConverter = ProcessorModelProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(table, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorModelProposalProvider.this.createCompletionProposal(proposal, context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    IterableExtensions.<String>forEach(_filter, _function_1);
  }
  
  public void acceptSequences(final EObject model, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    List<String> _sequences = this.dbResolver.getSequences(model);
    final Function1<String, Boolean> _function = new Function1<String, Boolean>() {
      public Boolean apply(final String it) {
        int _indexOf = it.indexOf("$");
        return Boolean.valueOf((_indexOf < 0));
      }
    };
    Iterable<String> _filter = IterableExtensions.<String>filter(_sequences, _function);
    final Procedure1<String> _function_1 = new Procedure1<String>() {
      public void apply(final String table) {
        IValueConverterService _valueConverter = ProcessorModelProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(table, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorModelProposalProvider.this.createCompletionProposal(proposal, context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    IterableExtensions.<String>forEach(_filter, _function_1);
  }
  
  public void acceptColumns(final List<String> columns, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor, final String prefix, final String suffix) {
    final Procedure1<String> _function = new Procedure1<String>() {
      public void apply(final String column) {
        IValueConverterService _valueConverter = ProcessorModelProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(column, "IDENT");
        String _xifexpression = null;
        boolean _notEquals = (!Objects.equal(prefix, null));
        if (_notEquals) {
          _xifexpression = ((prefix + ".") + proposal);
        } else {
          _xifexpression = proposal;
        }
        String completion = _xifexpression;
        String _xifexpression_1 = null;
        boolean _notEquals_1 = (!Objects.equal(suffix, null));
        if (_notEquals_1) {
          _xifexpression_1 = (completion + suffix);
        } else {
          _xifexpression_1 = completion;
        }
        completion = _xifexpression_1;
        ICompletionProposal _createCompletionProposal = ProcessorModelProposalProvider.this.createCompletionProposal(completion, context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    IterableExtensions.<String>forEach(columns, _function);
  }
  
  public void completeTableDefinition_Table(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeTableDefinition_Table(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  public void completeProcedureDefinition_Table(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeProcedureDefinition_Table(model, assignment, context, acceptor);
      return;
    }
    this.acceptProcedures(model, context, acceptor);
  }
  
  public void completeFunctionDefinition_Table(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeFunctionDefinition_Table(model, assignment, context, acceptor);
      return;
    }
    this.acceptFunctions(model, context, acceptor);
  }
  
  public void completePojogenProperty_DbTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completePojogenProperty_DbTable(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptCheckConstraints(model, context, acceptor);
  }
  
  public void completePojogenProperty_DbProcedure(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completePojogenProperty_DbProcedure(model, assignment, context, acceptor);
      return;
    }
    this.acceptProcedures(model, context, acceptor);
  }
  
  public void completePojogenProperty_DbFunction(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completePojogenProperty_DbFunction(model, assignment, context, acceptor);
      return;
    }
    this.acceptFunctions(model, context, acceptor);
  }
  
  public void completeTableAssignement_DbTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeTableAssignement_DbTable(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "->");
  }
  
  public void completeInheritanceAssignement_DbTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeInheritanceAssignement_DbTable(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "->");
  }
  
  public void completePojogenProperty_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completePojogenProperty_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  public void completePojogenProperty_DbNotTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completePojogenProperty_DbNotTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  public void completeMetagenProperty_DbNotTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeMetagenProperty_DbNotTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  public void completePojogenProperty_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = ((!(model instanceof PojogenProperty)) && (!(model instanceof Property)));
    }
    if (_or) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    PojogenProperty _xifexpression = null;
    if ((model instanceof Property)) {
      _xifexpression = ((Property) model).getPojogen();
    } else {
      _xifexpression = ((PojogenProperty) model);
    }
    final PojogenProperty prop = _xifexpression;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, null);
    }
  }
  
  public void completePojogenProperty_DbColumns(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = ((!(model instanceof PojogenProperty)) && (!(model instanceof Property)));
    }
    if (_or) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    PojogenProperty _xifexpression = null;
    if ((model instanceof Property)) {
      _xifexpression = ((Property) model).getPojogen();
    } else {
      _xifexpression = ((PojogenProperty) model);
    }
    final PojogenProperty prop = _xifexpression;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, null);
    }
  }
  
  public void completeImplementsAssignement_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeImplementsAssignement_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  public void completeExtendsAssignement_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeExtendsAssignement_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  public void completeImplementsAssignement_DbNotTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeImplementsAssignement_DbNotTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  public void completeExtendsAssignement_DbNotTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeExtendsAssignement_DbNotTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  public void completeImplementsAssignementGenerics_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeImplementsAssignementGenerics_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  public void completeExtendsAssignementGenerics_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeExtendsAssignementGenerics_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  public void completeImplementsAssignementGenerics_DbNotTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeImplementsAssignementGenerics_DbNotTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  public void completeExtendsAssignementGenerics_DbNotTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeExtendsAssignementGenerics_DbNotTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
    this.acceptProcedures(model, context, acceptor);
    this.acceptFunctions(model, context, acceptor);
  }
  
  public void completeColumnTypeAssignement_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = ((!(model instanceof PojogenProperty)) && (!(model instanceof Property)));
    }
    if (_or) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    PojogenProperty _xifexpression = null;
    if ((model instanceof Property)) {
      _xifexpression = ((Property) model).getPojogen();
    } else {
      _xifexpression = ((PojogenProperty) model);
    }
    final PojogenProperty prop = _xifexpression;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, "->");
    } else {
      String _dbProcedure = prop.getDbProcedure();
      boolean _notEquals_1 = (!Objects.equal(_dbProcedure, null));
      if (_notEquals_1) {
        String _dbProcedure_1 = prop.getDbProcedure();
        List<String> _procColumns = this.dbResolver.getProcColumns(model, _dbProcedure_1);
        this.acceptColumns(_procColumns, context, acceptor, null, "->");
      } else {
        String _dbFunction = prop.getDbFunction();
        boolean _notEquals_2 = (!Objects.equal(_dbFunction, null));
        if (_notEquals_2) {
          String _dbFunction_1 = prop.getDbFunction();
          List<String> _funColumns = this.dbResolver.getFunColumns(model, _dbFunction_1);
          this.acceptColumns(_funColumns, context, acceptor, null, "->");
        }
      }
    }
  }
  
  public void completeColumnAssignement_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = ((!(model instanceof PojogenProperty)) && (!(model instanceof Property)));
    }
    if (_or) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    PojogenProperty _xifexpression = null;
    if ((model instanceof Property)) {
      _xifexpression = ((Property) model).getPojogen();
    } else {
      _xifexpression = ((PojogenProperty) model);
    }
    final PojogenProperty prop = _xifexpression;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, "->");
      String _dbTable_2 = prop.getDbTable();
      List<String> _checkColumns = this.dbResolver.getCheckColumns(model, _dbTable_2);
      this.acceptColumns(_checkColumns, context, acceptor, null, "->");
    }
  }
  
  public void completeImportAssignement_PkTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = (!(model instanceof ImportAssignement));
    }
    if (_or) {
      super.completeImportAssignement_PkTable(model, assignment, context, acceptor);
      return;
    }
    final ImportAssignement imp = ((ImportAssignement) model);
    final PojogenProperty prop = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    boolean _and = false;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _dbColumn = imp.getDbColumn();
      boolean _notEquals_1 = (!Objects.equal(_dbColumn, null));
      _and = _notEquals_1;
    }
    if (_and) {
      String _name = prop.getName();
      boolean _equals = Objects.equal("create-many-to-one", _name);
      if (_equals) {
        this.acceptTables(model, context, acceptor, "");
      } else {
        String _dbTable_1 = prop.getDbTable();
        List<DbImport> _dbImports = this.dbResolver.getDbImports(model, _dbTable_1);
        final Procedure1<DbImport> _function = new Procedure1<DbImport>() {
          public void apply(final DbImport dbImport) {
            boolean _and = false;
            String _fkColumn = dbImport.getFkColumn();
            boolean _notEquals = (!Objects.equal(_fkColumn, null));
            if (!_notEquals) {
              _and = false;
            } else {
              String _fkColumn_1 = dbImport.getFkColumn();
              String _dbColumn = imp.getDbColumn();
              boolean _equals = _fkColumn_1.equals(_dbColumn);
              _and = _equals;
            }
            if (_and) {
              IValueConverterService _valueConverter = ProcessorModelProposalProvider.this.getValueConverter();
              String _pkTable = dbImport.getPkTable();
              final String proposal = _valueConverter.toString(_pkTable, "IDENT");
              ICompletionProposal _createCompletionProposal = ProcessorModelProposalProvider.this.createCompletionProposal(proposal, context);
              acceptor.accept(_createCompletionProposal);
            }
          }
        };
        IterableExtensions.<DbImport>forEach(_dbImports, _function);
      }
    }
  }
  
  public void completeImportAssignement_PkColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = (!(model instanceof ImportAssignement));
    }
    if (_or) {
      super.completeImportAssignement_PkColumn(model, assignment, context, acceptor);
      return;
    }
    final ImportAssignement imp = ((ImportAssignement) model);
    final PojogenProperty prop = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    boolean _and = false;
    boolean _and_1 = false;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (!_notEquals) {
      _and_1 = false;
    } else {
      String _dbColumn = imp.getDbColumn();
      boolean _notEquals_1 = (!Objects.equal(_dbColumn, null));
      _and_1 = _notEquals_1;
    }
    if (!_and_1) {
      _and = false;
    } else {
      String _pkTable = imp.getPkTable();
      boolean _notEquals_2 = (!Objects.equal(_pkTable, null));
      _and = _notEquals_2;
    }
    if (_and) {
      String _name = prop.getName();
      boolean _equals = Objects.equal("create-many-to-one", _name);
      if (_equals) {
        String _pkTable_1 = imp.getPkTable();
        List<String> _columns = this.dbResolver.getColumns(model, _pkTable_1);
        this.acceptColumns(_columns, context, acceptor, null, null);
      } else {
        String _dbTable_1 = prop.getDbTable();
        List<DbImport> _dbImports = this.dbResolver.getDbImports(model, _dbTable_1);
        final Procedure1<DbImport> _function = new Procedure1<DbImport>() {
          public void apply(final DbImport dbImport) {
            boolean _and = false;
            String _fkColumn = dbImport.getFkColumn();
            boolean _notEquals = (!Objects.equal(_fkColumn, null));
            if (!_notEquals) {
              _and = false;
            } else {
              String _fkColumn_1 = dbImport.getFkColumn();
              String _dbColumn = imp.getDbColumn();
              boolean _equals = _fkColumn_1.equals(_dbColumn);
              _and = _equals;
            }
            if (_and) {
              boolean _and_1 = false;
              String _pkTable = dbImport.getPkTable();
              boolean _notEquals_1 = (!Objects.equal(_pkTable, null));
              if (!_notEquals_1) {
                _and_1 = false;
              } else {
                String _pkTable_1 = dbImport.getPkTable();
                String _pkTable_2 = imp.getPkTable();
                boolean _equals_1 = _pkTable_1.equals(_pkTable_2);
                _and_1 = _equals_1;
              }
              if (_and_1) {
                IValueConverterService _valueConverter = ProcessorModelProposalProvider.this.getValueConverter();
                String _pkColumn = dbImport.getPkColumn();
                final String proposal = _valueConverter.toString(_pkColumn, "IDENT");
                ICompletionProposal _createCompletionProposal = ProcessorModelProposalProvider.this.createCompletionProposal(proposal, context);
                acceptor.accept(_createCompletionProposal);
              }
            }
          }
        };
        IterableExtensions.<DbImport>forEach(_dbImports, _function);
      }
    }
  }
  
  public void completeImportAssignement_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = ((!(model instanceof PojogenProperty)) && (!(model instanceof Property)));
    }
    if (_or) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    PojogenProperty _xifexpression = null;
    if ((model instanceof Property)) {
      _xifexpression = ((Property) model).getPojogen();
    } else {
      _xifexpression = ((PojogenProperty) model);
    }
    final PojogenProperty prop = _xifexpression;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, "->");
    }
  }
  
  public void completeExportAssignement_FkTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = (!(model instanceof ExportAssignement));
    }
    if (_or) {
      super.completeExportAssignement_FkTable(model, assignment, context, acceptor);
      return;
    }
    final ExportAssignement exp = ((ExportAssignement) model);
    final PojogenProperty prop = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    boolean _and = false;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _dbColumn = exp.getDbColumn();
      boolean _notEquals_1 = (!Objects.equal(_dbColumn, null));
      _and = _notEquals_1;
    }
    if (_and) {
      String _name = prop.getName();
      boolean _equals = Objects.equal("create-one-to-many", _name);
      if (_equals) {
        this.acceptTables(model, context, acceptor, "");
      } else {
        String _dbTable_1 = prop.getDbTable();
        List<DbExport> _dbExports = this.dbResolver.getDbExports(model, _dbTable_1);
        final Procedure1<DbExport> _function = new Procedure1<DbExport>() {
          public void apply(final DbExport dbExport) {
            boolean _and = false;
            String _pkColumn = dbExport.getPkColumn();
            boolean _notEquals = (!Objects.equal(_pkColumn, null));
            if (!_notEquals) {
              _and = false;
            } else {
              String _pkColumn_1 = dbExport.getPkColumn();
              String _dbColumn = exp.getDbColumn();
              boolean _equals = _pkColumn_1.equals(_dbColumn);
              _and = _equals;
            }
            if (_and) {
              IValueConverterService _valueConverter = ProcessorModelProposalProvider.this.getValueConverter();
              String _fkTable = dbExport.getFkTable();
              final String proposal = _valueConverter.toString(_fkTable, "IDENT");
              ICompletionProposal _createCompletionProposal = ProcessorModelProposalProvider.this.createCompletionProposal(proposal, context);
              acceptor.accept(_createCompletionProposal);
            }
          }
        };
        IterableExtensions.<DbExport>forEach(_dbExports, _function);
      }
    }
  }
  
  public void completeExportAssignement_FkColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = (!(model instanceof ExportAssignement));
    }
    if (_or) {
      super.completeExportAssignement_FkColumn(model, assignment, context, acceptor);
      return;
    }
    final ExportAssignement exp = ((ExportAssignement) model);
    final PojogenProperty prop = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    boolean _and = false;
    boolean _and_1 = false;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (!_notEquals) {
      _and_1 = false;
    } else {
      String _dbColumn = exp.getDbColumn();
      boolean _notEquals_1 = (!Objects.equal(_dbColumn, null));
      _and_1 = _notEquals_1;
    }
    if (!_and_1) {
      _and = false;
    } else {
      String _fkTable = exp.getFkTable();
      boolean _notEquals_2 = (!Objects.equal(_fkTable, null));
      _and = _notEquals_2;
    }
    if (_and) {
      String _name = prop.getName();
      boolean _equals = Objects.equal("create-one-to-many", _name);
      if (_equals) {
        String _fkTable_1 = exp.getFkTable();
        List<String> _columns = this.dbResolver.getColumns(model, _fkTable_1);
        this.acceptColumns(_columns, context, acceptor, null, null);
      } else {
        String _dbTable_1 = prop.getDbTable();
        List<DbExport> _dbExports = this.dbResolver.getDbExports(model, _dbTable_1);
        final Procedure1<DbExport> _function = new Procedure1<DbExport>() {
          public void apply(final DbExport dbExport) {
            boolean _and = false;
            String _pkColumn = dbExport.getPkColumn();
            boolean _notEquals = (!Objects.equal(_pkColumn, null));
            if (!_notEquals) {
              _and = false;
            } else {
              String _pkColumn_1 = dbExport.getPkColumn();
              String _dbColumn = exp.getDbColumn();
              boolean _equals = _pkColumn_1.equals(_dbColumn);
              _and = _equals;
            }
            if (_and) {
              boolean _and_1 = false;
              String _fkTable = dbExport.getFkTable();
              boolean _notEquals_1 = (!Objects.equal(_fkTable, null));
              if (!_notEquals_1) {
                _and_1 = false;
              } else {
                String _fkTable_1 = dbExport.getFkTable();
                String _fkTable_2 = exp.getFkTable();
                boolean _equals_1 = _fkTable_1.equals(_fkTable_2);
                _and_1 = _equals_1;
              }
              if (_and_1) {
                IValueConverterService _valueConverter = ProcessorModelProposalProvider.this.getValueConverter();
                String _fkColumn = dbExport.getFkColumn();
                final String proposal = _valueConverter.toString(_fkColumn, "IDENT");
                ICompletionProposal _createCompletionProposal = ProcessorModelProposalProvider.this.createCompletionProposal(proposal, context);
                acceptor.accept(_createCompletionProposal);
              }
            }
          }
        };
        IterableExtensions.<DbExport>forEach(_dbExports, _function);
      }
    }
  }
  
  public void completeExportAssignement_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = ((!(model instanceof PojogenProperty)) && (!(model instanceof Property)));
    }
    if (_or) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    PojogenProperty _xifexpression = null;
    if ((model instanceof Property)) {
      _xifexpression = ((Property) model).getPojogen();
    } else {
      _xifexpression = ((PojogenProperty) model);
    }
    final PojogenProperty prop = _xifexpression;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, "->");
    }
  }
  
  public void completeManyToManyAssignement_PkColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = ((!(model instanceof PojogenProperty)) && (!(model instanceof Property)));
    }
    if (_or) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    PojogenProperty _xifexpression = null;
    if ((model instanceof Property)) {
      _xifexpression = ((Property) model).getPojogen();
    } else {
      _xifexpression = ((PojogenProperty) model);
    }
    final PojogenProperty prop = _xifexpression;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, "->");
    }
  }
  
  public void completeManyToManyAssignement_PkTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = (!(model instanceof ManyToManyAssignement));
    }
    if (_or) {
      super.completeManyToManyAssignement_PkTable(model, assignment, context, acceptor);
      return;
    }
    final ManyToManyAssignement many2 = ((ManyToManyAssignement) model);
    final PojogenProperty prop = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    boolean _and = false;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _pkColumn = many2.getPkColumn();
      boolean _notEquals_1 = (!Objects.equal(_pkColumn, null));
      _and = _notEquals_1;
    }
    if (_and) {
      String _dbTable_1 = prop.getDbTable();
      List<DbImport> _dbImports = this.dbResolver.getDbImports(model, _dbTable_1);
      final Procedure1<DbImport> _function = new Procedure1<DbImport>() {
        public void apply(final DbImport dbImport) {
          boolean _and = false;
          String _pkColumn = dbImport.getPkColumn();
          boolean _notEquals = (!Objects.equal(_pkColumn, null));
          if (!_notEquals) {
            _and = false;
          } else {
            String _pkColumn_1 = dbImport.getPkColumn();
            String _pkColumn_2 = many2.getPkColumn();
            boolean _equals = _pkColumn_1.equals(_pkColumn_2);
            _and = _equals;
          }
          if (_and) {
            IValueConverterService _valueConverter = ProcessorModelProposalProvider.this.getValueConverter();
            String _pkTable = dbImport.getPkTable();
            final String proposal = _valueConverter.toString(_pkTable, "IDENT");
            ICompletionProposal _createCompletionProposal = ProcessorModelProposalProvider.this.createCompletionProposal(proposal, context);
            acceptor.accept(_createCompletionProposal);
          }
        }
      };
      IterableExtensions.<DbImport>forEach(_dbImports, _function);
    }
  }
  
  public void completeInheritanceAssignement_DbColumns(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = (!(model instanceof InheritanceAssignement));
    }
    if (_or) {
      super.completeInheritanceAssignement_DbColumns(model, assignment, context, acceptor);
      return;
    }
    final PojogenProperty prop = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, null);
    }
  }
  
  private final ArrayList<String> methods = CollectionLiterals.<String>newArrayList("toString", "hashCode", "equals", "isDef", "toInit", "enumDef", "enumInit", "index=");
  
  public void completePojogenProperty_Methods(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if ((!(model instanceof PojogenProperty))) {
      super.completePojogenProperty_Methods(model, assignment, context, acceptor);
      return;
    }
    final Procedure1<String> _function = new Procedure1<String>() {
      public void apply(final String method) {
        IValueConverterService _valueConverter = ProcessorModelProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(method, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorModelProposalProvider.this.createCompletionProposal(proposal, context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    IterableExtensions.<String>forEach(this.methods, _function);
  }
  
  public void completeShowColumnTypeAssignement_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = ((!(model instanceof PojogenProperty)) && (!(model instanceof Property)));
    }
    if (_or) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    PojogenProperty _xifexpression = null;
    if ((model instanceof Property)) {
      _xifexpression = ((Property) model).getPojogen();
    } else {
      _xifexpression = ((PojogenProperty) model);
    }
    final PojogenProperty prop = _xifexpression;
    String _dbTable = prop.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop.getDbTable();
      List<String> _columns = this.dbResolver.getColumns(model, _dbTable_1);
      this.acceptColumns(_columns, context, acceptor, null, "->");
    } else {
      String _dbProcedure = prop.getDbProcedure();
      boolean _notEquals_1 = (!Objects.equal(_dbProcedure, null));
      if (_notEquals_1) {
        String _dbProcedure_1 = prop.getDbProcedure();
        List<String> _procColumns = this.dbResolver.getProcColumns(model, _dbProcedure_1);
        this.acceptColumns(_procColumns, context, acceptor, null, "->");
      } else {
        String _dbFunction = prop.getDbFunction();
        boolean _notEquals_2 = (!Objects.equal(_dbFunction, null));
        if (_notEquals_2) {
          String _dbFunction_1 = prop.getDbFunction();
          List<String> _funColumns = this.dbResolver.getFunColumns(model, _dbFunction_1);
          this.acceptColumns(_funColumns, context, acceptor, null, "->");
        }
      }
    }
  }
  
  public void completeShowColumnTypeAssignement_Type(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = (!(model instanceof ShowColumnTypeAssignement));
    }
    if (_or) {
      super.completeShowColumnTypeAssignement_Type(model, assignment, context, acceptor);
      return;
    }
    final ShowColumnTypeAssignement prop = ((ShowColumnTypeAssignement) model);
    final PojogenProperty prop2 = EcoreUtil2.<PojogenProperty>getContainerOfType(model, PojogenProperty.class);
    String type = ((String) null);
    String _dbTable = prop2.getDbTable();
    boolean _notEquals = (!Objects.equal(_dbTable, null));
    if (_notEquals) {
      String _dbTable_1 = prop2.getDbTable();
      String _dbColumn = prop.getDbColumn();
      String _type = this.dbResolver.getType(model, _dbTable_1, _dbColumn);
      type = _type;
    } else {
      String _dbProcedure = prop2.getDbProcedure();
      boolean _notEquals_1 = (!Objects.equal(_dbProcedure, null));
      if (_notEquals_1) {
        String _dbProcedure_1 = prop2.getDbProcedure();
        String _dbColumn_1 = prop.getDbColumn();
        String _type_1 = this.dbResolver.getType(model, _dbProcedure_1, _dbColumn_1);
        type = _type_1;
      } else {
        String _dbFunction = prop2.getDbFunction();
        boolean _notEquals_2 = (!Objects.equal(_dbFunction, null));
        if (_notEquals_2) {
          String _dbFunction_1 = prop2.getDbFunction();
          String _dbColumn_2 = prop.getDbColumn();
          String _type_2 = this.dbResolver.getType(model, _dbFunction_1, _dbColumn_2);
          type = _type_2;
        }
      }
    }
    boolean _notEquals_3 = (!Objects.equal(type, null));
    if (_notEquals_3) {
      IValueConverterService _valueConverter = this.getValueConverter();
      final String proposal = _valueConverter.toString(type, "PropertyValue");
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
      acceptor.accept(_createCompletionProposal);
    }
  }
  
  public void completeJoinTableAssignement_DbTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeJoinTableAssignement_DbTable(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "->");
  }
  
  public void completeJoinTableAssignement_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeJoinTableAssignement_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  public Set<PojoEntity> listEntities(final ResourceSet resourceSet, final IScope scope) {
    final Comparator<PojoEntity> _function = new Comparator<PojoEntity>() {
      public int compare(final PojoEntity o1, final PojoEntity o2) {
        String _name = o1.getName();
        String _name_1 = o2.getName();
        return _name.compareTo(_name_1);
      }
    };
    final TreeSet<PojoEntity> result = CollectionLiterals.<PojoEntity>newTreeSet(_function);
    Iterable<IEObjectDescription> _allElements = scope.getAllElements();
    final Procedure1<IEObjectDescription> _function_1 = new Procedure1<IEObjectDescription>() {
      public void apply(final IEObjectDescription description) {
        URI _eObjectURI = description.getEObjectURI();
        EObject _eObject = resourceSet.getEObject(_eObjectURI, true);
        final org.sqlproc.model.processorModel.Package packageDeclaration = ((org.sqlproc.model.processorModel.Package) _eObject);
        EList<AbstractPojoEntity> _elements = packageDeclaration.getElements();
        final Procedure1<AbstractPojoEntity> _function = new Procedure1<AbstractPojoEntity>() {
          public void apply(final AbstractPojoEntity aEntity) {
            if ((aEntity instanceof AnnotatedEntity)) {
              AnnotatedEntity ae = ((AnnotatedEntity) aEntity);
              Entity _entity = ae.getEntity();
              if ((_entity instanceof PojoEntity)) {
                Entity _entity_1 = ae.getEntity();
                result.add(((PojoEntity) _entity_1));
              }
            }
          }
        };
        IterableExtensions.<AbstractPojoEntity>forEach(_elements, _function);
      }
    };
    IterableExtensions.<IEObjectDescription>forEach(_allElements, _function_1);
    return result;
  }
  
  public Set<PojoDefinition> listPojos(final ResourceSet resourceSet, final IScope scope) {
    final Comparator<PojoDefinition> _function = new Comparator<PojoDefinition>() {
      public int compare(final PojoDefinition o1, final PojoDefinition o2) {
        String _name = o1.getName();
        String _name_1 = o2.getName();
        return _name.compareTo(_name_1);
      }
    };
    final TreeSet<PojoDefinition> result = CollectionLiterals.<PojoDefinition>newTreeSet(_function);
    Iterable<IEObjectDescription> _allElements = scope.getAllElements();
    final Procedure1<IEObjectDescription> _function_1 = new Procedure1<IEObjectDescription>() {
      public void apply(final IEObjectDescription description) {
        URI _eObjectURI = description.getEObjectURI();
        EObject _eObject = resourceSet.getEObject(_eObjectURI, true);
        final PojoDefinition pojo = ((PojoDefinition) _eObject);
        result.add(pojo);
      }
    };
    IterableExtensions.<IEObjectDescription>forEach(_allElements, _function_1);
    return result;
  }
  
  public Set<TableDefinition> listTables(final ResourceSet resourceSet, final IScope scope) {
    final Comparator<TableDefinition> _function = new Comparator<TableDefinition>() {
      public int compare(final TableDefinition o1, final TableDefinition o2) {
        String _name = o1.getName();
        String _name_1 = o2.getName();
        return _name.compareTo(_name_1);
      }
    };
    final TreeSet<TableDefinition> result = CollectionLiterals.<TableDefinition>newTreeSet(_function);
    Iterable<IEObjectDescription> _allElements = scope.getAllElements();
    final Procedure1<IEObjectDescription> _function_1 = new Procedure1<IEObjectDescription>() {
      public void apply(final IEObjectDescription description) {
        URI _eObjectURI = description.getEObjectURI();
        EObject _eObject = resourceSet.getEObject(_eObjectURI, true);
        final TableDefinition table = ((TableDefinition) _eObject);
        result.add(table);
      }
    };
    IterableExtensions.<IEObjectDescription>forEach(_allElements, _function_1);
    return result;
  }
  
  public void completeMetagenProperty_DbTable(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeMetagenProperty_DbTable(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  public void completeMetagenProperty_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeMetagenProperty_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  public void completeMetagenProperty_DbFunction(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeMetagenProperty_DbFunction(model, assignment, context, acceptor);
      return;
    }
    this.acceptFunctions(model, context, acceptor);
  }
  
  public void completeMetagenProperty_DbProcedure(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeMetagenProperty_DbProcedure(model, assignment, context, acceptor);
      return;
    }
    this.acceptProcedures(model, context, acceptor);
  }
  
  public void completeMetagenProperty_Sequence(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeMetagenProperty_Sequence(model, assignment, context, acceptor);
      return;
    }
    this.acceptSequences(model, context, acceptor);
  }
  
  public void completeMetaTypeAssignement_DbColumn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = ((!(model instanceof MetagenProperty)) && (!(model instanceof Property)));
    }
    if (_or) {
      super.completeColumnTypeAssignement_DbColumn(model, assignment, context, acceptor);
      return;
    }
    MetagenProperty _xifexpression = null;
    if ((model instanceof Property)) {
      _xifexpression = ((Property) model).getMetagen();
    } else {
      _xifexpression = ((MetagenProperty) model);
    }
    final MetagenProperty prop = _xifexpression;
    String _dbTable = prop.getDbTable();
    List<String> _columns = this.dbResolver.getColumns(model, _dbTable);
    this.acceptColumns(_columns, context, acceptor, null, null);
  }
  
  public void completeDaogenProperty_DbTables(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeDaogenProperty_DbTables(model, assignment, context, acceptor);
      return;
    }
    this.acceptTables(model, context, acceptor, "");
  }
  
  public void completeMetagenProperty_DbColumns(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = (!(model instanceof MetagenProperty));
    }
    if (_or) {
      super.completeMetagenProperty_DbColumns(model, assignment, context, acceptor);
      return;
    }
    final MetagenProperty prop = ((MetagenProperty) model);
    String _dbTable = prop.getDbTable();
    List<String> _columns = this.dbResolver.getColumns(model, _dbTable);
    this.acceptColumns(_columns, context, acceptor, null, null);
  }
  
  public void completeDatabaseMetaInfoAssignement_DbMetaInfo(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeDatabaseMetaInfoAssignement_DbMetaInfo(model, assignment, context, acceptor);
      return;
    }
    final String dbMetaInfo = this.dbResolver.getDbMetaInfo(model);
    IValueConverterService _valueConverter = this.getValueConverter();
    final String proposal = _valueConverter.toString(dbMetaInfo, "PropertyValue");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
    acceptor.accept(_createCompletionProposal);
  }
  
  public void completeDriverMetaInfoAssignement_DbDriverInfo(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeDriverMetaInfoAssignement_DbDriverInfo(model, assignment, context, acceptor);
      return;
    }
    final String dbDriverInfo = this.dbResolver.getDbDriverInfo(model);
    IValueConverterService _valueConverter = this.getValueConverter();
    final String proposal = _valueConverter.toString(dbDriverInfo, "PropertyValue");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
    acceptor.accept(_createCompletionProposal);
  }
  
  public void completeDriverMethodOutputAssignement_DriverMethod(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = (!(model instanceof DatabaseProperty));
    }
    if (_or) {
      super.completeDriverMethodOutputAssignement_DriverMethod(model, assignment, context, acceptor);
      return;
    }
    Set<String> _driverMethods = this.dbResolver.getDriverMethods(model);
    final Procedure1<String> _function = new Procedure1<String>() {
      public void apply(final String driverMetod) {
        IValueConverterService _valueConverter = ProcessorModelProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(driverMetod, "PropertyValue");
        ICompletionProposal _createCompletionProposal = ProcessorModelProposalProvider.this.createCompletionProposal((proposal + "->"), context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    IterableExtensions.<String>forEach(_driverMethods, _function);
  }
  
  public void completeDriverMethodOutputAssignement_CallOutput(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _or = false;
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      _or = true;
    } else {
      _or = (!(model instanceof DriverMethodOutputAssignement));
    }
    if (_or) {
      super.completeDriverMethodOutputAssignement_CallOutput(model, assignment, context, acceptor);
      return;
    }
    final DriverMethodOutputAssignement prop = ((DriverMethodOutputAssignement) model);
    Object _elvis = null;
    String _driverMethod = prop.getDriverMethod();
    Object _driverMethodOutput = this.dbResolver.getDriverMethodOutput(model, _driverMethod);
    if (_driverMethodOutput != null) {
      _elvis = _driverMethodOutput;
    } else {
      _elvis = "null";
    }
    final Object methodCallOutput = _elvis;
    IValueConverterService _valueConverter = this.getValueConverter();
    final String proposal = _valueConverter.toString(("" + methodCallOutput), "PropertyValue");
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal(proposal, context);
    acceptor.accept(_createCompletionProposal);
  }
  
  public void completeDatabaseTypeAssignement_DbType(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeDatabaseTypeAssignement_DbType(model, assignment, context, acceptor);
      return;
    }
    final String dbMetaInfo = this.dbResolver.getDbMetaInfo(model);
    DbResolver.DbType[] _fromDbMetaInfo = DbResolver.DbType.fromDbMetaInfo(dbMetaInfo);
    final Procedure1<DbResolver.DbType> _function = new Procedure1<DbResolver.DbType>() {
      public void apply(final DbResolver.DbType dbType) {
        IValueConverterService _valueConverter = ProcessorModelProposalProvider.this.getValueConverter();
        String _value = dbType.getValue();
        final String proposal = _valueConverter.toString(_value, "PropertyValue");
        ICompletionProposal _createCompletionProposal = ProcessorModelProposalProvider.this.createCompletionProposal(proposal, context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    IterableExtensions.<DbResolver.DbType>forEach(((Iterable<DbResolver.DbType>)Conversions.doWrapArray(_fromDbMetaInfo)), _function);
  }
  
  public void completeDatabaseCatalogAssignement_DbCatalog(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeDatabaseCatalogAssignement_DbCatalog(model, assignment, context, acceptor);
      return;
    }
    List<String> _catalogs = this.dbResolver.getCatalogs(model);
    final Procedure1<String> _function = new Procedure1<String>() {
      public void apply(final String catalog) {
        IValueConverterService _valueConverter = ProcessorModelProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(catalog, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorModelProposalProvider.this.createCompletionProposal(proposal, context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    IterableExtensions.<String>forEach(_catalogs, _function);
  }
  
  public void completeDatabaseSchemaAssignement_DbSchema(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeDatabaseSchemaAssignement_DbSchema(model, assignment, context, acceptor);
      return;
    }
    List<String> _schemas = this.dbResolver.getSchemas(model);
    final Procedure1<String> _function = new Procedure1<String>() {
      public void apply(final String schema) {
        IValueConverterService _valueConverter = ProcessorModelProposalProvider.this.getValueConverter();
        final String proposal = _valueConverter.toString(schema, "IDENT");
        ICompletionProposal _createCompletionProposal = ProcessorModelProposalProvider.this.createCompletionProposal(proposal, context);
        acceptor.accept(_createCompletionProposal);
      }
    };
    IterableExtensions.<String>forEach(_schemas, _function);
  }
  
  public void completeDebugLevelAssignement_Debug(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.addProposalList(this.DEBUG_LEVELS, "DEBUG_LEVELS", context, acceptor, null);
  }
  
  public void completeProcedurePojoAssignement_DbProcedure(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeProcedurePojoAssignement_DbProcedure(model, assignment, context, acceptor);
      return;
    }
    this.acceptProcedures(model, context, acceptor);
  }
  
  public void completeFunctionPojoAssignement_DbFunction(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completeFunctionPojoAssignement_DbFunction(model, assignment, context, acceptor);
      return;
    }
    this.acceptFunctions(model, context, acceptor);
  }
  
  public void completePojogenProperty_DbCheckConstraints(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean _isResolveDb = this.isResolveDb(model);
    boolean _not = (!_isResolveDb);
    if (_not) {
      super.completePojogenProperty_DbCheckConstraints(model, assignment, context, acceptor);
      return;
    }
    this.acceptCheckConstraints(model, context, acceptor);
  }
  
  public PojoEntity getPojoEntity(final Entity baseEntity, final String property) {
    if (baseEntity instanceof PojoEntity) {
      return _getPojoEntity((PojoEntity)baseEntity, property);
    } else if (baseEntity != null) {
      return _getPojoEntity(baseEntity, property);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(baseEntity, property).toString());
    }
  }
}
