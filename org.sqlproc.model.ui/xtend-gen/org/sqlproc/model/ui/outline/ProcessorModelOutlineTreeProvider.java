/**
 * generated by Xtext
 */
package org.sqlproc.model.ui.outline;

import com.google.common.base.Objects;
import java.util.Comparator;
import java.util.TreeSet;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.sqlproc.model.processorModel.Artifacts;
import org.sqlproc.model.processorModel.Column;
import org.sqlproc.model.processorModel.Constant;
import org.sqlproc.model.processorModel.DatabaseColumn;
import org.sqlproc.model.processorModel.Identifier;
import org.sqlproc.model.processorModel.MappingColumn;
import org.sqlproc.model.processorModel.MappingRule;
import org.sqlproc.model.processorModel.MetaStatement;
import org.sqlproc.model.processorModel.OptionalFeature;
import org.sqlproc.model.util.Collector;
import org.sqlproc.model.util.Utils;

/**
 * Customization of the default outline structure.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
@SuppressWarnings("all")
public class ProcessorModelOutlineTreeProvider extends DefaultOutlineTreeProvider {
  public void _createChildren(final DocumentRootNode parentNode, final EObject rootElement) {
    final Artifacts artifacts = ((Artifacts) rootElement);
    EList<OptionalFeature> _features = artifacts.getFeatures();
    boolean _notEquals = (!Objects.equal(_features, null));
    if (_notEquals) {
      EList<OptionalFeature> _features_1 = artifacts.getFeatures();
      for (final OptionalFeature optionalFeature : _features_1) {
        this.createNode(parentNode, optionalFeature);
      }
    }
    EList<MetaStatement> _statements = artifacts.getStatements();
    boolean _notEquals_1 = (!Objects.equal(_statements, null));
    if (_notEquals_1) {
      EList<MetaStatement> _statements_1 = artifacts.getStatements();
      for (final MetaStatement metaStatement : _statements_1) {
        this.createNode(parentNode, metaStatement);
      }
    }
    EList<MappingRule> _mappings = artifacts.getMappings();
    boolean _notEquals_2 = (!Objects.equal(_mappings, null));
    if (_notEquals_2) {
      EList<MappingRule> _mappings_1 = artifacts.getMappings();
      for (final MappingRule mappingRule : _mappings_1) {
        this.createNode(parentNode, mappingRule);
      }
    }
  }
  
  public void _createChildren(final IOutlineNode parentNode, final EObject modelElement) {
    boolean _matched = false;
    if (!_matched) {
      if (modelElement instanceof MetaStatement) {
        _matched=true;
        final Comparator<Identifier> _function = new Comparator<Identifier>() {
          public int compare(final Identifier a, final Identifier b) {
            String _name = a.getName();
            String _name_1 = b.getName();
            return _name.compareTo(_name_1);
          }
        };
        final TreeSet<Identifier> identifiers = CollectionLiterals.<Identifier>newTreeSet(_function);
        final Comparator<Constant> _function_1 = new Comparator<Constant>() {
          public int compare(final Constant a, final Constant b) {
            String _name = a.getName();
            String _name_1 = b.getName();
            return _name.compareTo(_name_1);
          }
        };
        final TreeSet<Constant> constants = CollectionLiterals.<Constant>newTreeSet(_function_1);
        final Comparator<Column> _function_2 = new Comparator<Column>() {
          public int compare(final Column a, final Column b) {
            String _name = Utils.getName(a);
            String _name_1 = Utils.getName(b);
            return _name.compareTo(_name_1);
          }
        };
        final TreeSet<Column> columns = CollectionLiterals.<Column>newTreeSet(_function_2);
        final Comparator<DatabaseColumn> _function_3 = new Comparator<DatabaseColumn>() {
          public int compare(final DatabaseColumn a, final DatabaseColumn b) {
            String _name = a.getName();
            String _name_1 = b.getName();
            return _name.compareTo(_name_1);
          }
        };
        final TreeSet<DatabaseColumn> databaseColumns = CollectionLiterals.<DatabaseColumn>newTreeSet(_function_3);
        Collector.allVariables(((MetaStatement) modelElement), identifiers, constants, columns, databaseColumns);
        for (final Identifier identifier : identifiers) {
          this.createNode(parentNode, identifier);
        }
        for (final Constant constant : constants) {
          this.createNode(parentNode, constant);
        }
        for (final Column column : columns) {
          this.createNode(parentNode, column);
        }
        for (final DatabaseColumn column_1 : databaseColumns) {
          this.createNode(parentNode, column_1);
        }
      }
    }
    if (!_matched) {
      if (modelElement instanceof MappingRule) {
        _matched=true;
        final Comparator<MappingColumn> _function = new Comparator<MappingColumn>() {
          public int compare(final MappingColumn a, final MappingColumn b) {
            String _name = Utils.getName(a);
            String _name_1 = Utils.getName(b);
            return _name.compareTo(_name_1);
          }
        };
        final TreeSet<MappingColumn> columns = CollectionLiterals.<MappingColumn>newTreeSet(_function);
        Collector.allVariables(((MappingRule) modelElement), columns);
        for (final MappingColumn column : columns) {
          this.createNode(parentNode, column);
        }
      }
    }
  }
  
  public boolean _isLeaf(final MetaStatement metaStatement) {
    return false;
  }
  
  public boolean _isLeaf(final MappingRule mappingRule) {
    return false;
  }
  
  public boolean _isLeaf(final OptionalFeature optionalFeature) {
    return true;
  }
  
  public boolean _isLeaf(final Identifier identifier) {
    return true;
  }
  
  public boolean _isLeaf(final Constant constant) {
    return true;
  }
  
  public boolean _isLeaf(final Column column) {
    return true;
  }
  
  public boolean _isLeaf(final DatabaseColumn column) {
    return true;
  }
  
  public boolean _isLeaf(final MappingColumn column) {
    return true;
  }
}
