/**
 * generated by Xtext
 */
package org.sqlproc.model.jvmmodel;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmPrimitiveType;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.sqlproc.model.processorModel.AbstractEntity;
import org.sqlproc.model.processorModel.AnnotatedEntity;
import org.sqlproc.model.processorModel.Annotation;
import org.sqlproc.model.processorModel.AnnotationDirective;
import org.sqlproc.model.processorModel.AnnotationDirectiveAttribute;
import org.sqlproc.model.processorModel.AnnotationDirectiveConflict;
import org.sqlproc.model.processorModel.AnnotationDirectiveConstructor;
import org.sqlproc.model.processorModel.AnnotationDirectiveGetter;
import org.sqlproc.model.processorModel.AnnotationDirectiveSetter;
import org.sqlproc.model.processorModel.AnnotationDirectiveStandard;
import org.sqlproc.model.processorModel.AnnotationDirectiveStatic;
import org.sqlproc.model.processorModel.Artifacts;
import org.sqlproc.model.processorModel.DaoDirective;
import org.sqlproc.model.processorModel.DaoDirectiveCrud;
import org.sqlproc.model.processorModel.DaoDirectiveDiscriminator;
import org.sqlproc.model.processorModel.DaoDirectivePojo;
import org.sqlproc.model.processorModel.DaoDirectiveQuery;
import org.sqlproc.model.processorModel.DaoEntity;
import org.sqlproc.model.processorModel.DescendantAssignment;
import org.sqlproc.model.processorModel.DirectiveProperties;
import org.sqlproc.model.processorModel.Entity;
import org.sqlproc.model.processorModel.EnumDirective;
import org.sqlproc.model.processorModel.EnumEntity;
import org.sqlproc.model.processorModel.Extends;
import org.sqlproc.model.processorModel.FunProcDirective;
import org.sqlproc.model.processorModel.Implements;
import org.sqlproc.model.processorModel.ImplementsExtendsDirective;
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveExceptDaos;
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveExceptPojos;
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveGenerics;
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveOnlyDaos;
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveOnlyPojos;
import org.sqlproc.model.processorModel.PojoAttribute;
import org.sqlproc.model.processorModel.PojoAttributeDirective;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveCreateCol;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveEnumDef;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveEnumInit;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveIndex;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveIsDef;
import org.sqlproc.model.processorModel.PojoAttributeDirectivePrimaryKey;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveRequired;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveToInit;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveUpdateCol;
import org.sqlproc.model.processorModel.PojoAttributeDirectiveVersion;
import org.sqlproc.model.processorModel.PojoDirective;
import org.sqlproc.model.processorModel.PojoDirectiveDiscriminator;
import org.sqlproc.model.processorModel.PojoDirectiveEquals;
import org.sqlproc.model.processorModel.PojoDirectiveHashCode;
import org.sqlproc.model.processorModel.PojoDirectiveIndex;
import org.sqlproc.model.processorModel.PojoDirectiveOperators;
import org.sqlproc.model.processorModel.PojoDirectiveSerializable;
import org.sqlproc.model.processorModel.PojoDirectiveToString;
import org.sqlproc.model.processorModel.PojoEntity;
import org.sqlproc.model.processorModel.ProcessorModelPackage;
import org.sqlproc.model.processorModel.ValueType;

@SuppressWarnings("all")
public class ProcessorGeneratorUtils {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Inject
  private IScopeProvider scopeProvider;
  
  @Inject
  private IQualifiedNameConverter qualifiedNameConverter;
  
  public String getFullyQualifiedName(final PojoEntity it) {
    String _xblockexpression = null;
    {
      final org.sqlproc.model.processorModel.Package pkg = EcoreUtil2.<org.sqlproc.model.processorModel.Package>getContainerOfType(it, org.sqlproc.model.processorModel.Package.class);
      QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(pkg);
      String _plus = (_fullyQualifiedName + ".");
      String _name = it.getName();
      _xblockexpression = (_plus + _name);
    }
    return _xblockexpression;
  }
  
  public String getFullyQualifiedName(final EnumEntity it) {
    String _xblockexpression = null;
    {
      final org.sqlproc.model.processorModel.Package pkg = EcoreUtil2.<org.sqlproc.model.processorModel.Package>getContainerOfType(it, org.sqlproc.model.processorModel.Package.class);
      QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(pkg);
      String _plus = (_fullyQualifiedName + ".");
      String _name = it.getName();
      _xblockexpression = (_plus + _name);
    }
    return _xblockexpression;
  }
  
  public EList<Annotation> annotations(final PojoEntity it) {
    EList<Annotation> _xblockexpression = null;
    {
      final AnnotatedEntity an = EcoreUtil2.<AnnotatedEntity>getContainerOfType(it, AnnotatedEntity.class);
      _xblockexpression = an.getAnnotations();
    }
    return _xblockexpression;
  }
  
  public EList<Annotation> annotations(final EnumEntity it) {
    EList<Annotation> _xblockexpression = null;
    {
      final AnnotatedEntity an = EcoreUtil2.<AnnotatedEntity>getContainerOfType(it, AnnotatedEntity.class);
      _xblockexpression = an.getAnnotations();
    }
    return _xblockexpression;
  }
  
  public EList<Annotation> annotations(final DaoEntity it) {
    EList<Annotation> _xblockexpression = null;
    {
      final AnnotatedEntity an = EcoreUtil2.<AnnotatedEntity>getContainerOfType(it, AnnotatedEntity.class);
      _xblockexpression = an.getAnnotations();
    }
    return _xblockexpression;
  }
  
  public boolean isGenerics(final Implements impl) {
    EList<ImplementsExtendsDirective> _directives = impl.getDirectives();
    ImplementsExtendsDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = new Function1<ImplementsExtendsDirective, Boolean>() {
        public Boolean apply(final ImplementsExtendsDirective x) {
          return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveGenerics));
        }
      };
      _findFirst=IterableExtensions.<ImplementsExtendsDirective>findFirst(_directives, _function);
    }
    final ImplementsExtendsDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isRequired(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = new Function1<PojoAttributeDirective, Boolean>() {
        public Boolean apply(final PojoAttributeDirective x) {
          return Boolean.valueOf((x instanceof PojoAttributeDirectiveRequired));
        }
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public Integer getIndex(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = new Function1<PojoAttributeDirective, Boolean>() {
        public Boolean apply(final PojoAttributeDirective x) {
          return Boolean.valueOf((x instanceof PojoAttributeDirectiveIndex));
        }
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirectiveIndex d = ((PojoAttributeDirectiveIndex) _findFirst);
    Integer _xifexpression = null;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = Integer.valueOf(d.getIndex());
    } else {
      _xifexpression = null;
    }
    return _xifexpression;
  }
  
  public PojoAttribute getUpdateColumn1(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = new Function1<PojoAttributeDirective, Boolean>() {
        public Boolean apply(final PojoAttributeDirective x) {
          return Boolean.valueOf((x instanceof PojoAttributeDirectiveUpdateCol));
        }
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirectiveUpdateCol d = ((PojoAttributeDirectiveUpdateCol) _findFirst);
    PojoAttribute _updateColumn1 = null;
    if (d!=null) {
      _updateColumn1=d.getUpdateColumn1();
    }
    return _updateColumn1;
  }
  
  public PojoAttribute getUpdateColumn2(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = new Function1<PojoAttributeDirective, Boolean>() {
        public Boolean apply(final PojoAttributeDirective x) {
          return Boolean.valueOf((x instanceof PojoAttributeDirectiveUpdateCol));
        }
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirectiveUpdateCol d = ((PojoAttributeDirectiveUpdateCol) _findFirst);
    PojoAttribute _updateColumn2 = null;
    if (d!=null) {
      _updateColumn2=d.getUpdateColumn2();
    }
    return _updateColumn2;
  }
  
  public PojoAttribute getCreateColumn1(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = new Function1<PojoAttributeDirective, Boolean>() {
        public Boolean apply(final PojoAttributeDirective x) {
          return Boolean.valueOf((x instanceof PojoAttributeDirectiveCreateCol));
        }
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirectiveCreateCol d = ((PojoAttributeDirectiveCreateCol) _findFirst);
    PojoAttribute _createColumn1 = null;
    if (d!=null) {
      _createColumn1=d.getCreateColumn1();
    }
    return _createColumn1;
  }
  
  public PojoAttribute getCreateColumn2(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = new Function1<PojoAttributeDirective, Boolean>() {
        public Boolean apply(final PojoAttributeDirective x) {
          return Boolean.valueOf((x instanceof PojoAttributeDirectiveCreateCol));
        }
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirectiveCreateCol d = ((PojoAttributeDirectiveCreateCol) _findFirst);
    PojoAttribute _createColumn2 = null;
    if (d!=null) {
      _createColumn2=d.getCreateColumn2();
    }
    return _createColumn2;
  }
  
  public boolean isPrimaryKey(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = new Function1<PojoAttributeDirective, Boolean>() {
        public Boolean apply(final PojoAttributeDirective x) {
          return Boolean.valueOf((x instanceof PojoAttributeDirectivePrimaryKey));
        }
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isOptLock(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = new Function1<PojoAttributeDirective, Boolean>() {
        public Boolean apply(final PojoAttributeDirective x) {
          return Boolean.valueOf((x instanceof PojoAttributeDirectiveVersion));
        }
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isList(final PojoAttribute f) {
    JvmTypeReference _type = null;
    if (f!=null) {
      _type=f.getType();
    }
    String _simpleName = null;
    if (_type!=null) {
      _simpleName=_type.getSimpleName();
    }
    final String name = _simpleName;
    return Objects.equal("List", name);
  }
  
  public boolean isNative(final PojoAttribute f) {
    boolean _xifexpression = false;
    boolean _and = false;
    JvmTypeReference _type = f.getType();
    boolean _notEquals = (!Objects.equal(_type, null));
    if (!_notEquals) {
      _and = false;
    } else {
      JvmTypeReference _type_1 = f.getType();
      _and = (_type_1 instanceof JvmPrimitiveType);
    }
    if (_and) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isToInit(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = new Function1<PojoAttributeDirective, Boolean>() {
        public Boolean apply(final PojoAttributeDirective x) {
          return Boolean.valueOf((x instanceof PojoAttributeDirectiveToInit));
        }
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isEnumInit(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = new Function1<PojoAttributeDirective, Boolean>() {
        public Boolean apply(final PojoAttributeDirective x) {
          return Boolean.valueOf((x instanceof PojoAttributeDirectiveEnumInit));
        }
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isIsDef(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = new Function1<PojoAttributeDirective, Boolean>() {
        public Boolean apply(final PojoAttributeDirective x) {
          return Boolean.valueOf((x instanceof PojoAttributeDirectiveIsDef));
        }
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isEnumDef(final PojoAttribute f) {
    EList<PojoAttributeDirective> _directives = f.getDirectives();
    PojoAttributeDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoAttributeDirective, Boolean> _function = new Function1<PojoAttributeDirective, Boolean>() {
        public Boolean apply(final PojoAttributeDirective x) {
          return Boolean.valueOf((x instanceof PojoAttributeDirectiveEnumDef));
        }
      };
      _findFirst=IterableExtensions.<PojoAttributeDirective>findFirst(_directives, _function);
    }
    final PojoAttributeDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean hasOperators(final PojoEntity pojo) {
    EList<PojoDirective> _directives = pojo.getDirectives();
    PojoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoDirective, Boolean> _function = new Function1<PojoDirective, Boolean>() {
        public Boolean apply(final PojoDirective x) {
          return Boolean.valueOf((x instanceof PojoDirectiveOperators));
        }
      };
      _findFirst=IterableExtensions.<PojoDirective>findFirst(_directives, _function);
    }
    final PojoDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public String getOperatorsSuffix(final PojoEntity pojo) {
    EList<PojoDirective> _directives = pojo.getDirectives();
    PojoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoDirective, Boolean> _function = new Function1<PojoDirective, Boolean>() {
        public Boolean apply(final PojoDirective x) {
          return Boolean.valueOf((x instanceof PojoDirectiveOperators));
        }
      };
      _findFirst=IterableExtensions.<PojoDirective>findFirst(_directives, _function);
    }
    final PojoDirectiveOperators d = ((PojoDirectiveOperators) _findFirst);
    String _operatorsSuffix = null;
    if (d!=null) {
      _operatorsSuffix=d.getOperatorsSuffix();
    }
    return _operatorsSuffix;
  }
  
  public Integer getSernum(final PojoEntity pojo) {
    EList<PojoDirective> _directives = pojo.getDirectives();
    PojoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoDirective, Boolean> _function = new Function1<PojoDirective, Boolean>() {
        public Boolean apply(final PojoDirective x) {
          return Boolean.valueOf((x instanceof PojoDirectiveSerializable));
        }
      };
      _findFirst=IterableExtensions.<PojoDirective>findFirst(_directives, _function);
    }
    final PojoDirectiveSerializable d = ((PojoDirectiveSerializable) _findFirst);
    Integer _xifexpression = null;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = Integer.valueOf(d.getSernum());
    } else {
      _xifexpression = null;
    }
    return _xifexpression;
  }
  
  public String getDiscriminator(final PojoEntity pojo) {
    EList<PojoDirective> _directives = null;
    if (pojo!=null) {
      _directives=pojo.getDirectives();
    }
    PojoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoDirective, Boolean> _function = new Function1<PojoDirective, Boolean>() {
        public Boolean apply(final PojoDirective x) {
          return Boolean.valueOf((x instanceof PojoDirectiveDiscriminator));
        }
      };
      _findFirst=IterableExtensions.<PojoDirective>findFirst(_directives, _function);
    }
    final PojoDirectiveDiscriminator d = ((PojoDirectiveDiscriminator) _findFirst);
    String _discriminator = null;
    if (d!=null) {
      _discriminator=d.getDiscriminator();
    }
    return _discriminator;
  }
  
  public PojoAttribute getOptLock(final PojoEntity pojo) {
    EList<PojoAttribute> _attributes = null;
    if (pojo!=null) {
      _attributes=pojo.getAttributes();
    }
    PojoAttribute _findFirst = null;
    if (_attributes!=null) {
      final Function1<PojoAttribute, Boolean> _function = new Function1<PojoAttribute, Boolean>() {
        public Boolean apply(final PojoAttribute x) {
          return Boolean.valueOf(ProcessorGeneratorUtils.this.isOptLock(x));
        }
      };
      _findFirst=IterableExtensions.<PojoAttribute>findFirst(_attributes, _function);
    }
    final PojoAttribute fea = _findFirst;
    boolean _notEquals = (!Objects.equal(fea, null));
    if (_notEquals) {
      return fea;
    }
    JvmParameterizedTypeReference _superType = null;
    if (pojo!=null) {
      _superType=pojo.getSuperType();
    }
    final JvmParameterizedTypeReference se = _superType;
    boolean _or = false;
    boolean _equals = Objects.equal(se, null);
    if (_equals) {
      _or = true;
    } else {
      _or = (!(se instanceof PojoEntity));
    }
    if (_or) {
      return null;
    }
    return this.getOptLock(((PojoEntity) se));
  }
  
  public Map<Integer, List<PojoAttribute>> getIndex(final PojoEntity pojo) {
    final Map<Integer, List<PojoAttribute>> result = new TreeMap<Integer, List<PojoAttribute>>();
    EList<PojoDirective> _directives = null;
    if (pojo!=null) {
      _directives=pojo.getDirectives();
    }
    final Function1<PojoDirective, Boolean> _function = new Function1<PojoDirective, Boolean>() {
      public Boolean apply(final PojoDirective x) {
        return Boolean.valueOf((x instanceof PojoDirectiveIndex));
      }
    };
    Iterable<PojoDirective> _filter = IterableExtensions.<PojoDirective>filter(_directives, _function);
    final Procedure1<PojoDirective> _function_1 = new Procedure1<PojoDirective>() {
      public void apply(final PojoDirective it) {
        final PojoDirectiveIndex d = ((PojoDirectiveIndex) it);
        int _index = d.getIndex();
        DirectiveProperties _proplist = d.getProplist();
        EList<PojoAttribute> _features = _proplist.getFeatures();
        result.put(Integer.valueOf(_index), _features);
      }
    };
    IterableExtensions.<PojoDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<PojoAttribute> toStringAttributes(final PojoEntity pojo) {
    final List<PojoAttribute> result = CollectionLiterals.<PojoAttribute>newArrayList();
    EList<PojoDirective> _directives = null;
    if (pojo!=null) {
      _directives=pojo.getDirectives();
    }
    final Function1<PojoDirective, Boolean> _function = new Function1<PojoDirective, Boolean>() {
      public Boolean apply(final PojoDirective x) {
        return Boolean.valueOf((x instanceof PojoDirectiveToString));
      }
    };
    Iterable<PojoDirective> _filter = IterableExtensions.<PojoDirective>filter(_directives, _function);
    final Procedure1<PojoDirective> _function_1 = new Procedure1<PojoDirective>() {
      public void apply(final PojoDirective it) {
        final PojoDirectiveToString d = ((PojoDirectiveToString) it);
        DirectiveProperties _proplist = d.getProplist();
        EList<PojoAttribute> _features = _proplist.getFeatures();
        result.addAll(_features);
      }
    };
    IterableExtensions.<PojoDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<PojoAttribute> equalsAttributes(final PojoEntity pojo) {
    final List<PojoAttribute> result = CollectionLiterals.<PojoAttribute>newArrayList();
    EList<PojoDirective> _directives = null;
    if (pojo!=null) {
      _directives=pojo.getDirectives();
    }
    final Function1<PojoDirective, Boolean> _function = new Function1<PojoDirective, Boolean>() {
      public Boolean apply(final PojoDirective x) {
        return Boolean.valueOf((x instanceof PojoDirectiveEquals));
      }
    };
    Iterable<PojoDirective> _filter = IterableExtensions.<PojoDirective>filter(_directives, _function);
    final Procedure1<PojoDirective> _function_1 = new Procedure1<PojoDirective>() {
      public void apply(final PojoDirective it) {
        final PojoDirectiveEquals d = ((PojoDirectiveEquals) it);
        DirectiveProperties _proplist = d.getProplist();
        EList<PojoAttribute> _features = _proplist.getFeatures();
        result.addAll(_features);
      }
    };
    IterableExtensions.<PojoDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<PojoAttribute> hashCodeAttributes(final PojoEntity pojo) {
    final List<PojoAttribute> result = CollectionLiterals.<PojoAttribute>newArrayList();
    EList<PojoDirective> _directives = null;
    if (pojo!=null) {
      _directives=pojo.getDirectives();
    }
    final Function1<PojoDirective, Boolean> _function = new Function1<PojoDirective, Boolean>() {
      public Boolean apply(final PojoDirective x) {
        return Boolean.valueOf((x instanceof PojoDirectiveHashCode));
      }
    };
    Iterable<PojoDirective> _filter = IterableExtensions.<PojoDirective>filter(_directives, _function);
    final Procedure1<PojoDirective> _function_1 = new Procedure1<PojoDirective>() {
      public void apply(final PojoDirective it) {
        final PojoDirectiveHashCode d = ((PojoDirectiveHashCode) it);
        DirectiveProperties _proplist = d.getProplist();
        EList<PojoAttribute> _features = _proplist.getFeatures();
        result.addAll(_features);
      }
    };
    IterableExtensions.<PojoDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<PojoAttribute> requiredAttributes(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<PojoAttribute>newArrayList();
    }
    EList<PojoAttribute> _attributes = pojo.getAttributes();
    final Function1<PojoAttribute, Boolean> _function = new Function1<PojoAttribute, Boolean>() {
      public Boolean apply(final PojoAttribute x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isRequired(x));
      }
    };
    Iterable<PojoAttribute> _filter = IterableExtensions.<PojoAttribute>filter(_attributes, _function);
    final List<PojoAttribute> features = IterableExtensions.<PojoAttribute>toList(_filter);
    final JvmParameterizedTypeReference se = pojo.getSuperType();
    boolean _or = false;
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      _or = true;
    } else {
      _or = (!(se instanceof PojoEntity));
    }
    if (_or) {
      return features;
    }
    List<PojoAttribute> _requiredAttributes = this.requiredAttributes(((PojoEntity) se));
    features.addAll(_requiredAttributes);
    return features;
  }
  
  public List<PojoAttribute> attributes(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<PojoAttribute>newArrayList();
    }
    EList<PojoAttribute> _attributes = pojo.getAttributes();
    final List<PojoAttribute> features = IterableExtensions.<PojoAttribute>toList(_attributes);
    final JvmParameterizedTypeReference se = pojo.getSuperType();
    boolean _or = false;
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      _or = true;
    } else {
      _or = (!(se instanceof PojoEntity));
    }
    if (_or) {
      return features;
    }
    EList<PojoAttribute> _attributes_1 = ((PojoEntity) se).getAttributes();
    features.addAll(_attributes_1);
    return features;
  }
  
  public Map<String, PojoAttribute> attributesAsMap(final PojoEntity pojo) {
    final TreeMap<String, PojoAttribute> result = new TreeMap<String, PojoAttribute>();
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return result;
    }
    EList<PojoAttribute> _attributes = pojo.getAttributes();
    final Procedure1<PojoAttribute> _function = new Procedure1<PojoAttribute>() {
      public void apply(final PojoAttribute it) {
        String _name = it.getName();
        result.put(_name, it);
      }
    };
    IterableExtensions.<PojoAttribute>forEach(_attributes, _function);
    final JvmParameterizedTypeReference se = pojo.getSuperType();
    boolean _or = false;
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      _or = true;
    } else {
      _or = (!(se instanceof PojoEntity));
    }
    if (_or) {
      return result;
    }
    Map<String, PojoAttribute> _attributesAsMap = this.attributesAsMap(((PojoEntity) se));
    result.putAll(_attributesAsMap);
    return result;
  }
  
  public List<PojoAttribute> toInitAttributes(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<PojoAttribute>newArrayList();
    }
    EList<PojoAttribute> _attributes = pojo.getAttributes();
    final Function1<PojoAttribute, Boolean> _function = new Function1<PojoAttribute, Boolean>() {
      public Boolean apply(final PojoAttribute x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isToInit(x));
      }
    };
    Iterable<PojoAttribute> _filter = IterableExtensions.<PojoAttribute>filter(_attributes, _function);
    final List<PojoAttribute> features = IterableExtensions.<PojoAttribute>toList(_filter);
    final JvmParameterizedTypeReference se = pojo.getSuperType();
    boolean _or = false;
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      _or = true;
    } else {
      _or = (!(se instanceof PojoEntity));
    }
    if (_or) {
      return features;
    }
    List<PojoAttribute> _initAttributes = this.toInitAttributes(((PojoEntity) se));
    features.addAll(_initAttributes);
    return features;
  }
  
  public List<PojoAttribute> enumInitAttributes(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<PojoAttribute>newArrayList();
    }
    EList<PojoAttribute> _attributes = pojo.getAttributes();
    final Function1<PojoAttribute, Boolean> _function = new Function1<PojoAttribute, Boolean>() {
      public Boolean apply(final PojoAttribute x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isEnumInit(x));
      }
    };
    Iterable<PojoAttribute> _filter = IterableExtensions.<PojoAttribute>filter(_attributes, _function);
    final List<PojoAttribute> features = IterableExtensions.<PojoAttribute>toList(_filter);
    final JvmParameterizedTypeReference se = pojo.getSuperType();
    boolean _or = false;
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      _or = true;
    } else {
      _or = (!(se instanceof PojoEntity));
    }
    if (_or) {
      return features;
    }
    List<PojoAttribute> _enumInitAttributes = this.enumInitAttributes(((PojoEntity) se));
    features.addAll(_enumInitAttributes);
    return features;
  }
  
  public List<PojoAttribute> isDefAttributes(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<PojoAttribute>newArrayList();
    }
    EList<PojoAttribute> _attributes = pojo.getAttributes();
    final Function1<PojoAttribute, Boolean> _function = new Function1<PojoAttribute, Boolean>() {
      public Boolean apply(final PojoAttribute x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isIsDef(x));
      }
    };
    Iterable<PojoAttribute> _filter = IterableExtensions.<PojoAttribute>filter(_attributes, _function);
    final List<PojoAttribute> features = IterableExtensions.<PojoAttribute>toList(_filter);
    final JvmParameterizedTypeReference se = pojo.getSuperType();
    boolean _or = false;
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      _or = true;
    } else {
      _or = (!(se instanceof PojoEntity));
    }
    if (_or) {
      return features;
    }
    List<PojoAttribute> _isDefAttributes = this.isDefAttributes(((PojoEntity) se));
    features.addAll(_isDefAttributes);
    return features;
  }
  
  public List<PojoAttribute> enumDefAttributes(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<PojoAttribute>newArrayList();
    }
    EList<PojoAttribute> _attributes = pojo.getAttributes();
    final Function1<PojoAttribute, Boolean> _function = new Function1<PojoAttribute, Boolean>() {
      public Boolean apply(final PojoAttribute x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isEnumDef(x));
      }
    };
    Iterable<PojoAttribute> _filter = IterableExtensions.<PojoAttribute>filter(_attributes, _function);
    final List<PojoAttribute> features = IterableExtensions.<PojoAttribute>toList(_filter);
    final JvmParameterizedTypeReference se = pojo.getSuperType();
    boolean _or = false;
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      _or = true;
    } else {
      _or = (!(se instanceof PojoEntity));
    }
    if (_or) {
      return features;
    }
    List<PojoAttribute> _enumDefAttributes = this.enumDefAttributes(((PojoEntity) se));
    features.addAll(_enumDefAttributes);
    return features;
  }
  
  public boolean hasIsDef(final PojoEntity pojo) {
    EList<PojoAttribute> _attributes = pojo.getAttributes();
    final Function1<PojoAttribute, Boolean> _function = new Function1<PojoAttribute, Boolean>() {
      public Boolean apply(final PojoAttribute f) {
        boolean _or = false;
        boolean _isIsDef = ProcessorGeneratorUtils.this.isIsDef(f);
        if (_isIsDef) {
          _or = true;
        } else {
          boolean _isEnumDef = ProcessorGeneratorUtils.this.isEnumDef(f);
          _or = _isEnumDef;
        }
        return Boolean.valueOf(_or);
      }
    };
    final PojoAttribute result = IterableExtensions.<PojoAttribute>findFirst(_attributes, _function);
    boolean _notEquals = (!Objects.equal(result, null));
    if (_notEquals) {
      return true;
    }
    final JvmParameterizedTypeReference se = pojo.getSuperType();
    boolean _or = false;
    boolean _equals = Objects.equal(se, null);
    if (_equals) {
      _or = true;
    } else {
      _or = (!(se instanceof PojoEntity));
    }
    if (_or) {
      return false;
    }
    return this.hasIsDef(((PojoEntity) se));
  }
  
  public boolean hasToInit(final PojoEntity pojo) {
    EList<PojoAttribute> _attributes = pojo.getAttributes();
    final Function1<PojoAttribute, Boolean> _function = new Function1<PojoAttribute, Boolean>() {
      public Boolean apply(final PojoAttribute f) {
        boolean _or = false;
        boolean _isToInit = ProcessorGeneratorUtils.this.isToInit(f);
        if (_isToInit) {
          _or = true;
        } else {
          boolean _isEnumInit = ProcessorGeneratorUtils.this.isEnumInit(f);
          _or = _isEnumInit;
        }
        return Boolean.valueOf(_or);
      }
    };
    final PojoAttribute result = IterableExtensions.<PojoAttribute>findFirst(_attributes, _function);
    boolean _notEquals = (!Objects.equal(result, null));
    if (_notEquals) {
      return true;
    }
    final JvmParameterizedTypeReference se = pojo.getSuperType();
    boolean _or = false;
    boolean _equals = Objects.equal(se, null);
    if (_equals) {
      _or = true;
    } else {
      _or = (!(se instanceof PojoEntity));
    }
    if (_or) {
      return false;
    }
    return this.hasIsDef(((PojoEntity) se));
  }
  
  public PojoAttribute getAttribute(final PojoEntity pojo, final String name) {
    boolean _or = false;
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      _or = true;
    } else {
      boolean _equals_1 = Objects.equal(name, null);
      _or = _equals_1;
    }
    if (_or) {
      return null;
    }
    EList<PojoAttribute> _attributes = pojo.getAttributes();
    final Function1<PojoAttribute, Boolean> _function = new Function1<PojoAttribute, Boolean>() {
      public Boolean apply(final PojoAttribute x) {
        String _name = x.getName();
        return Boolean.valueOf(Objects.equal(_name, name));
      }
    };
    final PojoAttribute feature = IterableExtensions.<PojoAttribute>findFirst(_attributes, _function);
    boolean _notEquals = (!Objects.equal(feature, null));
    if (_notEquals) {
      return feature;
    }
    final JvmParameterizedTypeReference se = pojo.getSuperType();
    boolean _or_1 = false;
    boolean _equals_2 = Objects.equal(se, null);
    if (_equals_2) {
      _or_1 = true;
    } else {
      _or_1 = (!(se instanceof PojoEntity));
    }
    if (_or_1) {
      return null;
    }
    return this.getAttribute(((PojoEntity) se), name);
  }
  
  protected String _constName(final PojoAttribute attr) {
    String _name = attr.getName();
    return this.constName(_name);
  }
  
  protected String _constName(final List<PojoAttribute> l) {
    final StringBuilder result = new StringBuilder("");
    boolean first = true;
    for (final PojoAttribute attr : l) {
      {
        if (first) {
          first = false;
        } else {
          result.append("_");
        }
        String _name = attr.getName();
        String _constName = this.constName(_name);
        result.append(_constName);
      }
    }
    return result.toString();
  }
  
  protected String _constName(final String name) {
    final StringBuilder result = new StringBuilder("");
    char[] _charArray = name.toCharArray();
    for (final char c : _charArray) {
      boolean _isUpperCase = Character.isUpperCase(c);
      if (_isUpperCase) {
        result.append("_");
        result.append(c);
      } else {
        char _upperCase = Character.toUpperCase(c);
        result.append(_upperCase);
      }
    }
    return result.toString();
  }
  
  public String dbName(final String name) {
    final StringBuilder result = new StringBuilder("");
    boolean lastDigit = false;
    char[] _charArray = name.toCharArray();
    for (final char c : _charArray) {
      {
        boolean _or = false;
        boolean _isUpperCase = Character.isUpperCase(c);
        if (_isUpperCase) {
          _or = true;
        } else {
          boolean _and = false;
          boolean _isDigit = Character.isDigit(c);
          if (!_isDigit) {
            _and = false;
          } else {
            _and = (!lastDigit);
          }
          _or = _and;
        }
        if (_or) {
          result.append("_");
          result.append(c);
        } else {
          char _upperCase = Character.toUpperCase(c);
          result.append(_upperCase);
        }
        boolean _isDigit_1 = Character.isDigit(c);
        lastDigit = _isDigit_1;
      }
    }
    final String s = result.toString();
    boolean _startsWith = s.startsWith("_");
    if (_startsWith) {
      return s.substring(1);
    }
    return s;
  }
  
  public Integer getSernum(final EnumEntity enum_) {
    EList<EnumDirective> _directives = enum_.getDirectives();
    EnumDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<EnumDirective, Boolean> _function = new Function1<EnumDirective, Boolean>() {
        public Boolean apply(final EnumDirective x) {
          return Boolean.valueOf((x instanceof PojoDirectiveSerializable));
        }
      };
      _findFirst=IterableExtensions.<EnumDirective>findFirst(_directives, _function);
    }
    final PojoDirectiveSerializable d = ((PojoDirectiveSerializable) _findFirst);
    Integer _xifexpression = null;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = Integer.valueOf(d.getSernum());
    } else {
      _xifexpression = null;
    }
    return _xifexpression;
  }
  
  public Integer getSernum(final DaoEntity dao) {
    EList<DaoDirective> _directives = dao.getDirectives();
    DaoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<DaoDirective, Boolean> _function = new Function1<DaoDirective, Boolean>() {
        public Boolean apply(final DaoDirective x) {
          return Boolean.valueOf((x instanceof PojoDirectiveSerializable));
        }
      };
      _findFirst=IterableExtensions.<DaoDirective>findFirst(_directives, _function);
    }
    final PojoDirectiveSerializable d = ((PojoDirectiveSerializable) _findFirst);
    Integer _xifexpression = null;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = Integer.valueOf(d.getSernum());
    } else {
      _xifexpression = null;
    }
    return _xifexpression;
  }
  
  public Map<String, Map<String, JvmParameterizedTypeReference>> getMoreResultClasses(final DaoEntity dao) {
    final Map<String, Map<String, JvmParameterizedTypeReference>> result = new TreeMap<String, Map<String, JvmParameterizedTypeReference>>();
    EList<DaoDirective> _directives = null;
    if (dao!=null) {
      _directives=dao.getDirectives();
    }
    final Function1<DaoDirective, Boolean> _function = new Function1<DaoDirective, Boolean>() {
      public Boolean apply(final DaoDirective x) {
        return Boolean.valueOf((x instanceof DaoDirectiveDiscriminator));
      }
    };
    Iterable<DaoDirective> _filter = IterableExtensions.<DaoDirective>filter(_directives, _function);
    final Procedure1<DaoDirective> _function_1 = new Procedure1<DaoDirective>() {
      public void apply(final DaoDirective it) {
        final DaoDirectiveDiscriminator d = ((DaoDirectiveDiscriminator) it);
        final Map<String, JvmParameterizedTypeReference> map = new TreeMap<String, JvmParameterizedTypeReference>();
        EList<DescendantAssignment> _descendants = d.getDescendants();
        final Procedure1<DescendantAssignment> _function = new Procedure1<DescendantAssignment>() {
          public void apply(final DescendantAssignment dd) {
            String _value = dd.getValue();
            JvmParameterizedTypeReference _descendant = dd.getDescendant();
            map.put(_value, _descendant);
          }
        };
        IterableExtensions.<DescendantAssignment>forEach(_descendants, _function);
        PojoAttribute _ancestor = d.getAncestor();
        String _name = _ancestor.getName();
        result.put(_name, map);
      }
    };
    IterableExtensions.<DaoDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public DaoDirective getPojoDirectiveIndirect(final DaoEntity dao) {
    EList<DaoDirective> _directives = null;
    if (dao!=null) {
      _directives=dao.getDirectives();
    }
    final Function1<DaoDirective, Boolean> _function = new Function1<DaoDirective, Boolean>() {
      public Boolean apply(final DaoDirective x) {
        boolean _or = false;
        if (((x instanceof DaoDirectiveCrud) || 
          (x instanceof DaoDirectiveQuery))) {
          _or = true;
        } else {
          _or = (x instanceof FunProcDirective);
        }
        return Boolean.valueOf(_or);
      }
    };
    return IterableExtensions.<DaoDirective>findFirst(_directives, _function);
  }
  
  public DaoDirectivePojo getPojoDirective(final DaoEntity dao) {
    EList<DaoDirective> _directives = null;
    if (dao!=null) {
      _directives=dao.getDirectives();
    }
    final Function1<DaoDirective, Boolean> _function = new Function1<DaoDirective, Boolean>() {
      public Boolean apply(final DaoDirective x) {
        return Boolean.valueOf((x instanceof DaoDirectivePojo));
      }
    };
    DaoDirective _findFirst = IterableExtensions.<DaoDirective>findFirst(_directives, _function);
    return ((DaoDirectivePojo) _findFirst);
  }
  
  public String getFunProcName(final DaoEntity dao) {
    String pojoName = dao.getName();
    boolean _endsWith = pojoName.endsWith("Dao");
    if (_endsWith) {
      int _length = pojoName.length();
      int _minus = (_length - 3);
      String _substring = pojoName.substring(0, _minus);
      pojoName = _substring;
    }
    return StringExtensions.toFirstLower(pojoName);
  }
  
  public PojoEntity getPojoImplicit(final DaoEntity dao) {
    String pojoName = dao.getName();
    boolean _endsWith = pojoName.endsWith("Dao");
    if (_endsWith) {
      int _length = pojoName.length();
      int _minus = (_length - 3);
      String _substring = pojoName.substring(0, _minus);
      pojoName = _substring;
    }
    final Artifacts artifacts = EcoreUtil2.<Artifacts>getContainerOfType(dao, Artifacts.class);
    IScope _scope = this.scopeProvider.getScope(artifacts, ProcessorModelPackage.Literals.ARTIFACTS__POJOS);
    return this.findEntity(this.qualifiedNameConverter, artifacts, _scope, pojoName);
  }
  
  public PojoEntity findEntity(final IQualifiedNameConverter qualifiedNameConverter, final Artifacts artifacts, final IScope scope, final String name) {
    Iterable<IEObjectDescription> _allElements = scope.getAllElements();
    for (final IEObjectDescription description : _allElements) {
      {
        InputOutput.<IEObjectDescription>println(description);
        Resource _eResource = artifacts.eResource();
        ResourceSet _resourceSet = _eResource.getResourceSet();
        URI _eObjectURI = description.getEObjectURI();
        EObject _eObject = _resourceSet.getEObject(_eObjectURI, true);
        final org.sqlproc.model.processorModel.Package packageDeclaration = ((org.sqlproc.model.processorModel.Package) _eObject);
        EList<AbstractEntity> _elements = packageDeclaration.getElements();
        for (final AbstractEntity aEntity : _elements) {
          if ((aEntity instanceof AnnotatedEntity)) {
            final AnnotatedEntity ae = ((AnnotatedEntity) aEntity);
            Entity _entity = ae.getEntity();
            if ((_entity instanceof PojoEntity)) {
              Entity _entity_1 = ae.getEntity();
              final PojoEntity entity = ((PojoEntity) _entity_1);
              String _name = entity.getName();
              boolean _equals = name.equals(_name);
              if (_equals) {
                return entity;
              }
            }
          }
        }
      }
    }
    return null;
  }
  
  protected PojoEntity _getPojo(final DaoEntity dao, final DaoDirectivePojo pojoDirective) {
    PojoEntity _elvis = null;
    PojoEntity _pojo = null;
    if (pojoDirective!=null) {
      _pojo=pojoDirective.getPojo();
    }
    if (_pojo != null) {
      _elvis = _pojo;
    } else {
      PojoEntity _pojoImplicit = this.getPojoImplicit(dao);
      _elvis = _pojoImplicit;
    }
    return _elvis;
  }
  
  public PojoEntity getPojo(final DaoEntity dao) {
    DaoDirectivePojo _pojoDirective = null;
    if (dao!=null) {
      _pojoDirective=this.getPojoDirective(dao);
    }
    final DaoDirectivePojo pojoDirective = _pojoDirective;
    PojoEntity _pojo = null;
    if (pojoDirective!=null) {
      _pojo=pojoDirective.getPojo();
    }
    return _pojo;
  }
  
  public PojoEntity getParent(final PojoEntity pojo) {
    JvmParameterizedTypeReference _superType = null;
    if (pojo!=null) {
      _superType=pojo.getSuperType();
    }
    final JvmParameterizedTypeReference superType = _superType;
    boolean _and = false;
    boolean _notEquals = (!Objects.equal(superType, null));
    if (!_notEquals) {
      _and = false;
    } else {
      _and = (superType instanceof PojoEntity);
    }
    if (_and) {
      return ((PojoEntity) superType);
    }
    return null;
  }
  
  public boolean isCRUD(final DaoEntity dao) {
    EList<DaoDirective> _directives = dao.getDirectives();
    DaoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<DaoDirective, Boolean> _function = new Function1<DaoDirective, Boolean>() {
        public Boolean apply(final DaoDirective x) {
          return Boolean.valueOf((x instanceof DaoDirectiveCrud));
        }
      };
      _findFirst=IterableExtensions.<DaoDirective>findFirst(_directives, _function);
    }
    final DaoDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isQuery(final DaoEntity dao) {
    EList<DaoDirective> _directives = dao.getDirectives();
    DaoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<DaoDirective, Boolean> _function = new Function1<DaoDirective, Boolean>() {
        public Boolean apply(final DaoDirective x) {
          return Boolean.valueOf((x instanceof DaoDirectiveQuery));
        }
      };
      _findFirst=IterableExtensions.<DaoDirective>findFirst(_directives, _function);
    }
    final DaoDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<FunProcDirective> listFunctionsDirectives(final DaoEntity dao) {
    final List<FunProcDirective> result = CollectionLiterals.<FunProcDirective>newArrayList();
    EList<DaoDirective> _directives = dao.getDirectives();
    Iterable<DaoDirective> _filter = null;
    if (_directives!=null) {
      final Function1<DaoDirective, Boolean> _function = new Function1<DaoDirective, Boolean>() {
        public Boolean apply(final DaoDirective x) {
          return Boolean.valueOf((x instanceof FunProcDirective));
        }
      };
      _filter=IterableExtensions.<DaoDirective>filter(_directives, _function);
    }
    final Procedure1<DaoDirective> _function_1 = new Procedure1<DaoDirective>() {
      public void apply(final DaoDirective it) {
        result.add(((FunProcDirective) it));
      }
    };
    IterableExtensions.<DaoDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public boolean isConflict(final Annotation an) {
    EList<AnnotationDirective> _directives = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<AnnotationDirective, Boolean> _function = new Function1<AnnotationDirective, Boolean>() {
        public Boolean apply(final AnnotationDirective x) {
          return Boolean.valueOf((x instanceof AnnotationDirectiveConflict));
        }
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> conflictAnnotations(final AnnotatedEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = pojo.getAnnotations();
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isConflict(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public List<Annotation> conflictAnnotations(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = this.annotations(pojo);
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isConflict(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public boolean isConstructor(final Annotation an) {
    EList<AnnotationDirective> _directives = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<AnnotationDirective, Boolean> _function = new Function1<AnnotationDirective, Boolean>() {
        public Boolean apply(final AnnotationDirective x) {
          return Boolean.valueOf((x instanceof AnnotationDirectiveConstructor));
        }
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> constructorAnnotations(final AnnotatedEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = pojo.getAnnotations();
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isConstructor(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public List<Annotation> constructorAnnotations(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = this.annotations(pojo);
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isConstructor(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public List<Annotation> constructorAnnotations(final DaoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = this.annotations(pojo);
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isConstructor(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public boolean isStatic(final Annotation an) {
    EList<AnnotationDirective> _directives = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<AnnotationDirective, Boolean> _function = new Function1<AnnotationDirective, Boolean>() {
        public Boolean apply(final AnnotationDirective x) {
          return Boolean.valueOf((x instanceof AnnotationDirectiveStatic));
        }
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> staticAnnotations(final AnnotatedEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = pojo.getAnnotations();
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isStatic(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public List<Annotation> staticAnnotations(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = this.annotations(pojo);
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isStatic(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public boolean isStandard(final Annotation an) {
    boolean _or = false;
    EList<AnnotationDirective> _directives = an.getDirectives();
    boolean _equals = Objects.equal(_directives, null);
    if (_equals) {
      _or = true;
    } else {
      EList<AnnotationDirective> _directives_1 = an.getDirectives();
      boolean _isEmpty = _directives_1.isEmpty();
      _or = _isEmpty;
    }
    if (_or) {
      return true;
    }
    EList<AnnotationDirective> _directives_2 = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives_2!=null) {
      final Function1<AnnotationDirective, Boolean> _function = new Function1<AnnotationDirective, Boolean>() {
        public Boolean apply(final AnnotationDirective x) {
          return Boolean.valueOf((x instanceof AnnotationDirectiveStandard));
        }
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives_2, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> standardAnnotations(final AnnotatedEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = pojo.getAnnotations();
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isStandard(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public List<Annotation> standardAnnotations(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = this.annotations(pojo);
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isStandard(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public List<Annotation> standardAnnotations(final DaoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = this.annotations(pojo);
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isStandard(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public boolean isSetter(final Annotation an) {
    EList<AnnotationDirective> _directives = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<AnnotationDirective, Boolean> _function = new Function1<AnnotationDirective, Boolean>() {
        public Boolean apply(final AnnotationDirective x) {
          return Boolean.valueOf((x instanceof AnnotationDirectiveSetter));
        }
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> setterAnnotations(final PojoAttribute prop) {
    boolean _equals = Objects.equal(prop, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = prop.getAnnotations();
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isSetter(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public boolean isGetter(final Annotation an) {
    EList<AnnotationDirective> _directives = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<AnnotationDirective, Boolean> _function = new Function1<AnnotationDirective, Boolean>() {
        public Boolean apply(final AnnotationDirective x) {
          return Boolean.valueOf((x instanceof AnnotationDirectiveGetter));
        }
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> getterAnnotations(final PojoAttribute prop) {
    boolean _equals = Objects.equal(prop, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = prop.getAnnotations();
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isGetter(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public boolean isAttribute(final Annotation an) {
    boolean _or = false;
    EList<AnnotationDirective> _directives = an.getDirectives();
    boolean _equals = Objects.equal(_directives, null);
    if (_equals) {
      _or = true;
    } else {
      EList<AnnotationDirective> _directives_1 = an.getDirectives();
      boolean _isEmpty = _directives_1.isEmpty();
      _or = _isEmpty;
    }
    if (_or) {
      return true;
    }
    EList<AnnotationDirective> _directives_2 = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives_2!=null) {
      final Function1<AnnotationDirective, Boolean> _function = new Function1<AnnotationDirective, Boolean>() {
        public Boolean apply(final AnnotationDirective x) {
          return Boolean.valueOf((x instanceof AnnotationDirectiveAttribute));
        }
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives_2, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> attributeAnnotations(final PojoAttribute prop) {
    boolean _equals = Objects.equal(prop, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = prop.getAnnotations();
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isAttribute(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public List<PojoEntity> onlyPojos(final Extends ext) {
    final List<PojoEntity> result = CollectionLiterals.<PojoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = ext.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = new Function1<ImplementsExtendsDirective, Boolean>() {
        public Boolean apply(final ImplementsExtendsDirective x) {
          return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveOnlyPojos));
        }
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Procedure1<ImplementsExtendsDirective> _function_1 = new Procedure1<ImplementsExtendsDirective>() {
      public void apply(final ImplementsExtendsDirective it) {
        EList<PojoEntity> _onlyPojos = ((ImplementsExtendsDirectiveOnlyPojos) it).getOnlyPojos();
        result.addAll(_onlyPojos);
      }
    };
    IterableExtensions.<ImplementsExtendsDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<PojoEntity> exceptPojos(final Extends ext) {
    final List<PojoEntity> result = CollectionLiterals.<PojoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = ext.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = new Function1<ImplementsExtendsDirective, Boolean>() {
        public Boolean apply(final ImplementsExtendsDirective x) {
          return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveExceptPojos));
        }
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Procedure1<ImplementsExtendsDirective> _function_1 = new Procedure1<ImplementsExtendsDirective>() {
      public void apply(final ImplementsExtendsDirective it) {
        EList<PojoEntity> _exceptPojos = ((ImplementsExtendsDirectiveExceptPojos) it).getExceptPojos();
        result.addAll(_exceptPojos);
      }
    };
    IterableExtensions.<ImplementsExtendsDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<PojoEntity> onlyPojos(final Implements imp) {
    final List<PojoEntity> result = CollectionLiterals.<PojoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = imp.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = new Function1<ImplementsExtendsDirective, Boolean>() {
        public Boolean apply(final ImplementsExtendsDirective x) {
          return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveOnlyPojos));
        }
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Procedure1<ImplementsExtendsDirective> _function_1 = new Procedure1<ImplementsExtendsDirective>() {
      public void apply(final ImplementsExtendsDirective it) {
        EList<PojoEntity> _onlyPojos = ((ImplementsExtendsDirectiveOnlyPojos) it).getOnlyPojos();
        result.addAll(_onlyPojos);
      }
    };
    IterableExtensions.<ImplementsExtendsDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<PojoEntity> exceptPojos(final Implements imp) {
    final List<PojoEntity> result = CollectionLiterals.<PojoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = imp.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = new Function1<ImplementsExtendsDirective, Boolean>() {
        public Boolean apply(final ImplementsExtendsDirective x) {
          return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveExceptPojos));
        }
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Procedure1<ImplementsExtendsDirective> _function_1 = new Procedure1<ImplementsExtendsDirective>() {
      public void apply(final ImplementsExtendsDirective it) {
        EList<PojoEntity> _exceptPojos = ((ImplementsExtendsDirectiveExceptPojos) it).getExceptPojos();
        result.addAll(_exceptPojos);
      }
    };
    IterableExtensions.<ImplementsExtendsDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<DaoEntity> onlyDaos(final Extends ext) {
    final List<DaoEntity> result = CollectionLiterals.<DaoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = ext.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = new Function1<ImplementsExtendsDirective, Boolean>() {
        public Boolean apply(final ImplementsExtendsDirective x) {
          return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveOnlyDaos));
        }
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Procedure1<ImplementsExtendsDirective> _function_1 = new Procedure1<ImplementsExtendsDirective>() {
      public void apply(final ImplementsExtendsDirective it) {
        EList<DaoEntity> _onlyDaos = ((ImplementsExtendsDirectiveOnlyDaos) it).getOnlyDaos();
        result.addAll(_onlyDaos);
      }
    };
    IterableExtensions.<ImplementsExtendsDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<DaoEntity> exceptDaos(final Extends ext) {
    final List<DaoEntity> result = CollectionLiterals.<DaoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = ext.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = new Function1<ImplementsExtendsDirective, Boolean>() {
        public Boolean apply(final ImplementsExtendsDirective x) {
          return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveExceptDaos));
        }
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Procedure1<ImplementsExtendsDirective> _function_1 = new Procedure1<ImplementsExtendsDirective>() {
      public void apply(final ImplementsExtendsDirective it) {
        EList<DaoEntity> _exceptDaos = ((ImplementsExtendsDirectiveExceptDaos) it).getExceptDaos();
        result.addAll(_exceptDaos);
      }
    };
    IterableExtensions.<ImplementsExtendsDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<DaoEntity> onlyDaos(final Implements imp) {
    final List<DaoEntity> result = CollectionLiterals.<DaoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = imp.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = new Function1<ImplementsExtendsDirective, Boolean>() {
        public Boolean apply(final ImplementsExtendsDirective x) {
          return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveOnlyDaos));
        }
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Procedure1<ImplementsExtendsDirective> _function_1 = new Procedure1<ImplementsExtendsDirective>() {
      public void apply(final ImplementsExtendsDirective it) {
        EList<DaoEntity> _onlyDaos = ((ImplementsExtendsDirectiveOnlyDaos) it).getOnlyDaos();
        result.addAll(_onlyDaos);
      }
    };
    IterableExtensions.<ImplementsExtendsDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<DaoEntity> exceptDaos(final Implements imp) {
    final List<DaoEntity> result = CollectionLiterals.<DaoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = imp.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = new Function1<ImplementsExtendsDirective, Boolean>() {
        public Boolean apply(final ImplementsExtendsDirective x) {
          return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveExceptDaos));
        }
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Procedure1<ImplementsExtendsDirective> _function_1 = new Procedure1<ImplementsExtendsDirective>() {
      public void apply(final ImplementsExtendsDirective it) {
        EList<DaoEntity> _exceptDaos = ((ImplementsExtendsDirectiveExceptDaos) it).getExceptDaos();
        result.addAll(_exceptDaos);
      }
    };
    IterableExtensions.<ImplementsExtendsDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public String value(final ValueType pv) {
    boolean _equals = Objects.equal(pv, null);
    if (_equals) {
      return null;
    }
    String s = pv.getValue();
    boolean _notEquals = (!Objects.equal(s, null));
    if (_notEquals) {
      String _trim = s.trim();
      s = _trim;
      boolean _startsWith = s.startsWith("\"");
      boolean _not = (!_startsWith);
      if (_not) {
        s = ("\"" + s);
      }
      boolean _endsWith = s.endsWith("\"");
      boolean _not_1 = (!_endsWith);
      if (_not_1) {
        s = (s + "\"");
      }
      return s;
    } else {
      String _id = pv.getId();
      boolean _notEquals_1 = (!Objects.equal(_id, null));
      if (_notEquals_1) {
        return pv.getId();
      } else {
        int _number = pv.getNumber();
        return ("" + Integer.valueOf(_number));
      }
    }
  }
  
  public String getExtends(final EnumEntity e) {
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Extends> _filter = Iterables.<Extends>filter(_eContents, Extends.class);
    for (final Extends ext : _filter) {
      JvmParameterizedTypeReference _extends = ext.getExtends();
      return _extends.getSimpleName();
    }
    return "";
  }
  
  public boolean isImplements(final EnumEntity e) {
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Implements> _filter = Iterables.<Implements>filter(_eContents, Implements.class);
    for (final Implements ext : _filter) {
      return true;
    }
    return false;
  }
  
  public boolean isExtends(final PojoEntity e) {
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Extends> _filter = Iterables.<Extends>filter(_eContents, Extends.class);
    for (final Extends ext : _filter) {
      {
        List<PojoEntity> _onlyPojos = this.onlyPojos(ext);
        boolean _isEmpty = _onlyPojos.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          List<PojoEntity> _onlyPojos_1 = this.onlyPojos(ext);
          for (final PojoEntity ee : _onlyPojos_1) {
            String _name = ee.getName();
            String _name_1 = e.getName();
            boolean _equals = Objects.equal(_name, _name_1);
            if (_equals) {
              return true;
            }
          }
          return false;
        }
        List<PojoEntity> _exceptPojos = this.exceptPojos(ext);
        for (final PojoEntity ee_1 : _exceptPojos) {
          String _name_2 = ee_1.getName();
          String _name_3 = e.getName();
          boolean _equals_1 = Objects.equal(_name_2, _name_3);
          if (_equals_1) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }
  
  public boolean isExtends(final PojoEntity e, final Extends ext) {
    List<PojoEntity> _onlyPojos = this.onlyPojos(ext);
    boolean _isEmpty = _onlyPojos.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      List<PojoEntity> _onlyPojos_1 = this.onlyPojos(ext);
      for (final PojoEntity ee : _onlyPojos_1) {
        String _name = ee.getName();
        String _name_1 = e.getName();
        boolean _equals = Objects.equal(_name, _name_1);
        if (_equals) {
          return true;
        }
      }
      return false;
    }
    List<PojoEntity> _exceptPojos = this.exceptPojos(ext);
    for (final PojoEntity ee_1 : _exceptPojos) {
      String _name_2 = ee_1.getName();
      String _name_3 = e.getName();
      boolean _equals_1 = Objects.equal(_name_2, _name_3);
      if (_equals_1) {
        return false;
      }
    }
    return true;
  }
  
  public Extends getExtends(final PojoEntity e) {
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Extends> _filter = Iterables.<Extends>filter(_eContents, Extends.class);
    for (final Extends ext : _filter) {
      boolean _isExtends = this.isExtends(e, ext);
      if (_isExtends) {
        return ext;
      }
    }
    return null;
  }
  
  public boolean isImplements(final PojoEntity e) {
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Implements> _filter = Iterables.<Implements>filter(_eContents, Implements.class);
    for (final Implements ext : _filter) {
      {
        List<PojoEntity> _exceptPojos = this.exceptPojos(ext);
        for (final PojoEntity ee : _exceptPojos) {
          String _name = ee.getName();
          String _name_1 = e.getName();
          boolean _equals = Objects.equal(_name, _name_1);
          if (_equals) {
            return false;
          }
        }
        List<PojoEntity> _onlyPojos = this.onlyPojos(ext);
        boolean _isEmpty = _onlyPojos.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          List<PojoEntity> _onlyPojos_1 = this.onlyPojos(ext);
          for (final PojoEntity ee_1 : _onlyPojos_1) {
            String _name_2 = ee_1.getName();
            String _name_3 = e.getName();
            boolean _equals_1 = Objects.equal(_name_2, _name_3);
            if (_equals_1) {
              return true;
            }
          }
        } else {
          return true;
        }
      }
    }
    return false;
  }
  
  public boolean isImplements(final PojoEntity e, final Implements ext) {
    List<PojoEntity> _onlyPojos = this.onlyPojos(ext);
    boolean _isEmpty = _onlyPojos.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      List<PojoEntity> _onlyPojos_1 = this.onlyPojos(ext);
      for (final PojoEntity ee : _onlyPojos_1) {
        String _name = ee.getName();
        String _name_1 = e.getName();
        boolean _equals = Objects.equal(_name, _name_1);
        if (_equals) {
          return true;
        }
      }
      return false;
    }
    List<PojoEntity> _exceptPojos = this.exceptPojos(ext);
    for (final PojoEntity ee_1 : _exceptPojos) {
      String _name_2 = ee_1.getName();
      String _name_3 = e.getName();
      boolean _equals_1 = Objects.equal(_name_2, _name_3);
      if (_equals_1) {
        return false;
      }
    }
    return true;
  }
  
  public List<Implements> getImplements(final PojoEntity e) {
    final List<Implements> list = CollectionLiterals.<Implements>newArrayList();
    EObject _eContainer = e.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EList<EObject> _eContents = _eContainer_1.eContents();
    Iterable<Implements> _filter = Iterables.<Implements>filter(_eContents, Implements.class);
    for (final Implements ext : _filter) {
      boolean _isImplements = this.isImplements(e, ext);
      if (_isImplements) {
        list.add(ext);
      }
    }
    return list;
  }
  
  public boolean isExtends(final DaoEntity e) {
    EObject _eContainer = e.eContainer();
    EList<EObject> _eContents = _eContainer.eContents();
    Iterable<Extends> _filter = Iterables.<Extends>filter(_eContents, Extends.class);
    for (final Extends ext : _filter) {
      {
        List<DaoEntity> _onlyDaos = this.onlyDaos(ext);
        boolean _isEmpty = _onlyDaos.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          List<DaoEntity> _onlyDaos_1 = this.onlyDaos(ext);
          for (final DaoEntity ee : _onlyDaos_1) {
            String _name = ee.getName();
            String _name_1 = e.getName();
            boolean _equals = Objects.equal(_name, _name_1);
            if (_equals) {
              return true;
            }
          }
          return false;
        }
        List<DaoEntity> _exceptDaos = this.exceptDaos(ext);
        for (final DaoEntity ee_1 : _exceptDaos) {
          String _name_2 = ee_1.getName();
          String _name_3 = e.getName();
          boolean _equals_1 = Objects.equal(_name_2, _name_3);
          if (_equals_1) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }
  
  public boolean isExtends(final DaoEntity e, final Extends ext) {
    List<DaoEntity> _onlyDaos = this.onlyDaos(ext);
    boolean _isEmpty = _onlyDaos.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      List<DaoEntity> _onlyDaos_1 = this.onlyDaos(ext);
      for (final DaoEntity ee : _onlyDaos_1) {
        String _name = ee.getName();
        String _name_1 = e.getName();
        boolean _equals = Objects.equal(_name, _name_1);
        if (_equals) {
          return true;
        }
      }
      return false;
    }
    List<DaoEntity> _exceptDaos = this.exceptDaos(ext);
    for (final DaoEntity ee_1 : _exceptDaos) {
      String _name_2 = ee_1.getName();
      String _name_3 = e.getName();
      boolean _equals_1 = Objects.equal(_name_2, _name_3);
      if (_equals_1) {
        return false;
      }
    }
    return true;
  }
  
  public Extends getExtends(final DaoEntity e) {
    EObject _eContainer = e.eContainer();
    EList<EObject> _eContents = _eContainer.eContents();
    Iterable<Extends> _filter = Iterables.<Extends>filter(_eContents, Extends.class);
    for (final Extends ext : _filter) {
      boolean _isExtends = this.isExtends(e, ext);
      if (_isExtends) {
        return ext;
      }
    }
    return null;
  }
  
  public boolean isImplements(final DaoEntity e) {
    EObject _eContainer = e.eContainer();
    EList<EObject> _eContents = _eContainer.eContents();
    Iterable<Implements> _filter = Iterables.<Implements>filter(_eContents, Implements.class);
    for (final Implements ext : _filter) {
      {
        List<DaoEntity> _exceptDaos = this.exceptDaos(ext);
        for (final DaoEntity ee : _exceptDaos) {
          String _name = ee.getName();
          String _name_1 = e.getName();
          boolean _equals = Objects.equal(_name, _name_1);
          if (_equals) {
            return false;
          }
        }
        List<DaoEntity> _onlyDaos = this.onlyDaos(ext);
        boolean _isEmpty = _onlyDaos.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          List<DaoEntity> _onlyDaos_1 = this.onlyDaos(ext);
          for (final DaoEntity ee_1 : _onlyDaos_1) {
            String _name_2 = ee_1.getName();
            String _name_3 = e.getName();
            boolean _equals_1 = Objects.equal(_name_2, _name_3);
            if (_equals_1) {
              return true;
            }
          }
        } else {
          return true;
        }
      }
    }
    return false;
  }
  
  public boolean isImplements(final DaoEntity e, final Implements ext) {
    List<DaoEntity> _onlyDaos = this.onlyDaos(ext);
    boolean _isEmpty = _onlyDaos.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      List<DaoEntity> _onlyDaos_1 = this.onlyDaos(ext);
      for (final DaoEntity ee : _onlyDaos_1) {
        String _name = ee.getName();
        String _name_1 = e.getName();
        boolean _equals = Objects.equal(_name, _name_1);
        if (_equals) {
          return true;
        }
      }
      return false;
    }
    List<DaoEntity> _exceptDaos = this.exceptDaos(ext);
    for (final DaoEntity ee_1 : _exceptDaos) {
      String _name_2 = ee_1.getName();
      String _name_3 = e.getName();
      boolean _equals_1 = Objects.equal(_name_2, _name_3);
      if (_equals_1) {
        return false;
      }
    }
    return true;
  }
  
  public List<Implements> getImplements(final DaoEntity e) {
    final List<Implements> list = CollectionLiterals.<Implements>newArrayList();
    EObject _eContainer = e.eContainer();
    EList<EObject> _eContents = _eContainer.eContents();
    Iterable<Implements> _filter = Iterables.<Implements>filter(_eContents, Implements.class);
    for (final Implements ext : _filter) {
      boolean _isImplements = this.isImplements(e, ext);
      if (_isImplements) {
        list.add(ext);
      }
    }
    return list;
  }
  
  public String getSimpleName(final JvmParameterizedTypeReference ref) {
    JvmType _type = ref.getType();
    String _simpleName = _type.getSimpleName();
    final StringBuilder name = new StringBuilder(_simpleName);
    boolean _and = false;
    EList<JvmTypeReference> _arguments = ref.getArguments();
    boolean _notEquals = (!Objects.equal(_arguments, null));
    if (!_notEquals) {
      _and = false;
    } else {
      EList<JvmTypeReference> _arguments_1 = ref.getArguments();
      boolean _isEmpty = _arguments_1.isEmpty();
      boolean _not = (!_isEmpty);
      _and = _not;
    }
    if (_and) {
      name.append("<");
      boolean first = true;
      EList<JvmTypeReference> _arguments_2 = ref.getArguments();
      for (final JvmTypeReference arg : _arguments_2) {
        {
          if (first) {
            first = false;
          } else {
            name.append(",");
          }
          String _simpleName_1 = arg.getSimpleName();
          name.append(_simpleName_1);
        }
      }
      name.append(">");
    }
    return name.toString();
  }
  
  public String constName(final Object l) {
    if (l instanceof List) {
      return _constName((List<PojoAttribute>)l);
    } else if (l instanceof PojoAttribute) {
      return _constName((PojoAttribute)l);
    } else if (l instanceof String) {
      return _constName((String)l);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(l).toString());
    }
  }
  
  public PojoEntity getPojo(final DaoEntity dao, final DaoDirectivePojo pojoDirective) {
    return _getPojo(dao, pojoDirective);
  }
}
