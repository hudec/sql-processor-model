/**
 * generated by Xtext
 */
package org.sqlproc.model.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.sqlproc.model.ImportManager;
import org.sqlproc.model.generator.ProcessorGeneratorUtils;
import org.sqlproc.model.processorModel.DaoDirectiveParameters;
import org.sqlproc.model.processorModel.Extends;
import org.sqlproc.model.processorModel.FunProcDirective;
import org.sqlproc.model.processorModel.FunProcType;
import org.sqlproc.model.processorModel.FunctionCall;
import org.sqlproc.model.processorModel.FunctionCallQuery;
import org.sqlproc.model.processorModel.FunctionQuery;
import org.sqlproc.model.processorModel.Implements;
import org.sqlproc.model.processorModel.PojoDao;
import org.sqlproc.model.processorModel.PojoEntity;
import org.sqlproc.model.processorModel.PojoProperty;
import org.sqlproc.model.processorModel.PojoType;
import org.sqlproc.model.processorModel.ProcedureCallQuery;
import org.sqlproc.model.processorModel.ProcedureUpdate;
import org.sqlproc.model.util.Utils;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class ProcessorDaoGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Inject
  @Extension
  private ProcessorGeneratorUtils _processorGeneratorUtils;
  
  public CharSequence compile(final PojoDao d) {
    StringConcatenation _builder = new StringConcatenation();
    final ImportManager im = new ImportManager(true);
    _builder.newLineIfNotEmpty();
    this.addImplements(d, im);
    _builder.newLineIfNotEmpty();
    this.addExtends(d, im);
    _builder.newLineIfNotEmpty();
    final Map<String, Map<String, PojoType>> moreResultClasses = this._processorGeneratorUtils.getMoreResultClasses(d);
    _builder.newLineIfNotEmpty();
    final PojoEntity pojo = this._processorGeneratorUtils.getPojo(d);
    _builder.newLineIfNotEmpty();
    final String implPackage = Utils.getImplPackage(d);
    _builder.newLineIfNotEmpty();
    final CharSequence classBody = this.compile(d, pojo, moreResultClasses, im, implPackage);
    _builder.newLineIfNotEmpty();
    {
      EObject _eContainer = d.eContainer();
      boolean _notEquals = (!Objects.equal(_eContainer, null));
      if (_notEquals) {
        _builder.append("package ");
        EObject _eContainer_1 = d.eContainer();
        QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_1);
        _builder.append(_fullyQualifiedName, "");
        {
          boolean _notEquals_1 = (!Objects.equal(implPackage, null));
          if (_notEquals_1) {
            _builder.append(".");
            _builder.append(implPackage, "");
          }
        }
        _builder.append(";");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _notEquals_2 = (!Objects.equal(implPackage, null));
      if (_notEquals_2) {
        _builder.newLine();
        _builder.append("import ");
        EObject _eContainer_2 = d.eContainer();
        QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_2);
        _builder.append(_fullyQualifiedName_1, "");
        _builder.append(".");
        String _name = d.getName();
        _builder.append(_name, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      List<String> _imports = im.getImports();
      boolean _isEmpty = _imports.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("\t");
        _builder.newLine();
        {
          List<String> _imports_1 = im.getImports();
          for(final String i : _imports_1) {
            _builder.append("import ");
            _builder.append(i, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      Integer _sernum = this._processorGeneratorUtils.getSernum(d);
      boolean _notEquals_3 = (!Objects.equal(_sernum, null));
      if (_notEquals_3) {
        _builder.newLine();
        _builder.append("import java.io.Serializable;");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.slf4j.Logger;");
    _builder.newLine();
    _builder.append("import org.slf4j.LoggerFactory;");
    _builder.newLine();
    _builder.append("import org.sqlproc.engine.SqlControl;");
    _builder.newLine();
    _builder.append("import org.sqlproc.engine.SqlCrudEngine;");
    _builder.newLine();
    _builder.append("import org.sqlproc.engine.SqlEngineFactory;");
    _builder.newLine();
    _builder.append("import org.sqlproc.engine.SqlQueryEngine;");
    _builder.newLine();
    _builder.append("import org.sqlproc.engine.SqlProcedureEngine;");
    _builder.newLine();
    _builder.append("import org.sqlproc.engine.SqlSession;");
    _builder.newLine();
    _builder.append("import org.sqlproc.engine.SqlSessionFactory;");
    _builder.newLine();
    _builder.append("import org.sqlproc.engine.impl.SqlStandardControl;");
    _builder.newLine();
    {
      boolean _notEquals_4 = (!Objects.equal(pojo, null));
      if (_notEquals_4) {
        _builder.append("import ");
        String _completeName = this._processorGeneratorUtils.completeName(pojo);
        _builder.append(_completeName, "");
        _builder.append(";");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Set<Map.Entry<String, Map<String, PojoType>>> _entrySet = moreResultClasses.entrySet();
      for(final Map.Entry<String, Map<String, PojoType>> f : _entrySet) {
        {
          Map<String, PojoType> _value = f.getValue();
          Collection<PojoType> _values = _value.values();
          boolean _hasElements = false;
          for(final PojoType a : _values) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate("\n\t\t", "");
            }
            _builder.append("import ");
            PojoEntity _ref = a.getRef();
            String _completeName_1 = this._processorGeneratorUtils.completeName(_ref);
            _builder.append(_completeName_1, "");
            _builder.append(";");
          }
        }
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append(classBody, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final PojoDao d, final PojoEntity e, final Map<String, Map<String, PojoType>> moreResultClasses, final ImportManager im, final String implPackage) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public ");
    {
      boolean _isAbstract = this._processorGeneratorUtils.isAbstract(d);
      if (_isAbstract) {
        _builder.append("abstract ");
      }
    }
    _builder.append("class ");
    String _name = d.getName();
    _builder.append(_name, "");
    {
      boolean _notEquals = (!Objects.equal(implPackage, null));
      if (_notEquals) {
        _builder.append("Impl");
      }
    }
    _builder.append(" ");
    CharSequence _compileExtends = this.compileExtends(d, im);
    _builder.append(_compileExtends, "");
    CharSequence _compileImplements = this.compileImplements(d, implPackage);
    _builder.append(_compileImplements, "");
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    {
      Integer _sernum = this._processorGeneratorUtils.getSernum(d);
      boolean _notEquals_1 = (!Objects.equal(_sernum, null));
      if (_notEquals_1) {
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private static final long serialVersionUID = ");
        Integer _sernum_1 = this._processorGeneratorUtils.getSernum(d);
        _builder.append(_sernum_1, "\t");
        _builder.append("L;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("protected final Logger logger = LoggerFactory.getLogger(getClass());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected SqlEngineFactory sqlEngineFactory;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected SqlSessionFactory sqlSessionFactory;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name_1 = d.getName();
    _builder.append(_name_1, "\t");
    {
      boolean _notEquals_2 = (!Objects.equal(implPackage, null));
      if (_notEquals_2) {
        _builder.append("Impl");
      }
    }
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name_2 = d.getName();
    _builder.append(_name_2, "\t");
    {
      boolean _notEquals_3 = (!Objects.equal(implPackage, null));
      if (_notEquals_3) {
        _builder.append("Impl");
      }
    }
    _builder.append("(SqlEngineFactory sqlEngineFactory) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.sqlEngineFactory = sqlEngineFactory;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name_3 = d.getName();
    _builder.append(_name_3, "\t");
    {
      boolean _notEquals_4 = (!Objects.equal(implPackage, null));
      if (_notEquals_4) {
        _builder.append("Impl");
      }
    }
    _builder.append("(SqlEngineFactory sqlEngineFactory, SqlSessionFactory sqlSessionFactory) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.sqlEngineFactory = sqlEngineFactory;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.sqlSessionFactory = sqlSessionFactory;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      boolean _isCRUD = this._processorGeneratorUtils.isCRUD(d);
      if (_isCRUD) {
        PojoEntity _parent = this._processorGeneratorUtils.getParent(e);
        CharSequence _compileInsert = this.compileInsert(d, e, _parent, im, true);
        _builder.append(_compileInsert, "");
        _builder.newLineIfNotEmpty();
        CharSequence _compileGet = this.compileGet(d, e, moreResultClasses, im, true);
        _builder.append(_compileGet, "");
        _builder.newLineIfNotEmpty();
        PojoEntity _parent_1 = this._processorGeneratorUtils.getParent(e);
        CharSequence _compileUpdate = this.compileUpdate(d, e, _parent_1, im, true);
        _builder.append(_compileUpdate, "");
        _builder.newLineIfNotEmpty();
        PojoEntity _parent_2 = this._processorGeneratorUtils.getParent(e);
        CharSequence _compileDelete = this.compileDelete(d, e, _parent_2, im, true);
        _builder.append(_compileDelete, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _isQuery = this._processorGeneratorUtils.isQuery(d);
      if (_isQuery) {
        CharSequence _compileList = this.compileList(d, e, moreResultClasses, im, true);
        _builder.append(_compileList, "");
        _builder.newLineIfNotEmpty();
        CharSequence _compileCount = this.compileCount(d, e, moreResultClasses, im, true);
        _builder.append(_compileCount, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _isEmpty = moreResultClasses.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        CharSequence _compileMoreResultClasses = this.compileMoreResultClasses(d, e, moreResultClasses, im);
        _builder.append(_compileMoreResultClasses, "");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    {
      List<FunProcDirective> _listFunctionsDirectives = this._processorGeneratorUtils.listFunctionsDirectives(d);
      for(final FunProcDirective fp : _listFunctionsDirectives) {
        FunProcType _type = fp.getType();
        DaoDirectiveParameters _paramlist = fp.getParamlist();
        CharSequence _compileFunctionProcedure = this.compileFunctionProcedure(d, e, _type, _paramlist, im, true);
        _builder.append(_compileFunctionProcedure, "\t");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compileFunctionProcedure(final PojoDao d, final PojoEntity e, final FunctionCallQuery type, final DaoDirectiveParameters p, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    final String name = this._processorGeneratorUtils.getFunProcName(d);
    _builder.newLineIfNotEmpty();
    _builder.append("public ");
    PojoType _out = p.getOut();
    CharSequence _compileType = this._processorGeneratorUtils.compileType(_out, im);
    _builder.append(_compileType, "");
    _builder.append(" ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins = p.getIns();
      boolean _hasElements = false;
      for(final PojoType ma : _ins) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType_1 = this._processorGeneratorUtils.compileType(ma, im);
        _builder.append(_compileType_1, "");
        _builder.append(" ");
        String _paramName = this._processorGeneratorUtils.getParamName(ma);
        _builder.append(_paramName, "");
      }
    }
    _builder.append(", SqlControl sqlControl) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("logger.trace(\"");
    _builder.append(name, "\t\t");
    _builder.append(": \" + ");
    {
      EList<PojoType> _ins_1 = p.getIns();
      boolean _hasElements_1 = false;
      for(final PojoType ma_1 : _ins_1) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
        } else {
          _builder.appendImmediate(" + \" \" ", "\t\t");
        }
        String _paramName_1 = this._processorGeneratorUtils.getParamName(ma_1);
        _builder.append(_paramName_1, "\t\t");
      }
    }
    _builder.append(" + \" \" + sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("SqlProcedureEngine sqlProc");
    String _name = d.getName();
    _builder.append(_name, "\t");
    _builder.append(" = sqlEngineFactory.getCheckedProcedureEngine(\"FUN_");
    String _dbName = Utils.dbName(d);
    _builder.append(_dbName, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    PojoType _out_1 = p.getOut();
    CharSequence _compileType_2 = this._processorGeneratorUtils.compileType(_out_1, im);
    _builder.append(_compileType_2, "\t");
    _builder.append(" list = sqlProc");
    String _name_1 = d.getName();
    _builder.append(_name_1, "\t");
    _builder.append(".callQuery(sqlSession, ");
    PojoType _out_2 = p.getOut();
    PojoEntity _gref = _out_2.getGref();
    String _name_2 = _gref.getName();
    _builder.append(_name_2, "\t");
    _builder.append(".class, ");
    {
      EList<PojoType> _ins_2 = p.getIns();
      boolean _hasElements_2 = false;
      for(final PojoType ma_2 : _ins_2) {
        if (!_hasElements_2) {
          _hasElements_2 = true;
        } else {
          _builder.appendImmediate(", ", "\t");
        }
        String _paramName_2 = this._processorGeneratorUtils.getParamName(ma_2);
        _builder.append(_paramName_2, "\t");
      }
    }
    _builder.append(", sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("logger.trace(\"");
    _builder.append(name, "\t\t");
    _builder.append(" result: \" + list);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return list;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("public ");
        PojoType _out_3 = p.getOut();
        CharSequence _compileType_3 = this._processorGeneratorUtils.compileType(_out_3, im);
        _builder.append(_compileType_3, "");
        _builder.append(" ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_3 = p.getIns();
          boolean _hasElements_3 = false;
          for(final PojoType ma_3 : _ins_3) {
            if (!_hasElements_3) {
              _hasElements_3 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_4 = this._processorGeneratorUtils.compileType(ma_3, im);
            _builder.append(_compileType_4, "");
            _builder.append(" ");
            String _paramName_3 = this._processorGeneratorUtils.getParamName(ma_3);
            _builder.append(_paramName_3, "");
          }
        }
        _builder.append(", SqlControl sqlControl) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return ");
        _builder.append(name, "\t");
        _builder.append("(sqlSessionFactory.getSqlSession(), ");
        {
          EList<PojoType> _ins_4 = p.getIns();
          boolean _hasElements_4 = false;
          for(final PojoType ma_4 : _ins_4) {
            if (!_hasElements_4) {
              _hasElements_4 = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            String _paramName_4 = this._processorGeneratorUtils.getParamName(ma_4);
            _builder.append(_paramName_4, "\t");
          }
        }
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("public ");
    PojoType _out_4 = p.getOut();
    CharSequence _compileType_5 = this._processorGeneratorUtils.compileType(_out_4, im);
    _builder.append(_compileType_5, "");
    _builder.append(" ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins_5 = p.getIns();
      boolean _hasElements_5 = false;
      for(final PojoType ma_5 : _ins_5) {
        if (!_hasElements_5) {
          _hasElements_5 = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType_6 = this._processorGeneratorUtils.compileType(ma_5, im);
        _builder.append(_compileType_6, "");
        _builder.append(" ");
        String _paramName_5 = this._processorGeneratorUtils.getParamName(ma_5);
        _builder.append(_paramName_5, "");
      }
    }
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return ");
    _builder.append(name, "\t");
    _builder.append("(sqlSession, ");
    {
      EList<PojoType> _ins_6 = p.getIns();
      boolean _hasElements_6 = false;
      for(final PojoType ma_6 : _ins_6) {
        if (!_hasElements_6) {
          _hasElements_6 = true;
        } else {
          _builder.appendImmediate(", ", "\t");
        }
        String _paramName_6 = this._processorGeneratorUtils.getParamName(ma_6);
        _builder.append(_paramName_6, "\t");
      }
    }
    _builder.append(", null);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("public ");
        PojoType _out_5 = p.getOut();
        CharSequence _compileType_7 = this._processorGeneratorUtils.compileType(_out_5, im);
        _builder.append(_compileType_7, "");
        _builder.append(" ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_7 = p.getIns();
          boolean _hasElements_7 = false;
          for(final PojoType ma_7 : _ins_7) {
            if (!_hasElements_7) {
              _hasElements_7 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_8 = this._processorGeneratorUtils.compileType(ma_7, im);
            _builder.append(_compileType_8, "");
            _builder.append(" ");
            String _paramName_7 = this._processorGeneratorUtils.getParamName(ma_7);
            _builder.append(_paramName_7, "");
          }
        }
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return ");
        _builder.append(name, "\t");
        _builder.append("(");
        {
          EList<PojoType> _ins_8 = p.getIns();
          boolean _hasElements_8 = false;
          for(final PojoType ma_8 : _ins_8) {
            if (!_hasElements_8) {
              _hasElements_8 = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            String _paramName_8 = this._processorGeneratorUtils.getParamName(ma_8);
            _builder.append(_paramName_8, "\t");
          }
        }
        _builder.append(", null);");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  protected CharSequence _compileFunctionProcedure(final PojoDao d, final PojoEntity e, final ProcedureCallQuery type, final DaoDirectiveParameters p, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    final String name = this._processorGeneratorUtils.getFunProcName(d);
    _builder.newLineIfNotEmpty();
    _builder.append("public ");
    PojoType _out = p.getOut();
    CharSequence _compileType = this._processorGeneratorUtils.compileType(_out, im);
    _builder.append(_compileType, "");
    _builder.append(" ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins = p.getIns();
      boolean _hasElements = false;
      for(final PojoType ma : _ins) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType_1 = this._processorGeneratorUtils.compileType(ma, im);
        _builder.append(_compileType_1, "");
        _builder.append(" ");
        String _paramName = this._processorGeneratorUtils.getParamName(ma);
        _builder.append(_paramName, "");
      }
    }
    _builder.append(", SqlControl sqlControl) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("logger.trace(\"");
    _builder.append(name, "\t\t");
    _builder.append(": \" + ");
    {
      EList<PojoType> _ins_1 = p.getIns();
      boolean _hasElements_1 = false;
      for(final PojoType ma_1 : _ins_1) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
        } else {
          _builder.appendImmediate(" + \" \" ", "\t\t");
        }
        String _paramName_1 = this._processorGeneratorUtils.getParamName(ma_1);
        _builder.append(_paramName_1, "\t\t");
      }
    }
    _builder.append(" + \" \" + sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("SqlProcedureEngine sqlProc");
    String _name = d.getName();
    _builder.append(_name, "\t");
    _builder.append(" = sqlEngineFactory.getCheckedProcedureEngine(\"PROC_");
    String _dbName = Utils.dbName(d);
    _builder.append(_dbName, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    PojoType _out_1 = p.getOut();
    CharSequence _compileType_2 = this._processorGeneratorUtils.compileType(_out_1, im);
    _builder.append(_compileType_2, "\t");
    _builder.append(" list = sqlProc");
    String _name_1 = d.getName();
    _builder.append(_name_1, "\t");
    _builder.append(".callQuery(sqlSession, ");
    {
      PojoType _out_2 = p.getOut();
      PojoEntity _gref = _out_2.getGref();
      boolean _notEquals = (!Objects.equal(_gref, null));
      if (_notEquals) {
        PojoType _out_3 = p.getOut();
        PojoEntity _gref_1 = _out_3.getGref();
        String _name_2 = _gref_1.getName();
        _builder.append(_name_2, "\t");
      } else {
        PojoType _out_4 = p.getOut();
        JvmType _gtype = _out_4.getGtype();
        String _simpleName = _gtype.getSimpleName();
        _builder.append(_simpleName, "\t");
      }
    }
    _builder.append(".class, ");
    {
      EList<PojoType> _ins_2 = p.getIns();
      boolean _hasElements_2 = false;
      for(final PojoType ma_2 : _ins_2) {
        if (!_hasElements_2) {
          _hasElements_2 = true;
        } else {
          _builder.appendImmediate(", ", "\t");
        }
        String _paramName_2 = this._processorGeneratorUtils.getParamName(ma_2);
        _builder.append(_paramName_2, "\t");
      }
    }
    _builder.append(", sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("logger.trace(\"");
    _builder.append(name, "\t\t");
    _builder.append(" result: \" + list);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return list;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("public ");
        PojoType _out_5 = p.getOut();
        CharSequence _compileType_3 = this._processorGeneratorUtils.compileType(_out_5, im);
        _builder.append(_compileType_3, "");
        _builder.append(" ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_3 = p.getIns();
          boolean _hasElements_3 = false;
          for(final PojoType ma_3 : _ins_3) {
            if (!_hasElements_3) {
              _hasElements_3 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_4 = this._processorGeneratorUtils.compileType(ma_3, im);
            _builder.append(_compileType_4, "");
            _builder.append(" ");
            String _paramName_3 = this._processorGeneratorUtils.getParamName(ma_3);
            _builder.append(_paramName_3, "");
          }
        }
        _builder.append(", SqlControl sqlControl) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return ");
        _builder.append(name, "\t");
        _builder.append("(sqlSessionFactory.getSqlSession(), ");
        {
          EList<PojoType> _ins_4 = p.getIns();
          boolean _hasElements_4 = false;
          for(final PojoType ma_4 : _ins_4) {
            if (!_hasElements_4) {
              _hasElements_4 = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            String _paramName_4 = this._processorGeneratorUtils.getParamName(ma_4);
            _builder.append(_paramName_4, "\t");
          }
        }
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("public ");
    PojoType _out_6 = p.getOut();
    CharSequence _compileType_5 = this._processorGeneratorUtils.compileType(_out_6, im);
    _builder.append(_compileType_5, "");
    _builder.append(" ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins_5 = p.getIns();
      boolean _hasElements_5 = false;
      for(final PojoType ma_5 : _ins_5) {
        if (!_hasElements_5) {
          _hasElements_5 = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType_6 = this._processorGeneratorUtils.compileType(ma_5, im);
        _builder.append(_compileType_6, "");
        _builder.append(" ");
        String _paramName_5 = this._processorGeneratorUtils.getParamName(ma_5);
        _builder.append(_paramName_5, "");
      }
    }
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return ");
    _builder.append(name, "\t");
    _builder.append("(sqlSession, ");
    {
      EList<PojoType> _ins_6 = p.getIns();
      boolean _hasElements_6 = false;
      for(final PojoType ma_6 : _ins_6) {
        if (!_hasElements_6) {
          _hasElements_6 = true;
        } else {
          _builder.appendImmediate(", ", "\t");
        }
        String _paramName_6 = this._processorGeneratorUtils.getParamName(ma_6);
        _builder.append(_paramName_6, "\t");
      }
    }
    _builder.append(", null);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("public ");
        PojoType _out_7 = p.getOut();
        CharSequence _compileType_7 = this._processorGeneratorUtils.compileType(_out_7, im);
        _builder.append(_compileType_7, "");
        _builder.append(" ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_7 = p.getIns();
          boolean _hasElements_7 = false;
          for(final PojoType ma_7 : _ins_7) {
            if (!_hasElements_7) {
              _hasElements_7 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_8 = this._processorGeneratorUtils.compileType(ma_7, im);
            _builder.append(_compileType_8, "");
            _builder.append(" ");
            String _paramName_7 = this._processorGeneratorUtils.getParamName(ma_7);
            _builder.append(_paramName_7, "");
          }
        }
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return ");
        _builder.append(name, "\t");
        _builder.append("(");
        {
          EList<PojoType> _ins_8 = p.getIns();
          boolean _hasElements_8 = false;
          for(final PojoType ma_8 : _ins_8) {
            if (!_hasElements_8) {
              _hasElements_8 = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            String _paramName_8 = this._processorGeneratorUtils.getParamName(ma_8);
            _builder.append(_paramName_8, "\t");
          }
        }
        _builder.append(", null);");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  protected CharSequence _compileFunctionProcedure(final PojoDao d, final PojoEntity e, final FunctionCall type, final DaoDirectiveParameters p, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    final String name = this._processorGeneratorUtils.getFunProcName(d);
    _builder.newLineIfNotEmpty();
    _builder.append("public ");
    PojoType _out = p.getOut();
    CharSequence _compileType = this._processorGeneratorUtils.compileType(_out, im);
    _builder.append(_compileType, "");
    _builder.append(" ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins = p.getIns();
      boolean _hasElements = false;
      for(final PojoType ma : _ins) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType_1 = this._processorGeneratorUtils.compileType(ma, im);
        _builder.append(_compileType_1, "");
        _builder.append(" ");
        String _paramName = this._processorGeneratorUtils.getParamName(ma);
        _builder.append(_paramName, "");
      }
    }
    _builder.append(", SqlControl sqlControl) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("logger.trace(\"");
    _builder.append(name, "\t\t");
    _builder.append(": \" + ");
    {
      EList<PojoType> _ins_1 = p.getIns();
      boolean _hasElements_1 = false;
      for(final PojoType ma_1 : _ins_1) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
        } else {
          _builder.appendImmediate(" + \" \" ", "\t\t");
        }
        String _paramName_1 = this._processorGeneratorUtils.getParamName(ma_1);
        _builder.append(_paramName_1, "\t\t");
      }
    }
    _builder.append(" + \" \" + sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("SqlProcedureEngine sqlFun");
    String _name = d.getName();
    _builder.append(_name, "\t");
    _builder.append(" = sqlEngineFactory.getCheckedProcedureEngine(\"FUN_");
    String _dbName = Utils.dbName(d);
    _builder.append(_dbName, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("Object result = sqlFun");
    String _name_1 = d.getName();
    _builder.append(_name_1, "\t");
    _builder.append(".callFunction(sqlSession, ");
    {
      EList<PojoType> _ins_2 = p.getIns();
      boolean _hasElements_2 = false;
      for(final PojoType ma_2 : _ins_2) {
        if (!_hasElements_2) {
          _hasElements_2 = true;
        } else {
          _builder.appendImmediate(", ", "\t");
        }
        String _paramName_2 = this._processorGeneratorUtils.getParamName(ma_2);
        _builder.append(_paramName_2, "\t");
      }
    }
    _builder.append(", sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("logger.trace(\"");
    _builder.append(name, "\t\t");
    _builder.append(" result: \" + result);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return (");
    PojoType _out_1 = p.getOut();
    CharSequence _compileType_2 = this._processorGeneratorUtils.compileType(_out_1, im);
    _builder.append(_compileType_2, "\t");
    _builder.append(") result;");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("public ");
        PojoType _out_2 = p.getOut();
        CharSequence _compileType_3 = this._processorGeneratorUtils.compileType(_out_2, im);
        _builder.append(_compileType_3, "");
        _builder.append(" ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_3 = p.getIns();
          boolean _hasElements_3 = false;
          for(final PojoType ma_3 : _ins_3) {
            if (!_hasElements_3) {
              _hasElements_3 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_4 = this._processorGeneratorUtils.compileType(ma_3, im);
            _builder.append(_compileType_4, "");
            _builder.append(" ");
            String _paramName_3 = this._processorGeneratorUtils.getParamName(ma_3);
            _builder.append(_paramName_3, "");
          }
        }
        _builder.append(", SqlControl sqlControl) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return ");
        _builder.append(name, "\t");
        _builder.append("(sqlSessionFactory.getSqlSession(), ");
        {
          EList<PojoType> _ins_4 = p.getIns();
          boolean _hasElements_4 = false;
          for(final PojoType ma_4 : _ins_4) {
            if (!_hasElements_4) {
              _hasElements_4 = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            String _paramName_4 = this._processorGeneratorUtils.getParamName(ma_4);
            _builder.append(_paramName_4, "\t");
          }
        }
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("public ");
    PojoType _out_3 = p.getOut();
    CharSequence _compileType_5 = this._processorGeneratorUtils.compileType(_out_3, im);
    _builder.append(_compileType_5, "");
    _builder.append(" ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins_5 = p.getIns();
      boolean _hasElements_5 = false;
      for(final PojoType ma_5 : _ins_5) {
        if (!_hasElements_5) {
          _hasElements_5 = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType_6 = this._processorGeneratorUtils.compileType(ma_5, im);
        _builder.append(_compileType_6, "");
        _builder.append(" ");
        String _paramName_5 = this._processorGeneratorUtils.getParamName(ma_5);
        _builder.append(_paramName_5, "");
      }
    }
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return ");
    _builder.append(name, "\t");
    _builder.append("(sqlSession, ");
    {
      EList<PojoType> _ins_6 = p.getIns();
      boolean _hasElements_6 = false;
      for(final PojoType ma_6 : _ins_6) {
        if (!_hasElements_6) {
          _hasElements_6 = true;
        } else {
          _builder.appendImmediate(", ", "\t");
        }
        String _paramName_6 = this._processorGeneratorUtils.getParamName(ma_6);
        _builder.append(_paramName_6, "\t");
      }
    }
    _builder.append(", null);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("public ");
        PojoType _out_4 = p.getOut();
        CharSequence _compileType_7 = this._processorGeneratorUtils.compileType(_out_4, im);
        _builder.append(_compileType_7, "");
        _builder.append(" ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_7 = p.getIns();
          boolean _hasElements_7 = false;
          for(final PojoType ma_7 : _ins_7) {
            if (!_hasElements_7) {
              _hasElements_7 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_8 = this._processorGeneratorUtils.compileType(ma_7, im);
            _builder.append(_compileType_8, "");
            _builder.append(" ");
            String _paramName_7 = this._processorGeneratorUtils.getParamName(ma_7);
            _builder.append(_paramName_7, "");
          }
        }
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return ");
        _builder.append(name, "\t");
        _builder.append("(");
        {
          EList<PojoType> _ins_8 = p.getIns();
          boolean _hasElements_8 = false;
          for(final PojoType ma_8 : _ins_8) {
            if (!_hasElements_8) {
              _hasElements_8 = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            String _paramName_8 = this._processorGeneratorUtils.getParamName(ma_8);
            _builder.append(_paramName_8, "\t");
          }
        }
        _builder.append(", null);");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  protected CharSequence _compileFunctionProcedure(final PojoDao d, final PojoEntity e, final ProcedureUpdate type, final DaoDirectiveParameters p, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    final String name = this._processorGeneratorUtils.getFunProcName(d);
    _builder.newLineIfNotEmpty();
    _builder.append("public int ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins = p.getIns();
      boolean _hasElements = false;
      for(final PojoType ma : _ins) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType = this._processorGeneratorUtils.compileType(ma, im);
        _builder.append(_compileType, "");
        _builder.append(" ");
        String _paramName = this._processorGeneratorUtils.getParamName(ma);
        _builder.append(_paramName, "");
      }
    }
    _builder.append(", SqlControl sqlControl) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("logger.trace(\"");
    _builder.append(name, "\t\t");
    _builder.append(": \" + ");
    {
      EList<PojoType> _ins_1 = p.getIns();
      boolean _hasElements_1 = false;
      for(final PojoType ma_1 : _ins_1) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
        } else {
          _builder.appendImmediate(" + \" \" ", "\t\t");
        }
        String _paramName_1 = this._processorGeneratorUtils.getParamName(ma_1);
        _builder.append(_paramName_1, "\t\t");
      }
    }
    _builder.append(" + \" \" + sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("SqlProcedureEngine sqlProc");
    String _name = d.getName();
    _builder.append(_name, "\t");
    _builder.append(" = sqlEngineFactory.getCheckedProcedureEngine(\"PROC_");
    String _dbName = Utils.dbName(d);
    _builder.append(_dbName, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("int count = sqlProc");
    String _name_1 = d.getName();
    _builder.append(_name_1, "\t");
    _builder.append(".callUpdate(sqlSession, ");
    {
      EList<PojoType> _ins_2 = p.getIns();
      boolean _hasElements_2 = false;
      for(final PojoType ma_2 : _ins_2) {
        if (!_hasElements_2) {
          _hasElements_2 = true;
        } else {
          _builder.appendImmediate(", ", "\t");
        }
        String _paramName_2 = this._processorGeneratorUtils.getParamName(ma_2);
        _builder.append(_paramName_2, "\t");
      }
    }
    _builder.append(", sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("logger.trace(\"");
    _builder.append(name, "\t\t");
    _builder.append(" result: \" + count);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return count;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("public int ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_3 = p.getIns();
          boolean _hasElements_3 = false;
          for(final PojoType ma_3 : _ins_3) {
            if (!_hasElements_3) {
              _hasElements_3 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_1 = this._processorGeneratorUtils.compileType(ma_3, im);
            _builder.append(_compileType_1, "");
            _builder.append(" ");
            String _paramName_3 = this._processorGeneratorUtils.getParamName(ma_3);
            _builder.append(_paramName_3, "");
          }
        }
        _builder.append(", SqlControl sqlControl) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return ");
        _builder.append(name, "\t");
        _builder.append("(sqlSessionFactory.getSqlSession(), ");
        {
          EList<PojoType> _ins_4 = p.getIns();
          boolean _hasElements_4 = false;
          for(final PojoType ma_4 : _ins_4) {
            if (!_hasElements_4) {
              _hasElements_4 = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            String _paramName_4 = this._processorGeneratorUtils.getParamName(ma_4);
            _builder.append(_paramName_4, "\t");
          }
        }
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("public int ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins_5 = p.getIns();
      boolean _hasElements_5 = false;
      for(final PojoType ma_5 : _ins_5) {
        if (!_hasElements_5) {
          _hasElements_5 = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType_2 = this._processorGeneratorUtils.compileType(ma_5, im);
        _builder.append(_compileType_2, "");
        _builder.append(" ");
        String _paramName_5 = this._processorGeneratorUtils.getParamName(ma_5);
        _builder.append(_paramName_5, "");
      }
    }
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return ");
    _builder.append(name, "\t");
    _builder.append("(sqlSession, ");
    {
      EList<PojoType> _ins_6 = p.getIns();
      boolean _hasElements_6 = false;
      for(final PojoType ma_6 : _ins_6) {
        if (!_hasElements_6) {
          _hasElements_6 = true;
        } else {
          _builder.appendImmediate(", ", "\t");
        }
        String _paramName_6 = this._processorGeneratorUtils.getParamName(ma_6);
        _builder.append(_paramName_6, "\t");
      }
    }
    _builder.append(", null);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("public int ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_7 = p.getIns();
          boolean _hasElements_7 = false;
          for(final PojoType ma_7 : _ins_7) {
            if (!_hasElements_7) {
              _hasElements_7 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_3 = this._processorGeneratorUtils.compileType(ma_7, im);
            _builder.append(_compileType_3, "");
            _builder.append(" ");
            String _paramName_7 = this._processorGeneratorUtils.getParamName(ma_7);
            _builder.append(_paramName_7, "");
          }
        }
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return ");
        _builder.append(name, "\t");
        _builder.append("(");
        {
          EList<PojoType> _ins_8 = p.getIns();
          boolean _hasElements_8 = false;
          for(final PojoType ma_8 : _ins_8) {
            if (!_hasElements_8) {
              _hasElements_8 = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            String _paramName_8 = this._processorGeneratorUtils.getParamName(ma_8);
            _builder.append(_paramName_8, "\t");
          }
        }
        _builder.append(", null);");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  protected CharSequence _compileFunctionProcedure(final PojoDao d, final PojoEntity e, final FunctionQuery type, final DaoDirectiveParameters p, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    final String name = this._processorGeneratorUtils.getFunProcName(d);
    _builder.newLineIfNotEmpty();
    _builder.append("public ");
    PojoType _out = p.getOut();
    CharSequence _compileType = this._processorGeneratorUtils.compileType(_out, im);
    _builder.append(_compileType, "");
    _builder.append(" ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins = p.getIns();
      boolean _hasElements = false;
      for(final PojoType ma : _ins) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType_1 = this._processorGeneratorUtils.compileType(ma, im);
        _builder.append(_compileType_1, "");
        _builder.append(" ");
        String _paramName = this._processorGeneratorUtils.getParamName(ma);
        _builder.append(_paramName, "");
      }
    }
    _builder.append(", SqlControl sqlControl) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("logger.trace(\"");
    _builder.append(name, "\t\t");
    _builder.append(": \" + ");
    {
      EList<PojoType> _ins_1 = p.getIns();
      boolean _hasElements_1 = false;
      for(final PojoType ma_1 : _ins_1) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
        } else {
          _builder.appendImmediate(" + \" \" ", "\t\t");
        }
        String _paramName_1 = this._processorGeneratorUtils.getParamName(ma_1);
        _builder.append(_paramName_1, "\t\t");
      }
    }
    _builder.append(" + \" \" + sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("SqlQueryEngine sqlFun");
    String _name = d.getName();
    _builder.append(_name, "\t");
    _builder.append(" = sqlEngineFactory.getCheckedQueryEngine(\"FUN_");
    String _dbName = Utils.dbName(d);
    _builder.append(_dbName, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("java.util.List<");
    EList<PojoType> _ins_2 = p.getIns();
    PojoType _get = _ins_2.get(0);
    CharSequence _compileType_2 = this._processorGeneratorUtils.compileType(_get, im);
    _builder.append(_compileType_2, "\t");
    _builder.append("> list = sqlFun");
    String _name_1 = d.getName();
    _builder.append(_name_1, "\t");
    _builder.append(".query(sqlSession, ");
    EList<PojoType> _ins_3 = p.getIns();
    PojoType _get_1 = _ins_3.get(0);
    CharSequence _compileType_3 = this._processorGeneratorUtils.compileType(_get_1, im);
    _builder.append(_compileType_3, "\t");
    _builder.append(".class, ");
    {
      EList<PojoType> _ins_4 = p.getIns();
      boolean _hasElements_2 = false;
      for(final PojoType ma_2 : _ins_4) {
        if (!_hasElements_2) {
          _hasElements_2 = true;
        } else {
          _builder.appendImmediate(", ", "\t");
        }
        String _paramName_2 = this._processorGeneratorUtils.getParamName(ma_2);
        _builder.append(_paramName_2, "\t");
      }
    }
    _builder.append(", sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("logger.trace(\"");
    _builder.append(name, "\t\t");
    _builder.append(" result: \" + list);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return (list != null && !list.isEmpty()) ? list.get(0).getResult() : null;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("public ");
        PojoType _out_1 = p.getOut();
        CharSequence _compileType_4 = this._processorGeneratorUtils.compileType(_out_1, im);
        _builder.append(_compileType_4, "");
        _builder.append(" ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_5 = p.getIns();
          boolean _hasElements_3 = false;
          for(final PojoType ma_3 : _ins_5) {
            if (!_hasElements_3) {
              _hasElements_3 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_5 = this._processorGeneratorUtils.compileType(ma_3, im);
            _builder.append(_compileType_5, "");
            _builder.append(" ");
            String _paramName_3 = this._processorGeneratorUtils.getParamName(ma_3);
            _builder.append(_paramName_3, "");
          }
        }
        _builder.append(", SqlControl sqlControl) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return ");
        _builder.append(name, "\t");
        _builder.append("(sqlSessionFactory.getSqlSession(), ");
        {
          EList<PojoType> _ins_6 = p.getIns();
          boolean _hasElements_4 = false;
          for(final PojoType ma_4 : _ins_6) {
            if (!_hasElements_4) {
              _hasElements_4 = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            String _paramName_4 = this._processorGeneratorUtils.getParamName(ma_4);
            _builder.append(_paramName_4, "\t");
          }
        }
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("public ");
    PojoType _out_2 = p.getOut();
    CharSequence _compileType_6 = this._processorGeneratorUtils.compileType(_out_2, im);
    _builder.append(_compileType_6, "");
    _builder.append(" ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins_7 = p.getIns();
      boolean _hasElements_5 = false;
      for(final PojoType ma_5 : _ins_7) {
        if (!_hasElements_5) {
          _hasElements_5 = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType_7 = this._processorGeneratorUtils.compileType(ma_5, im);
        _builder.append(_compileType_7, "");
        _builder.append(" ");
        String _paramName_5 = this._processorGeneratorUtils.getParamName(ma_5);
        _builder.append(_paramName_5, "");
      }
    }
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return ");
    _builder.append(name, "\t");
    _builder.append("(sqlSession, ");
    {
      EList<PojoType> _ins_8 = p.getIns();
      boolean _hasElements_6 = false;
      for(final PojoType ma_6 : _ins_8) {
        if (!_hasElements_6) {
          _hasElements_6 = true;
        } else {
          _builder.appendImmediate(", ", "\t");
        }
        String _paramName_6 = this._processorGeneratorUtils.getParamName(ma_6);
        _builder.append(_paramName_6, "\t");
      }
    }
    _builder.append(", null);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("public ");
        PojoType _out_3 = p.getOut();
        CharSequence _compileType_8 = this._processorGeneratorUtils.compileType(_out_3, im);
        _builder.append(_compileType_8, "");
        _builder.append(" ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_9 = p.getIns();
          boolean _hasElements_7 = false;
          for(final PojoType ma_7 : _ins_9) {
            if (!_hasElements_7) {
              _hasElements_7 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_9 = this._processorGeneratorUtils.compileType(ma_7, im);
            _builder.append(_compileType_9, "");
            _builder.append(" ");
            String _paramName_7 = this._processorGeneratorUtils.getParamName(ma_7);
            _builder.append(_paramName_7, "");
          }
        }
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return ");
        _builder.append(name, "\t");
        _builder.append("(");
        {
          EList<PojoType> _ins_10 = p.getIns();
          boolean _hasElements_8 = false;
          for(final PojoType ma_8 : _ins_10) {
            if (!_hasElements_8) {
              _hasElements_8 = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            String _paramName_8 = this._processorGeneratorUtils.getParamName(ma_8);
            _builder.append(_paramName_8, "\t");
          }
        }
        _builder.append(", null);");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compileInsert(final PojoDao d, final PojoEntity e, final PojoEntity pe, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append(" insert(SqlSession sqlSession, ");
    String _name_1 = e.getName();
    _builder.append(_name_1, "\t");
    _builder.append(" ");
    String _name_2 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"insert ");
    String _name_3 = e.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_3);
    _builder.append(_firstLower_1, "\t\t\t");
    _builder.append(": \" + ");
    String _name_4 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_4);
    _builder.append(_firstLower_2, "\t\t\t");
    _builder.append(" + \" \" + sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SqlCrudEngine sqlInsert");
    String _name_5 = e.getName();
    _builder.append(_name_5, "\t\t");
    _builder.append(" = sqlEngineFactory.getCheckedCrudEngine(\"INSERT_");
    String _dbName = Utils.dbName(e);
    _builder.append(_dbName, "\t\t");
    _builder.append("\");");
    {
      boolean _notEquals = (!Objects.equal(pe, null));
      if (_notEquals) {
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("SqlCrudEngine sqlInsert");
        String _name_6 = pe.getName();
        _builder.append(_name_6, "\t\t");
        _builder.append(" = sqlEngineFactory.getCheckedCrudEngine(\"INSERT_");
        String _dbName_1 = Utils.dbName(pe);
        _builder.append(_dbName_1, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("int count = sqlInsert");
        String _name_7 = pe.getName();
        _builder.append(_name_7, "\t\t");
        _builder.append(".insert(sqlSession, ");
        String _name_8 = e.getName();
        String _firstLower_3 = StringExtensions.toFirstLower(_name_8);
        _builder.append(_firstLower_3, "\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("if (count > 0) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("sqlInsert");
        String _name_9 = e.getName();
        _builder.append(_name_9, "\t\t\t");
        _builder.append(".insert(sqlSession, ");
        String _name_10 = e.getName();
        String _firstLower_4 = StringExtensions.toFirstLower(_name_10);
        _builder.append(_firstLower_4, "\t\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
      } else {
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("int count = sqlInsert");
        String _name_11 = e.getName();
        _builder.append(_name_11, "\t\t");
        _builder.append(".insert(sqlSession, ");
        String _name_12 = e.getName();
        String _firstLower_5 = StringExtensions.toFirstLower(_name_12);
        _builder.append(_firstLower_5, "\t\t");
        _builder.append(", sqlControl);");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"insert ");
    String _name_13 = e.getName();
    String _firstLower_6 = StringExtensions.toFirstLower(_name_13);
    _builder.append(_firstLower_6, "\t\t\t");
    _builder.append(" result: \" + count + \" \" + ");
    String _name_14 = e.getName();
    String _firstLower_7 = StringExtensions.toFirstLower(_name_14);
    _builder.append(_firstLower_7, "\t\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (count > 0) ? ");
    String _name_15 = e.getName();
    String _firstLower_8 = StringExtensions.toFirstLower(_name_15);
    _builder.append(_firstLower_8, "\t\t");
    _builder.append(" : null;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public ");
        String _name_16 = e.getName();
        _builder.append(_name_16, "\t");
        _builder.append(" insert(");
        String _name_17 = e.getName();
        _builder.append(_name_17, "\t");
        _builder.append(" ");
        String _name_18 = e.getName();
        String _firstLower_9 = StringExtensions.toFirstLower(_name_18);
        _builder.append(_firstLower_9, "\t");
        _builder.append(", SqlControl sqlControl) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return insert(sqlSessionFactory.getSqlSession(), ");
        String _name_19 = e.getName();
        String _firstLower_10 = StringExtensions.toFirstLower(_name_19);
        _builder.append(_firstLower_10, "\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("public ");
    String _name_20 = e.getName();
    _builder.append(_name_20, "\t");
    _builder.append(" insert(SqlSession sqlSession, ");
    String _name_21 = e.getName();
    _builder.append(_name_21, "\t");
    _builder.append(" ");
    String _name_22 = e.getName();
    String _firstLower_11 = StringExtensions.toFirstLower(_name_22);
    _builder.append(_firstLower_11, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return insert(sqlSession, ");
    String _name_23 = e.getName();
    String _firstLower_12 = StringExtensions.toFirstLower(_name_23);
    _builder.append(_firstLower_12, "\t\t");
    _builder.append(", null);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public ");
        String _name_24 = e.getName();
        _builder.append(_name_24, "\t");
        _builder.append(" insert(");
        String _name_25 = e.getName();
        _builder.append(_name_25, "\t");
        _builder.append(" ");
        String _name_26 = e.getName();
        String _firstLower_13 = StringExtensions.toFirstLower(_name_26);
        _builder.append(_firstLower_13, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return insert(");
        String _name_27 = e.getName();
        String _firstLower_14 = StringExtensions.toFirstLower(_name_27);
        _builder.append(_firstLower_14, "\t\t");
        _builder.append(", null);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compileGet(final PojoDao d, final PojoEntity e, final Map<String, Map<String, PojoType>> moreResultClasses, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append(" get(SqlSession sqlSession, ");
    String _name_1 = e.getName();
    _builder.append(_name_1, "\t");
    _builder.append(" ");
    String _name_2 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"get get: \" + ");
    String _name_3 = e.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_3);
    _builder.append(_firstLower_1, "\t\t\t");
    _builder.append(" + \" \" + sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SqlCrudEngine sqlGetEngine");
    String _name_4 = e.getName();
    _builder.append(_name_4, "\t\t");
    _builder.append(" = sqlEngineFactory.getCheckedCrudEngine(\"GET_");
    String _dbName = Utils.dbName(e);
    _builder.append(_dbName, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    {
      boolean _isEmpty = moreResultClasses.isEmpty();
      if (_isEmpty) {
        _builder.append("//");
      }
    }
    _builder.append("sqlControl = getMoreResultClasses(");
    String _name_5 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_5);
    _builder.append(_firstLower_2, "\t\t");
    _builder.append(", sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _name_6 = e.getName();
    _builder.append(_name_6, "\t\t");
    _builder.append(" ");
    String _name_7 = e.getName();
    String _firstLower_3 = StringExtensions.toFirstLower(_name_7);
    _builder.append(_firstLower_3, "\t\t");
    _builder.append("Got = sqlGetEngine");
    String _name_8 = e.getName();
    _builder.append(_name_8, "\t\t");
    _builder.append(".get(sqlSession, ");
    String _name_9 = e.getName();
    _builder.append(_name_9, "\t\t");
    _builder.append(".class, ");
    String _name_10 = e.getName();
    String _firstLower_4 = StringExtensions.toFirstLower(_name_10);
    _builder.append(_firstLower_4, "\t\t");
    _builder.append(", sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"get ");
    String _name_11 = e.getName();
    String _firstLower_5 = StringExtensions.toFirstLower(_name_11);
    _builder.append(_firstLower_5, "\t\t\t");
    _builder.append(" result: \" + ");
    String _name_12 = e.getName();
    String _firstLower_6 = StringExtensions.toFirstLower(_name_12);
    _builder.append(_firstLower_6, "\t\t\t");
    _builder.append("Got);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    String _name_13 = e.getName();
    String _firstLower_7 = StringExtensions.toFirstLower(_name_13);
    _builder.append(_firstLower_7, "\t\t");
    _builder.append("Got;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public ");
        String _name_14 = e.getName();
        _builder.append(_name_14, "\t");
        _builder.append(" get(");
        String _name_15 = e.getName();
        _builder.append(_name_15, "\t");
        _builder.append(" ");
        String _name_16 = e.getName();
        String _firstLower_8 = StringExtensions.toFirstLower(_name_16);
        _builder.append(_firstLower_8, "\t");
        _builder.append(", SqlControl sqlControl) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return get(sqlSessionFactory.getSqlSession(), ");
        String _name_17 = e.getName();
        String _firstLower_9 = StringExtensions.toFirstLower(_name_17);
        _builder.append(_firstLower_9, "\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("public ");
    String _name_18 = e.getName();
    _builder.append(_name_18, "\t");
    _builder.append(" get(SqlSession sqlSession, ");
    String _name_19 = e.getName();
    _builder.append(_name_19, "\t");
    _builder.append(" ");
    String _name_20 = e.getName();
    String _firstLower_10 = StringExtensions.toFirstLower(_name_20);
    _builder.append(_firstLower_10, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return get(sqlSession, ");
    String _name_21 = e.getName();
    String _firstLower_11 = StringExtensions.toFirstLower(_name_21);
    _builder.append(_firstLower_11, "\t\t");
    _builder.append(", null);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public ");
        String _name_22 = e.getName();
        _builder.append(_name_22, "\t");
        _builder.append(" get(");
        String _name_23 = e.getName();
        _builder.append(_name_23, "\t");
        _builder.append(" ");
        String _name_24 = e.getName();
        String _firstLower_12 = StringExtensions.toFirstLower(_name_24);
        _builder.append(_firstLower_12, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return get(");
        String _name_25 = e.getName();
        String _firstLower_13 = StringExtensions.toFirstLower(_name_25);
        _builder.append(_firstLower_13, "\t\t");
        _builder.append(", null);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compileUpdate(final PojoDao d, final PojoEntity e, final PojoEntity pe, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int update(SqlSession sqlSession, ");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append(" ");
    String _name_1 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_1);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"update ");
    String _name_2 = e.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower_1, "\t\t\t");
    _builder.append(": \" + ");
    String _name_3 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_3);
    _builder.append(_firstLower_2, "\t\t\t");
    _builder.append(" + \" \" + sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SqlCrudEngine sqlUpdateEngine");
    String _name_4 = e.getName();
    _builder.append(_name_4, "\t\t");
    _builder.append(" = sqlEngineFactory.getCheckedCrudEngine(\"UPDATE_");
    String _dbName = Utils.dbName(e);
    _builder.append(_dbName, "\t\t");
    _builder.append("\");");
    {
      boolean _notEquals = (!Objects.equal(pe, null));
      if (_notEquals) {
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("SqlCrudEngine sqlUpdate");
        String _name_5 = pe.getName();
        _builder.append(_name_5, "\t\t");
        _builder.append(" = sqlEngineFactory.getCheckedCrudEngine(\"UPDATE_");
        String _dbName_1 = Utils.dbName(pe);
        _builder.append(_dbName_1, "\t\t");
        _builder.append("\");");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("int count = sqlUpdateEngine");
    String _name_6 = e.getName();
    _builder.append(_name_6, "\t\t");
    _builder.append(".update(sqlSession, ");
    String _name_7 = e.getName();
    String _firstLower_3 = StringExtensions.toFirstLower(_name_7);
    _builder.append(_firstLower_3, "\t\t");
    _builder.append(", sqlControl);");
    {
      boolean _notEquals_1 = (!Objects.equal(pe, null));
      if (_notEquals_1) {
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("if (count > 0) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("sqlUpdate");
        String _name_8 = pe.getName();
        _builder.append(_name_8, "\t\t\t");
        _builder.append(".update(sqlSession, ");
        String _name_9 = e.getName();
        String _firstLower_4 = StringExtensions.toFirstLower(_name_9);
        _builder.append(_firstLower_4, "\t\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
      }
    }
    final PojoProperty f = this._processorGeneratorUtils.getOptLock(e);
    {
      boolean _notEquals_2 = (!Objects.equal(f, null));
      if (_notEquals_2) {
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("if (count > 0) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        String _name_10 = e.getName();
        String _firstLower_5 = StringExtensions.toFirstLower(_name_10);
        _builder.append(_firstLower_5, "\t\t\t");
        _builder.append(".set");
        String _name_11 = f.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name_11);
        _builder.append(_firstUpper, "\t\t\t");
        _builder.append("(");
        String _name_12 = e.getName();
        String _firstLower_6 = StringExtensions.toFirstLower(_name_12);
        _builder.append(_firstLower_6, "\t\t\t");
        _builder.append(".get");
        String _name_13 = f.getName();
        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_13);
        _builder.append(_firstUpper_1, "\t\t\t");
        _builder.append("() + 1);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"update ");
    String _name_14 = e.getName();
    String _firstLower_7 = StringExtensions.toFirstLower(_name_14);
    _builder.append(_firstLower_7, "\t\t\t");
    _builder.append(" result count: \" + count);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return count;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public int update(");
        String _name_15 = e.getName();
        _builder.append(_name_15, "\t");
        _builder.append(" ");
        String _name_16 = e.getName();
        String _firstLower_8 = StringExtensions.toFirstLower(_name_16);
        _builder.append(_firstLower_8, "\t");
        _builder.append(", SqlControl sqlControl) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return update(sqlSessionFactory.getSqlSession(), ");
        String _name_17 = e.getName();
        String _firstLower_9 = StringExtensions.toFirstLower(_name_17);
        _builder.append(_firstLower_9, "\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("public int update(SqlSession sqlSession, ");
    String _name_18 = e.getName();
    _builder.append(_name_18, "\t");
    _builder.append(" ");
    String _name_19 = e.getName();
    String _firstLower_10 = StringExtensions.toFirstLower(_name_19);
    _builder.append(_firstLower_10, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return update(sqlSession, ");
    String _name_20 = e.getName();
    String _firstLower_11 = StringExtensions.toFirstLower(_name_20);
    _builder.append(_firstLower_11, "\t\t");
    _builder.append(", null);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public int update(");
        String _name_21 = e.getName();
        _builder.append(_name_21, "\t");
        _builder.append(" ");
        String _name_22 = e.getName();
        String _firstLower_12 = StringExtensions.toFirstLower(_name_22);
        _builder.append(_firstLower_12, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return update(");
        String _name_23 = e.getName();
        String _firstLower_13 = StringExtensions.toFirstLower(_name_23);
        _builder.append(_firstLower_13, "\t\t");
        _builder.append(", null);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compileDelete(final PojoDao d, final PojoEntity e, final PojoEntity pe, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int delete(SqlSession sqlSession, ");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append(" ");
    String _name_1 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_1);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"delete ");
    String _name_2 = e.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower_1, "\t\t\t");
    _builder.append(": \" + ");
    String _name_3 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_3);
    _builder.append(_firstLower_2, "\t\t\t");
    _builder.append(" + \" \" + sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SqlCrudEngine sqlDeleteEngine");
    String _name_4 = e.getName();
    _builder.append(_name_4, "\t\t");
    _builder.append(" = sqlEngineFactory.getCheckedCrudEngine(\"DELETE_");
    String _dbName = Utils.dbName(e);
    _builder.append(_dbName, "\t\t");
    _builder.append("\");");
    {
      boolean _notEquals = (!Objects.equal(pe, null));
      if (_notEquals) {
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("SqlCrudEngine sqlDelete");
        String _name_5 = pe.getName();
        _builder.append(_name_5, "\t\t");
        _builder.append(" = sqlEngineFactory.getCheckedCrudEngine(\"DELETE_");
        String _dbName_1 = Utils.dbName(pe);
        _builder.append(_dbName_1, "\t\t");
        _builder.append("\");");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("int count = sqlDeleteEngine");
    String _name_6 = e.getName();
    _builder.append(_name_6, "\t\t");
    _builder.append(".delete(sqlSession, ");
    String _name_7 = e.getName();
    String _firstLower_3 = StringExtensions.toFirstLower(_name_7);
    _builder.append(_firstLower_3, "\t\t");
    _builder.append(", sqlControl);");
    {
      boolean _notEquals_1 = (!Objects.equal(pe, null));
      if (_notEquals_1) {
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("if (count > 0) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("sqlDelete");
        String _name_8 = pe.getName();
        _builder.append(_name_8, "\t\t\t");
        _builder.append(".delete(sqlSession, ");
        String _name_9 = e.getName();
        String _firstLower_4 = StringExtensions.toFirstLower(_name_9);
        _builder.append(_firstLower_4, "\t\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
      }
    }
    final PojoProperty f = this._processorGeneratorUtils.getOptLock(e);
    {
      boolean _notEquals_2 = (!Objects.equal(f, null));
      if (_notEquals_2) {
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("if (count > 0) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        String _name_10 = e.getName();
        String _firstLower_5 = StringExtensions.toFirstLower(_name_10);
        _builder.append(_firstLower_5, "\t\t\t");
        _builder.append(".set");
        String _name_11 = f.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name_11);
        _builder.append(_firstUpper, "\t\t\t");
        _builder.append("(");
        String _name_12 = e.getName();
        String _firstLower_6 = StringExtensions.toFirstLower(_name_12);
        _builder.append(_firstLower_6, "\t\t\t");
        _builder.append(".get");
        String _name_13 = f.getName();
        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_13);
        _builder.append(_firstUpper_1, "\t\t\t");
        _builder.append("() + 1);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"delete ");
    String _name_14 = e.getName();
    String _firstLower_7 = StringExtensions.toFirstLower(_name_14);
    _builder.append(_firstLower_7, "\t\t\t");
    _builder.append(" result count: \" + count);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return count;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public int delete(");
        String _name_15 = e.getName();
        _builder.append(_name_15, "\t");
        _builder.append(" ");
        String _name_16 = e.getName();
        String _firstLower_8 = StringExtensions.toFirstLower(_name_16);
        _builder.append(_firstLower_8, "\t");
        _builder.append(", SqlControl sqlControl) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return delete(sqlSessionFactory.getSqlSession(), ");
        String _name_17 = e.getName();
        String _firstLower_9 = StringExtensions.toFirstLower(_name_17);
        _builder.append(_firstLower_9, "\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("public int delete(SqlSession sqlSession, ");
    String _name_18 = e.getName();
    _builder.append(_name_18, "\t");
    _builder.append(" ");
    String _name_19 = e.getName();
    String _firstLower_10 = StringExtensions.toFirstLower(_name_19);
    _builder.append(_firstLower_10, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return delete(sqlSession, ");
    String _name_20 = e.getName();
    String _firstLower_11 = StringExtensions.toFirstLower(_name_20);
    _builder.append(_firstLower_11, "\t\t");
    _builder.append(", null);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public int delete(");
        String _name_21 = e.getName();
        _builder.append(_name_21, "\t");
        _builder.append(" ");
        String _name_22 = e.getName();
        String _firstLower_12 = StringExtensions.toFirstLower(_name_22);
        _builder.append(_firstLower_12, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return delete(");
        String _name_23 = e.getName();
        String _firstLower_13 = StringExtensions.toFirstLower(_name_23);
        _builder.append(_firstLower_13, "\t\t");
        _builder.append(", null);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compileList(final PojoDao d, final PojoEntity e, final Map<String, Map<String, PojoType>> moreResultClasses, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append("> list(SqlSession sqlSession, ");
    String _name_1 = e.getName();
    _builder.append(_name_1, "\t");
    _builder.append(" ");
    String _name_2 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"list ");
    String _name_3 = e.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_3);
    _builder.append(_firstLower_1, "\t\t\t");
    _builder.append(": \" + ");
    String _name_4 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_4);
    _builder.append(_firstLower_2, "\t\t\t");
    _builder.append(" + \" \" + sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SqlQueryEngine sqlEngine");
    String _name_5 = e.getName();
    _builder.append(_name_5, "\t\t");
    _builder.append(" = sqlEngineFactory.getCheckedQueryEngine(\"SELECT_");
    String _dbName = Utils.dbName(e);
    _builder.append(_dbName, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    {
      boolean _isEmpty = moreResultClasses.isEmpty();
      if (_isEmpty) {
        _builder.append("//");
      }
    }
    _builder.append("sqlControl = getMoreResultClasses(");
    String _name_6 = e.getName();
    String _firstLower_3 = StringExtensions.toFirstLower(_name_6);
    _builder.append(_firstLower_3, "\t\t");
    _builder.append(", sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("List<");
    String _name_7 = e.getName();
    _builder.append(_name_7, "\t\t");
    _builder.append("> ");
    String _name_8 = e.getName();
    String _firstLower_4 = StringExtensions.toFirstLower(_name_8);
    _builder.append(_firstLower_4, "\t\t");
    _builder.append("List = sqlEngine");
    String _name_9 = e.getName();
    _builder.append(_name_9, "\t\t");
    _builder.append(".query(sqlSession, ");
    String _name_10 = e.getName();
    _builder.append(_name_10, "\t\t");
    _builder.append(".class, ");
    String _name_11 = e.getName();
    String _firstLower_5 = StringExtensions.toFirstLower(_name_11);
    _builder.append(_firstLower_5, "\t\t");
    _builder.append(", sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"list ");
    String _name_12 = e.getName();
    String _firstLower_6 = StringExtensions.toFirstLower(_name_12);
    _builder.append(_firstLower_6, "\t\t\t");
    _builder.append(" size: \" + ((");
    String _name_13 = e.getName();
    String _firstLower_7 = StringExtensions.toFirstLower(_name_13);
    _builder.append(_firstLower_7, "\t\t\t");
    _builder.append("List != null) ? ");
    String _name_14 = e.getName();
    String _firstLower_8 = StringExtensions.toFirstLower(_name_14);
    _builder.append(_firstLower_8, "\t\t\t");
    _builder.append("List.size() : \"null\"));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    String _name_15 = e.getName();
    String _firstLower_9 = StringExtensions.toFirstLower(_name_15);
    _builder.append(_firstLower_9, "\t\t");
    _builder.append("List;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public List<");
        String _name_16 = e.getName();
        _builder.append(_name_16, "\t");
        _builder.append("> list(");
        String _name_17 = e.getName();
        _builder.append(_name_17, "\t");
        _builder.append(" ");
        String _name_18 = e.getName();
        String _firstLower_10 = StringExtensions.toFirstLower(_name_18);
        _builder.append(_firstLower_10, "\t");
        _builder.append(", SqlControl sqlControl) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return list(sqlSessionFactory.getSqlSession(), ");
        String _name_19 = e.getName();
        String _firstLower_11 = StringExtensions.toFirstLower(_name_19);
        _builder.append(_firstLower_11, "\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("public List<");
    String _name_20 = e.getName();
    _builder.append(_name_20, "\t");
    _builder.append("> list(SqlSession sqlSession, ");
    String _name_21 = e.getName();
    _builder.append(_name_21, "\t");
    _builder.append(" ");
    String _name_22 = e.getName();
    String _firstLower_12 = StringExtensions.toFirstLower(_name_22);
    _builder.append(_firstLower_12, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return list(sqlSession, ");
    String _name_23 = e.getName();
    String _firstLower_13 = StringExtensions.toFirstLower(_name_23);
    _builder.append(_firstLower_13, "\t\t");
    _builder.append(", null);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public List<");
        String _name_24 = e.getName();
        _builder.append(_name_24, "\t");
        _builder.append("> list(");
        String _name_25 = e.getName();
        _builder.append(_name_25, "\t");
        _builder.append(" ");
        String _name_26 = e.getName();
        String _firstLower_14 = StringExtensions.toFirstLower(_name_26);
        _builder.append(_firstLower_14, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return list(");
        String _name_27 = e.getName();
        String _firstLower_15 = StringExtensions.toFirstLower(_name_27);
        _builder.append(_firstLower_15, "\t\t");
        _builder.append(", null);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compileCount(final PojoDao d, final PojoEntity e, final Map<String, Map<String, PojoType>> moreResultClasses, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int count(SqlSession sqlSession, ");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append(" ");
    String _name_1 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_1);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"count ");
    String _name_2 = e.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower_1, "\t\t\t");
    _builder.append(": \" + ");
    String _name_3 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_3);
    _builder.append(_firstLower_2, "\t\t\t");
    _builder.append(" + \" \" + sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SqlQueryEngine sqlEngine");
    String _name_4 = e.getName();
    _builder.append(_name_4, "\t\t");
    _builder.append(" = sqlEngineFactory.getCheckedQueryEngine(\"SELECT_");
    String _dbName = Utils.dbName(e);
    _builder.append(_dbName, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    {
      boolean _isEmpty = moreResultClasses.isEmpty();
      if (_isEmpty) {
        _builder.append("//");
      }
    }
    _builder.append("sqlControl = getMoreResultClasses(");
    String _name_5 = e.getName();
    String _firstLower_3 = StringExtensions.toFirstLower(_name_5);
    _builder.append(_firstLower_3, "\t\t");
    _builder.append(", sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("int count = sqlEngine");
    String _name_6 = e.getName();
    _builder.append(_name_6, "\t\t");
    _builder.append(".queryCount(sqlSession, ");
    String _name_7 = e.getName();
    String _firstLower_4 = StringExtensions.toFirstLower(_name_7);
    _builder.append(_firstLower_4, "\t\t");
    _builder.append(", sqlControl);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (logger.isTraceEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.trace(\"count: \" + count);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return count;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public int count(");
        String _name_8 = e.getName();
        _builder.append(_name_8, "\t");
        _builder.append(" ");
        String _name_9 = e.getName();
        String _firstLower_5 = StringExtensions.toFirstLower(_name_9);
        _builder.append(_firstLower_5, "\t");
        _builder.append(", SqlControl sqlControl) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return count(sqlSessionFactory.getSqlSession(), ");
        String _name_10 = e.getName();
        String _firstLower_6 = StringExtensions.toFirstLower(_name_10);
        _builder.append(_firstLower_6, "\t\t");
        _builder.append(", sqlControl);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("public int count(SqlSession sqlSession, ");
    String _name_11 = e.getName();
    _builder.append(_name_11, "\t");
    _builder.append(" ");
    String _name_12 = e.getName();
    String _firstLower_7 = StringExtensions.toFirstLower(_name_12);
    _builder.append(_firstLower_7, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return count(sqlSession, ");
    String _name_13 = e.getName();
    String _firstLower_8 = StringExtensions.toFirstLower(_name_13);
    _builder.append(_firstLower_8, "\t\t");
    _builder.append(", null);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (all) {
        _builder.append("\t");
        _builder.append("public int count(");
        String _name_14 = e.getName();
        _builder.append(_name_14, "\t");
        _builder.append(" ");
        String _name_15 = e.getName();
        String _firstLower_9 = StringExtensions.toFirstLower(_name_15);
        _builder.append(_firstLower_9, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return count(");
        String _name_16 = e.getName();
        String _firstLower_10 = StringExtensions.toFirstLower(_name_16);
        _builder.append(_firstLower_10, "\t\t");
        _builder.append(", null);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compileMoreResultClasses(final PojoDao d, final PojoEntity e, final Map<String, Map<String, PojoType>> moreResultClasses, final ImportManager im) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("SqlControl getMoreResultClasses(");
    String _name = e.getName();
    _builder.append(_name, "\t");
    _builder.append(" ");
    String _name_1 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_1);
    _builder.append(_firstLower, "\t");
    _builder.append(", SqlControl sqlControl) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (sqlControl != null && sqlControl.getMoreResultClasses() != null)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return sqlControl;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<String, Class<?>> moreResultClasses = null;");
    _builder.newLine();
    _builder.append("\t\t");
    {
      Set<Map.Entry<String, Map<String, PojoType>>> _entrySet = moreResultClasses.entrySet();
      boolean _hasElements = false;
      for(final Map.Entry<String, Map<String, PojoType>> f : _entrySet) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate("\n\t", "\t\t");
        }
        _builder.append("\t\tif (");
        String _name_2 = e.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_2);
        _builder.append(_firstLower_1, "\t\t");
        _builder.append(" != null && ");
        String _name_3 = e.getName();
        String _firstLower_2 = StringExtensions.toFirstLower(_name_3);
        _builder.append(_firstLower_2, "\t\t");
        _builder.append(".toInit(");
        String _name_4 = e.getName();
        _builder.append(_name_4, "\t\t");
        _builder.append(".Association.");
        String _key = f.getKey();
        _builder.append(_key, "\t\t");
        _builder.append(".name())) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("if (moreResultClasses == null)");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("moreResultClasses = new HashMap<String, Class<?>>();");
        _builder.newLine();
        _builder.append("\t\t");
        {
          Map<String, PojoType> _value = f.getValue();
          Set<Map.Entry<String, PojoType>> _entrySet_1 = _value.entrySet();
          boolean _hasElements_1 = false;
          for(final Map.Entry<String, PojoType> a : _entrySet_1) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate("\n\t", "\t\t");
            }
            _builder.append("\t\tmoreResultClasses.put(\"");
            String _key_1 = a.getKey();
            _builder.append(_key_1, "\t\t");
            _builder.append("\", ");
            PojoType _value_1 = a.getValue();
            PojoEntity _ref = _value_1.getRef();
            QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_ref);
            _builder.append(_fullyQualifiedName, "\t\t");
            _builder.append(".class);");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("if (moreResultClasses != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("sqlControl = new SqlStandardControl(sqlControl);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("((SqlStandardControl) sqlControl).setMoreResultClasses(moreResultClasses);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return sqlControl;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileIfx(final PojoDao d) {
    StringConcatenation _builder = new StringConcatenation();
    final ImportManager im = new ImportManager(true);
    _builder.newLineIfNotEmpty();
    this.addImplements(d, im);
    _builder.newLineIfNotEmpty();
    this.addExtends(d, im);
    _builder.newLineIfNotEmpty();
    final PojoEntity pojo = this._processorGeneratorUtils.getPojo(d);
    _builder.newLineIfNotEmpty();
    final CharSequence classBody = this.compileIfx(d, pojo, im);
    _builder.newLineIfNotEmpty();
    {
      EObject _eContainer = d.eContainer();
      boolean _notEquals = (!Objects.equal(_eContainer, null));
      if (_notEquals) {
        _builder.append("package ");
        EObject _eContainer_1 = d.eContainer();
        QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_1);
        _builder.append(_fullyQualifiedName, "");
        _builder.append(";");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import org.sqlproc.engine.SqlSession;");
    _builder.newLine();
    _builder.append("import org.sqlproc.engine.SqlControl;");
    _builder.newLine();
    _builder.append("import ");
    String _completeName = this._processorGeneratorUtils.completeName(pojo);
    _builder.append(_completeName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      List<String> _imports = im.getImports();
      boolean _isEmpty = _imports.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        {
          List<String> _imports_1 = im.getImports();
          for(final String i : _imports_1) {
            _builder.append("import ");
            _builder.append(i, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append(classBody, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileIfx(final PojoDao d, final PojoEntity e, final ImportManager im) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public interface ");
    String _name = d.getName();
    _builder.append(_name, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    {
      boolean _isCRUD = this._processorGeneratorUtils.isCRUD(d);
      if (_isCRUD) {
        CharSequence _compileInsertIfx = this.compileInsertIfx(d, e, im, true);
        _builder.append(_compileInsertIfx, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        CharSequence _compileGetIfx = this.compileGetIfx(d, e, im, true);
        _builder.append(_compileGetIfx, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        CharSequence _compileUpdateIfx = this.compileUpdateIfx(d, e, im, true);
        _builder.append(_compileUpdateIfx, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        CharSequence _compileDeleteIfx = this.compileDeleteIfx(d, e, im, true);
        _builder.append(_compileDeleteIfx, "\t");
      }
    }
    {
      boolean _isQuery = this._processorGeneratorUtils.isQuery(d);
      if (_isQuery) {
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        CharSequence _compileListIfx = this.compileListIfx(d, e, im, true);
        _builder.append(_compileListIfx, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        CharSequence _compileCountIfx = this.compileCountIfx(d, e, im, true);
        _builder.append(_compileCountIfx, "\t");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    {
      List<FunProcDirective> _listFunctionsDirectives = this._processorGeneratorUtils.listFunctionsDirectives(d);
      for(final FunProcDirective fp : _listFunctionsDirectives) {
        FunProcType _type = fp.getType();
        DaoDirectiveParameters _paramlist = fp.getParamlist();
        CharSequence _compileFunctionProcedureIfx = this.compileFunctionProcedureIfx(d, e, _type, _paramlist, im, true);
        _builder.append(_compileFunctionProcedureIfx, "\t");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compileFunctionProcedureIfx(final PojoDao d, final PojoEntity e, final FunctionCallQuery type, final DaoDirectiveParameters p, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    final String name = this._processorGeneratorUtils.getFunProcName(d);
    _builder.newLineIfNotEmpty();
    _builder.append("public ");
    PojoType _out = p.getOut();
    CharSequence _compileType = this._processorGeneratorUtils.compileType(_out, im);
    _builder.append(_compileType, "");
    _builder.append(" ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins = p.getIns();
      boolean _hasElements = false;
      for(final PojoType ma : _ins) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType_1 = this._processorGeneratorUtils.compileType(ma, im);
        _builder.append(_compileType_1, "");
        _builder.append(" ");
        String _paramName = this._processorGeneratorUtils.getParamName(ma);
        _builder.append(_paramName, "");
      }
    }
    _builder.append(", SqlControl sqlControl);");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public ");
        PojoType _out_1 = p.getOut();
        CharSequence _compileType_2 = this._processorGeneratorUtils.compileType(_out_1, im);
        _builder.append(_compileType_2, "");
        _builder.append(" ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_1 = p.getIns();
          boolean _hasElements_1 = false;
          for(final PojoType ma_1 : _ins_1) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_3 = this._processorGeneratorUtils.compileType(ma_1, im);
            _builder.append(_compileType_3, "");
            _builder.append(" ");
            String _paramName_1 = this._processorGeneratorUtils.getParamName(ma_1);
            _builder.append(_paramName_1, "");
          }
        }
        _builder.append(", SqlControl sqlControl);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("public ");
    PojoType _out_2 = p.getOut();
    CharSequence _compileType_4 = this._processorGeneratorUtils.compileType(_out_2, im);
    _builder.append(_compileType_4, "");
    _builder.append(" ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins_2 = p.getIns();
      boolean _hasElements_2 = false;
      for(final PojoType ma_2 : _ins_2) {
        if (!_hasElements_2) {
          _hasElements_2 = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType_5 = this._processorGeneratorUtils.compileType(ma_2, im);
        _builder.append(_compileType_5, "");
        _builder.append(" ");
        String _paramName_2 = this._processorGeneratorUtils.getParamName(ma_2);
        _builder.append(_paramName_2, "");
      }
    }
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public ");
        PojoType _out_3 = p.getOut();
        CharSequence _compileType_6 = this._processorGeneratorUtils.compileType(_out_3, im);
        _builder.append(_compileType_6, "");
        _builder.append(" ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_3 = p.getIns();
          boolean _hasElements_3 = false;
          for(final PojoType ma_3 : _ins_3) {
            if (!_hasElements_3) {
              _hasElements_3 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_7 = this._processorGeneratorUtils.compileType(ma_3, im);
            _builder.append(_compileType_7, "");
            _builder.append(" ");
            String _paramName_3 = this._processorGeneratorUtils.getParamName(ma_3);
            _builder.append(_paramName_3, "");
          }
        }
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _compileFunctionProcedureIfx(final PojoDao d, final PojoEntity e, final ProcedureCallQuery type, final DaoDirectiveParameters p, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    final String name = this._processorGeneratorUtils.getFunProcName(d);
    _builder.newLineIfNotEmpty();
    _builder.append("public ");
    PojoType _out = p.getOut();
    CharSequence _compileType = this._processorGeneratorUtils.compileType(_out, im);
    _builder.append(_compileType, "");
    _builder.append(" ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins = p.getIns();
      boolean _hasElements = false;
      for(final PojoType ma : _ins) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType_1 = this._processorGeneratorUtils.compileType(ma, im);
        _builder.append(_compileType_1, "");
        _builder.append(" ");
        String _paramName = this._processorGeneratorUtils.getParamName(ma);
        _builder.append(_paramName, "");
      }
    }
    _builder.append(", SqlControl sqlControl);");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public ");
        PojoType _out_1 = p.getOut();
        CharSequence _compileType_2 = this._processorGeneratorUtils.compileType(_out_1, im);
        _builder.append(_compileType_2, "");
        _builder.append(" ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_1 = p.getIns();
          boolean _hasElements_1 = false;
          for(final PojoType ma_1 : _ins_1) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_3 = this._processorGeneratorUtils.compileType(ma_1, im);
            _builder.append(_compileType_3, "");
            _builder.append(" ");
            String _paramName_1 = this._processorGeneratorUtils.getParamName(ma_1);
            _builder.append(_paramName_1, "");
          }
        }
        _builder.append(", SqlControl sqlControl);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("public ");
    PojoType _out_2 = p.getOut();
    CharSequence _compileType_4 = this._processorGeneratorUtils.compileType(_out_2, im);
    _builder.append(_compileType_4, "");
    _builder.append(" ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins_2 = p.getIns();
      boolean _hasElements_2 = false;
      for(final PojoType ma_2 : _ins_2) {
        if (!_hasElements_2) {
          _hasElements_2 = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType_5 = this._processorGeneratorUtils.compileType(ma_2, im);
        _builder.append(_compileType_5, "");
        _builder.append(" ");
        String _paramName_2 = this._processorGeneratorUtils.getParamName(ma_2);
        _builder.append(_paramName_2, "");
      }
    }
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public ");
        PojoType _out_3 = p.getOut();
        CharSequence _compileType_6 = this._processorGeneratorUtils.compileType(_out_3, im);
        _builder.append(_compileType_6, "");
        _builder.append(" ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_3 = p.getIns();
          boolean _hasElements_3 = false;
          for(final PojoType ma_3 : _ins_3) {
            if (!_hasElements_3) {
              _hasElements_3 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_7 = this._processorGeneratorUtils.compileType(ma_3, im);
            _builder.append(_compileType_7, "");
            _builder.append(" ");
            String _paramName_3 = this._processorGeneratorUtils.getParamName(ma_3);
            _builder.append(_paramName_3, "");
          }
        }
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _compileFunctionProcedureIfx(final PojoDao d, final PojoEntity e, final FunctionCall type, final DaoDirectiveParameters p, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    final String name = this._processorGeneratorUtils.getFunProcName(d);
    _builder.newLineIfNotEmpty();
    _builder.append("public ");
    PojoType _out = p.getOut();
    CharSequence _compileType = this._processorGeneratorUtils.compileType(_out, im);
    _builder.append(_compileType, "");
    _builder.append(" ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins = p.getIns();
      boolean _hasElements = false;
      for(final PojoType ma : _ins) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType_1 = this._processorGeneratorUtils.compileType(ma, im);
        _builder.append(_compileType_1, "");
        _builder.append(" ");
        String _paramName = this._processorGeneratorUtils.getParamName(ma);
        _builder.append(_paramName, "");
      }
    }
    _builder.append(", SqlControl sqlControl);");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public ");
        PojoType _out_1 = p.getOut();
        CharSequence _compileType_2 = this._processorGeneratorUtils.compileType(_out_1, im);
        _builder.append(_compileType_2, "");
        _builder.append(" ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_1 = p.getIns();
          boolean _hasElements_1 = false;
          for(final PojoType ma_1 : _ins_1) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_3 = this._processorGeneratorUtils.compileType(ma_1, im);
            _builder.append(_compileType_3, "");
            _builder.append(" ");
            String _paramName_1 = this._processorGeneratorUtils.getParamName(ma_1);
            _builder.append(_paramName_1, "");
          }
        }
        _builder.append(", SqlControl sqlControl);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("public ");
    PojoType _out_2 = p.getOut();
    CharSequence _compileType_4 = this._processorGeneratorUtils.compileType(_out_2, im);
    _builder.append(_compileType_4, "");
    _builder.append(" ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins_2 = p.getIns();
      boolean _hasElements_2 = false;
      for(final PojoType ma_2 : _ins_2) {
        if (!_hasElements_2) {
          _hasElements_2 = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType_5 = this._processorGeneratorUtils.compileType(ma_2, im);
        _builder.append(_compileType_5, "");
        _builder.append(" ");
        String _paramName_2 = this._processorGeneratorUtils.getParamName(ma_2);
        _builder.append(_paramName_2, "");
      }
    }
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public ");
        PojoType _out_3 = p.getOut();
        CharSequence _compileType_6 = this._processorGeneratorUtils.compileType(_out_3, im);
        _builder.append(_compileType_6, "");
        _builder.append(" ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_3 = p.getIns();
          boolean _hasElements_3 = false;
          for(final PojoType ma_3 : _ins_3) {
            if (!_hasElements_3) {
              _hasElements_3 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_7 = this._processorGeneratorUtils.compileType(ma_3, im);
            _builder.append(_compileType_7, "");
            _builder.append(" ");
            String _paramName_3 = this._processorGeneratorUtils.getParamName(ma_3);
            _builder.append(_paramName_3, "");
          }
        }
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _compileFunctionProcedureIfx(final PojoDao d, final PojoEntity e, final ProcedureUpdate type, final DaoDirectiveParameters p, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    final String name = this._processorGeneratorUtils.getFunProcName(d);
    _builder.newLineIfNotEmpty();
    _builder.append("public int ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins = p.getIns();
      boolean _hasElements = false;
      for(final PojoType ma : _ins) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType = this._processorGeneratorUtils.compileType(ma, im);
        _builder.append(_compileType, "");
        _builder.append(" ");
        String _paramName = this._processorGeneratorUtils.getParamName(ma);
        _builder.append(_paramName, "");
      }
    }
    _builder.append(", SqlControl sqlControl);");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public int ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_1 = p.getIns();
          boolean _hasElements_1 = false;
          for(final PojoType ma_1 : _ins_1) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_1 = this._processorGeneratorUtils.compileType(ma_1, im);
            _builder.append(_compileType_1, "");
            _builder.append(" ");
            String _paramName_1 = this._processorGeneratorUtils.getParamName(ma_1);
            _builder.append(_paramName_1, "");
          }
        }
        _builder.append(", SqlControl sqlControl);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("public int ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins_2 = p.getIns();
      boolean _hasElements_2 = false;
      for(final PojoType ma_2 : _ins_2) {
        if (!_hasElements_2) {
          _hasElements_2 = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType_2 = this._processorGeneratorUtils.compileType(ma_2, im);
        _builder.append(_compileType_2, "");
        _builder.append(" ");
        String _paramName_2 = this._processorGeneratorUtils.getParamName(ma_2);
        _builder.append(_paramName_2, "");
      }
    }
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public int ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_3 = p.getIns();
          boolean _hasElements_3 = false;
          for(final PojoType ma_3 : _ins_3) {
            if (!_hasElements_3) {
              _hasElements_3 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_3 = this._processorGeneratorUtils.compileType(ma_3, im);
            _builder.append(_compileType_3, "");
            _builder.append(" ");
            String _paramName_3 = this._processorGeneratorUtils.getParamName(ma_3);
            _builder.append(_paramName_3, "");
          }
        }
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _compileFunctionProcedureIfx(final PojoDao d, final PojoEntity e, final FunctionQuery type, final DaoDirectiveParameters p, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    final String name = this._processorGeneratorUtils.getFunProcName(d);
    _builder.newLineIfNotEmpty();
    _builder.append("public ");
    PojoType _out = p.getOut();
    CharSequence _compileType = this._processorGeneratorUtils.compileType(_out, im);
    _builder.append(_compileType, "");
    _builder.append(" ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins = p.getIns();
      boolean _hasElements = false;
      for(final PojoType ma : _ins) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType_1 = this._processorGeneratorUtils.compileType(ma, im);
        _builder.append(_compileType_1, "");
        _builder.append(" ");
        String _paramName = this._processorGeneratorUtils.getParamName(ma);
        _builder.append(_paramName, "");
      }
    }
    _builder.append(", SqlControl sqlControl);");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public ");
        PojoType _out_1 = p.getOut();
        CharSequence _compileType_2 = this._processorGeneratorUtils.compileType(_out_1, im);
        _builder.append(_compileType_2, "");
        _builder.append(" ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_1 = p.getIns();
          boolean _hasElements_1 = false;
          for(final PojoType ma_1 : _ins_1) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_3 = this._processorGeneratorUtils.compileType(ma_1, im);
            _builder.append(_compileType_3, "");
            _builder.append(" ");
            String _paramName_1 = this._processorGeneratorUtils.getParamName(ma_1);
            _builder.append(_paramName_1, "");
          }
        }
        _builder.append(", SqlControl sqlControl);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("public ");
    PojoType _out_2 = p.getOut();
    CharSequence _compileType_4 = this._processorGeneratorUtils.compileType(_out_2, im);
    _builder.append(_compileType_4, "");
    _builder.append(" ");
    _builder.append(name, "");
    _builder.append("(SqlSession sqlSession, ");
    {
      EList<PojoType> _ins_2 = p.getIns();
      boolean _hasElements_2 = false;
      for(final PojoType ma_2 : _ins_2) {
        if (!_hasElements_2) {
          _hasElements_2 = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        CharSequence _compileType_5 = this._processorGeneratorUtils.compileType(ma_2, im);
        _builder.append(_compileType_5, "");
        _builder.append(" ");
        String _paramName_2 = this._processorGeneratorUtils.getParamName(ma_2);
        _builder.append(_paramName_2, "");
      }
    }
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public ");
        PojoType _out_3 = p.getOut();
        CharSequence _compileType_6 = this._processorGeneratorUtils.compileType(_out_3, im);
        _builder.append(_compileType_6, "");
        _builder.append(" ");
        _builder.append(name, "");
        _builder.append("(");
        {
          EList<PojoType> _ins_3 = p.getIns();
          boolean _hasElements_3 = false;
          for(final PojoType ma_3 : _ins_3) {
            if (!_hasElements_3) {
              _hasElements_3 = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            CharSequence _compileType_7 = this._processorGeneratorUtils.compileType(ma_3, im);
            _builder.append(_compileType_7, "");
            _builder.append(" ");
            String _paramName_3 = this._processorGeneratorUtils.getParamName(ma_3);
            _builder.append(_paramName_3, "");
          }
        }
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileInsertIfx(final PojoDao d, final PojoEntity e, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public ");
    String _name = e.getName();
    _builder.append(_name, "");
    _builder.append(" insert(SqlSession sqlSession, ");
    String _name_1 = e.getName();
    _builder.append(_name_1, "");
    _builder.append(" ");
    String _name_2 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower, "");
    _builder.append(", SqlControl sqlControl);");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public ");
        String _name_3 = e.getName();
        _builder.append(_name_3, "");
        _builder.append(" insert(");
        String _name_4 = e.getName();
        _builder.append(_name_4, "");
        _builder.append(" ");
        String _name_5 = e.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_5);
        _builder.append(_firstLower_1, "");
        _builder.append(", SqlControl sqlControl);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("public ");
    String _name_6 = e.getName();
    _builder.append(_name_6, "");
    _builder.append(" insert(SqlSession sqlSession, ");
    String _name_7 = e.getName();
    _builder.append(_name_7, "");
    _builder.append(" ");
    String _name_8 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_8);
    _builder.append(_firstLower_2, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public ");
        String _name_9 = e.getName();
        _builder.append(_name_9, "");
        _builder.append(" insert(");
        String _name_10 = e.getName();
        _builder.append(_name_10, "");
        _builder.append(" ");
        String _name_11 = e.getName();
        String _firstLower_3 = StringExtensions.toFirstLower(_name_11);
        _builder.append(_firstLower_3, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileGetIfx(final PojoDao d, final PojoEntity e, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public ");
    String _name = e.getName();
    _builder.append(_name, "");
    _builder.append(" get(SqlSession sqlSession, ");
    String _name_1 = e.getName();
    _builder.append(_name_1, "");
    _builder.append(" ");
    String _name_2 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower, "");
    _builder.append(", SqlControl sqlControl);");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public ");
        String _name_3 = e.getName();
        _builder.append(_name_3, "");
        _builder.append(" get(");
        String _name_4 = e.getName();
        _builder.append(_name_4, "");
        _builder.append(" ");
        String _name_5 = e.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_5);
        _builder.append(_firstLower_1, "");
        _builder.append(", SqlControl sqlControl);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("public ");
    String _name_6 = e.getName();
    _builder.append(_name_6, "\t");
    _builder.append(" get(SqlSession sqlSession, ");
    String _name_7 = e.getName();
    _builder.append(_name_7, "\t");
    _builder.append(" ");
    String _name_8 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_8);
    _builder.append(_firstLower_2, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public ");
        String _name_9 = e.getName();
        _builder.append(_name_9, "");
        _builder.append(" get(");
        String _name_10 = e.getName();
        _builder.append(_name_10, "");
        _builder.append(" ");
        String _name_11 = e.getName();
        String _firstLower_3 = StringExtensions.toFirstLower(_name_11);
        _builder.append(_firstLower_3, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileUpdateIfx(final PojoDao d, final PojoEntity e, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public int update(SqlSession sqlSession, ");
    String _name = e.getName();
    _builder.append(_name, "");
    _builder.append(" ");
    String _name_1 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_1);
    _builder.append(_firstLower, "");
    _builder.append(", SqlControl sqlControl);");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public int update(");
        String _name_2 = e.getName();
        _builder.append(_name_2, "");
        _builder.append(" ");
        String _name_3 = e.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_3);
        _builder.append(_firstLower_1, "");
        _builder.append(", SqlControl sqlControl);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("public int update(SqlSession sqlSession, ");
    String _name_4 = e.getName();
    _builder.append(_name_4, "");
    _builder.append(" ");
    String _name_5 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_5);
    _builder.append(_firstLower_2, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public int update(");
        String _name_6 = e.getName();
        _builder.append(_name_6, "");
        _builder.append(" ");
        String _name_7 = e.getName();
        String _firstLower_3 = StringExtensions.toFirstLower(_name_7);
        _builder.append(_firstLower_3, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileDeleteIfx(final PojoDao d, final PojoEntity e, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public int delete(SqlSession sqlSession, ");
    String _name = e.getName();
    _builder.append(_name, "");
    _builder.append(" ");
    String _name_1 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_1);
    _builder.append(_firstLower, "");
    _builder.append(", SqlControl sqlControl);");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public int delete(");
        String _name_2 = e.getName();
        _builder.append(_name_2, "");
        _builder.append(" ");
        String _name_3 = e.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_3);
        _builder.append(_firstLower_1, "");
        _builder.append(", SqlControl sqlControl);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("public int delete(SqlSession sqlSession, ");
    String _name_4 = e.getName();
    _builder.append(_name_4, "");
    _builder.append(" ");
    String _name_5 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_5);
    _builder.append(_firstLower_2, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public int delete(");
        String _name_6 = e.getName();
        _builder.append(_name_6, "");
        _builder.append(" ");
        String _name_7 = e.getName();
        String _firstLower_3 = StringExtensions.toFirstLower(_name_7);
        _builder.append(_firstLower_3, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileListIfx(final PojoDao d, final PojoEntity e, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public List<");
    String _name = e.getName();
    _builder.append(_name, "");
    _builder.append("> list(SqlSession sqlSession, ");
    String _name_1 = e.getName();
    _builder.append(_name_1, "");
    _builder.append(" ");
    String _name_2 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_2);
    _builder.append(_firstLower, "");
    _builder.append(", SqlControl sqlControl);");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public List<");
        String _name_3 = e.getName();
        _builder.append(_name_3, "");
        _builder.append("> list(");
        String _name_4 = e.getName();
        _builder.append(_name_4, "");
        _builder.append(" ");
        String _name_5 = e.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_5);
        _builder.append(_firstLower_1, "");
        _builder.append(", SqlControl sqlControl);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("public List<");
    String _name_6 = e.getName();
    _builder.append(_name_6, "");
    _builder.append("> list(SqlSession sqlSession, ");
    String _name_7 = e.getName();
    _builder.append(_name_7, "");
    _builder.append(" ");
    String _name_8 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_8);
    _builder.append(_firstLower_2, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public List<");
        String _name_9 = e.getName();
        _builder.append(_name_9, "");
        _builder.append("> list(");
        String _name_10 = e.getName();
        _builder.append(_name_10, "");
        _builder.append(" ");
        String _name_11 = e.getName();
        String _firstLower_3 = StringExtensions.toFirstLower(_name_11);
        _builder.append(_firstLower_3, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileCountIfx(final PojoDao d, final PojoEntity e, final ImportManager im, final boolean all) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public int count(SqlSession sqlSession, ");
    String _name = e.getName();
    _builder.append(_name, "");
    _builder.append(" ");
    String _name_1 = e.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_1);
    _builder.append(_firstLower, "");
    _builder.append(", SqlControl sqlControl);");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public int count(");
        String _name_2 = e.getName();
        _builder.append(_name_2, "");
        _builder.append(" ");
        String _name_3 = e.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_3);
        _builder.append(_firstLower_1, "");
        _builder.append(", SqlControl sqlControl);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("public int count(SqlSession sqlSession, ");
    String _name_4 = e.getName();
    _builder.append(_name_4, "");
    _builder.append(" ");
    String _name_5 = e.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_5);
    _builder.append(_firstLower_2, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      if (all) {
        _builder.append("public int count(");
        String _name_6 = e.getName();
        _builder.append(_name_6, "");
        _builder.append(" ");
        String _name_7 = e.getName();
        String _firstLower_3 = StringExtensions.toFirstLower(_name_7);
        _builder.append(_firstLower_3, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileExtends(final PojoDao e, final ImportManager im) {
    StringConcatenation _builder = new StringConcatenation();
    {
      PojoDao _superType = this._processorGeneratorUtils.getSuperType(e);
      boolean _notEquals = (!Objects.equal(_superType, null));
      if (_notEquals) {
        _builder.append("extends ");
        PojoDao _superType_1 = this._processorGeneratorUtils.getSuperType(e);
        PojoDao _superType_2 = this._processorGeneratorUtils.getSuperType(e);
        QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_superType_2);
        String _fullName = Utils.getFullName(e, _superType_1, _fullyQualifiedName, im);
        _builder.append(_fullName, "");
        _builder.append(" ");
      } else {
        String _extends = this.getExtends(e);
        boolean _notEquals_1 = (!Objects.equal(_extends, ""));
        if (_notEquals_1) {
          _builder.append("extends ");
          String _extends_1 = this.getExtends(e);
          _builder.append(_extends_1, "");
          _builder.append(" ");
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compileImplements(final PojoDao d, final String implPackage) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _or = false;
      boolean _or_1 = false;
      boolean _isImplements = this.isImplements(d);
      if (_isImplements) {
        _or_1 = true;
      } else {
        Integer _sernum = this._processorGeneratorUtils.getSernum(d);
        boolean _notEquals = (!Objects.equal(_sernum, null));
        _or_1 = _notEquals;
      }
      if (_or_1) {
        _or = true;
      } else {
        boolean _notEquals_1 = (!Objects.equal(implPackage, null));
        _or = _notEquals_1;
      }
      if (_or) {
        _builder.append("implements ");
        {
          ArrayList<Implements> _implements = this.getImplements(d);
          boolean _hasElements = false;
          for(final Implements f : _implements) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            String _daoImplements = this._processorGeneratorUtils.getDaoImplements(d, f);
            _builder.append(_daoImplements, "");
          }
        }
        {
          Integer _sernum_1 = this._processorGeneratorUtils.getSernum(d);
          boolean _notEquals_2 = (!Objects.equal(_sernum_1, null));
          if (_notEquals_2) {
            {
              boolean _isImplements_1 = this.isImplements(d);
              if (_isImplements_1) {
                _builder.append(", ");
              }
            }
            _builder.append("Serializable");
          }
        }
        {
          boolean _notEquals_3 = (!Objects.equal(implPackage, null));
          if (_notEquals_3) {
            {
              boolean _or_2 = false;
              boolean _isImplements_2 = this.isImplements(d);
              if (_isImplements_2) {
                _or_2 = true;
              } else {
                Integer _sernum_2 = this._processorGeneratorUtils.getSernum(d);
                boolean _notEquals_4 = (!Objects.equal(_sernum_2, null));
                _or_2 = _notEquals_4;
              }
              if (_or_2) {
                _builder.append(", ");
              }
            }
            String _name = d.getName();
            _builder.append(_name, "");
          }
        }
        _builder.append(" ");
      }
    }
    return _builder;
  }
  
  public void addImplements(final PojoDao e, final ImportManager im) {
    EObject _eContainer = e.eContainer();
    EList<EObject> _eContents = _eContainer.eContents();
    Iterable<Implements> _filter = Iterables.<Implements>filter(_eContents, Implements.class);
    for (final Implements impl : _filter) {
      JvmType _implements = impl.getImplements();
      im.addImportFor(_implements);
    }
  }
  
  public void addExtends(final PojoDao e, final ImportManager im) {
    EObject _eContainer = e.eContainer();
    EList<EObject> _eContents = _eContainer.eContents();
    Iterable<Extends> _filter = Iterables.<Extends>filter(_eContents, Extends.class);
    for (final Extends ext : _filter) {
      JvmType _extends = ext.getExtends();
      im.addImportFor(_extends);
    }
  }
  
  public boolean isExtends(final PojoDao e) {
    EObject _eContainer = e.eContainer();
    EList<EObject> _eContents = _eContainer.eContents();
    Iterable<Extends> _filter = Iterables.<Extends>filter(_eContents, Extends.class);
    for (final Extends ext : _filter) {
      {
        List<PojoDao> _onlyDaos = this._processorGeneratorUtils.onlyDaos(ext);
        boolean _isEmpty = _onlyDaos.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          List<PojoDao> _onlyDaos_1 = this._processorGeneratorUtils.onlyDaos(ext);
          for (final PojoDao ee : _onlyDaos_1) {
            String _name = ee.getName();
            String _name_1 = e.getName();
            boolean _equals = Objects.equal(_name, _name_1);
            if (_equals) {
              return true;
            }
          }
          return false;
        }
        List<PojoDao> _exceptDaos = this._processorGeneratorUtils.exceptDaos(ext);
        for (final PojoDao ee_1 : _exceptDaos) {
          String _name_2 = ee_1.getName();
          String _name_3 = e.getName();
          boolean _equals_1 = Objects.equal(_name_2, _name_3);
          if (_equals_1) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }
  
  public boolean isExtends(final PojoDao e, final Extends ext) {
    List<PojoDao> _onlyDaos = this._processorGeneratorUtils.onlyDaos(ext);
    boolean _isEmpty = _onlyDaos.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      List<PojoDao> _onlyDaos_1 = this._processorGeneratorUtils.onlyDaos(ext);
      for (final PojoDao ee : _onlyDaos_1) {
        String _name = ee.getName();
        String _name_1 = e.getName();
        boolean _equals = Objects.equal(_name, _name_1);
        if (_equals) {
          return true;
        }
      }
      return false;
    }
    List<PojoDao> _exceptDaos = this._processorGeneratorUtils.exceptDaos(ext);
    for (final PojoDao ee_1 : _exceptDaos) {
      String _name_2 = ee_1.getName();
      String _name_3 = e.getName();
      boolean _equals_1 = Objects.equal(_name_2, _name_3);
      if (_equals_1) {
        return false;
      }
    }
    return true;
  }
  
  public String getExtends(final PojoDao e) {
    EObject _eContainer = e.eContainer();
    EList<EObject> _eContents = _eContainer.eContents();
    Iterable<Extends> _filter = Iterables.<Extends>filter(_eContents, Extends.class);
    for (final Extends ext : _filter) {
      boolean _isExtends = this.isExtends(e, ext);
      if (_isExtends) {
        JvmType _extends = ext.getExtends();
        return _extends.getSimpleName();
      }
    }
    return "";
  }
  
  public boolean isImplements(final PojoDao e) {
    EObject _eContainer = e.eContainer();
    EList<EObject> _eContents = _eContainer.eContents();
    Iterable<Implements> _filter = Iterables.<Implements>filter(_eContents, Implements.class);
    for (final Implements ext : _filter) {
      {
        List<PojoDao> _exceptDaos = this._processorGeneratorUtils.exceptDaos(ext);
        for (final PojoDao ee : _exceptDaos) {
          String _name = ee.getName();
          String _name_1 = e.getName();
          boolean _equals = Objects.equal(_name, _name_1);
          if (_equals) {
            return false;
          }
        }
        List<PojoDao> _onlyDaos = this._processorGeneratorUtils.onlyDaos(ext);
        boolean _isEmpty = _onlyDaos.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          List<PojoDao> _onlyDaos_1 = this._processorGeneratorUtils.onlyDaos(ext);
          for (final PojoDao ee_1 : _onlyDaos_1) {
            String _name_2 = ee_1.getName();
            String _name_3 = e.getName();
            boolean _equals_1 = Objects.equal(_name_2, _name_3);
            if (_equals_1) {
              return true;
            }
          }
        } else {
          return true;
        }
      }
    }
    return false;
  }
  
  public boolean isImplements(final PojoDao e, final Implements ext) {
    List<PojoDao> _onlyDaos = this._processorGeneratorUtils.onlyDaos(ext);
    boolean _isEmpty = _onlyDaos.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      List<PojoDao> _onlyDaos_1 = this._processorGeneratorUtils.onlyDaos(ext);
      for (final PojoDao ee : _onlyDaos_1) {
        String _name = ee.getName();
        String _name_1 = e.getName();
        boolean _equals = Objects.equal(_name, _name_1);
        if (_equals) {
          return true;
        }
      }
      return false;
    }
    List<PojoDao> _exceptDaos = this._processorGeneratorUtils.exceptDaos(ext);
    for (final PojoDao ee_1 : _exceptDaos) {
      String _name_2 = ee_1.getName();
      String _name_3 = e.getName();
      boolean _equals_1 = Objects.equal(_name_2, _name_3);
      if (_equals_1) {
        return false;
      }
    }
    return true;
  }
  
  public ArrayList<Implements> getImplements(final PojoDao e) {
    final ArrayList<Implements> list = new ArrayList<Implements>();
    EObject _eContainer = e.eContainer();
    EList<EObject> _eContents = _eContainer.eContents();
    Iterable<Implements> _filter = Iterables.<Implements>filter(_eContents, Implements.class);
    for (final Implements ext : _filter) {
      boolean _isImplements = this.isImplements(e, ext);
      if (_isImplements) {
        list.add(ext);
      }
    }
    return list;
  }
  
  public CharSequence compileFunctionProcedure(final PojoDao d, final PojoEntity e, final FunProcType type, final DaoDirectiveParameters p, final ImportManager im, final boolean all) {
    if (type instanceof FunctionCall) {
      return _compileFunctionProcedure(d, e, (FunctionCall)type, p, im, all);
    } else if (type instanceof FunctionCallQuery) {
      return _compileFunctionProcedure(d, e, (FunctionCallQuery)type, p, im, all);
    } else if (type instanceof FunctionQuery) {
      return _compileFunctionProcedure(d, e, (FunctionQuery)type, p, im, all);
    } else if (type instanceof ProcedureCallQuery) {
      return _compileFunctionProcedure(d, e, (ProcedureCallQuery)type, p, im, all);
    } else if (type instanceof ProcedureUpdate) {
      return _compileFunctionProcedure(d, e, (ProcedureUpdate)type, p, im, all);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(d, e, type, p, im, all).toString());
    }
  }
  
  public CharSequence compileFunctionProcedureIfx(final PojoDao d, final PojoEntity e, final FunProcType type, final DaoDirectiveParameters p, final ImportManager im, final boolean all) {
    if (type instanceof FunctionCall) {
      return _compileFunctionProcedureIfx(d, e, (FunctionCall)type, p, im, all);
    } else if (type instanceof FunctionCallQuery) {
      return _compileFunctionProcedureIfx(d, e, (FunctionCallQuery)type, p, im, all);
    } else if (type instanceof FunctionQuery) {
      return _compileFunctionProcedureIfx(d, e, (FunctionQuery)type, p, im, all);
    } else if (type instanceof ProcedureCallQuery) {
      return _compileFunctionProcedureIfx(d, e, (ProcedureCallQuery)type, p, im, all);
    } else if (type instanceof ProcedureUpdate) {
      return _compileFunctionProcedureIfx(d, e, (ProcedureUpdate)type, p, im, all);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(d, e, type, p, im, all).toString());
    }
  }
}
