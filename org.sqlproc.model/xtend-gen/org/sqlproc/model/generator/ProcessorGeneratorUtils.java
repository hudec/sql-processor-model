/**
 * generated by Xtext
 */
package org.sqlproc.model.generator;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.common.types.JvmPrimitiveType;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.sqlproc.model.ImportManager;
import org.sqlproc.model.processorModel.AnnotatedEntity;
import org.sqlproc.model.processorModel.Annotation;
import org.sqlproc.model.processorModel.AnnotationDirective;
import org.sqlproc.model.processorModel.AnnotationDirectiveAttribute;
import org.sqlproc.model.processorModel.AnnotationDirectiveConflict;
import org.sqlproc.model.processorModel.AnnotationDirectiveConstructor;
import org.sqlproc.model.processorModel.AnnotationDirectiveGetter;
import org.sqlproc.model.processorModel.AnnotationDirectiveSetter;
import org.sqlproc.model.processorModel.AnnotationDirectiveStandard;
import org.sqlproc.model.processorModel.AnnotationDirectiveStatic;
import org.sqlproc.model.processorModel.Artifacts;
import org.sqlproc.model.processorModel.DaoDirective;
import org.sqlproc.model.processorModel.DaoDirectiveCrud;
import org.sqlproc.model.processorModel.DaoDirectiveDiscriminator;
import org.sqlproc.model.processorModel.DaoDirectiveParameters;
import org.sqlproc.model.processorModel.DaoDirectiveQuery;
import org.sqlproc.model.processorModel.DescendantAssignment;
import org.sqlproc.model.processorModel.DirectiveProperties;
import org.sqlproc.model.processorModel.Entity;
import org.sqlproc.model.processorModel.EnumEntity;
import org.sqlproc.model.processorModel.EnumEntityModifier1;
import org.sqlproc.model.processorModel.EnumEntityModifier2;
import org.sqlproc.model.processorModel.EnumProperty;
import org.sqlproc.model.processorModel.Extends;
import org.sqlproc.model.processorModel.FunProcDirective;
import org.sqlproc.model.processorModel.Implements;
import org.sqlproc.model.processorModel.ImplementsExtendsDirective;
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveExceptDaos;
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveExceptPojos;
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveGenerics;
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveOnlyDaos;
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveOnlyPojos;
import org.sqlproc.model.processorModel.PojoAnnotatedProperty;
import org.sqlproc.model.processorModel.PojoDao;
import org.sqlproc.model.processorModel.PojoDaoModifier;
import org.sqlproc.model.processorModel.PojoDirective;
import org.sqlproc.model.processorModel.PojoDirectiveDiscriminator;
import org.sqlproc.model.processorModel.PojoDirectiveEquals;
import org.sqlproc.model.processorModel.PojoDirectiveHashCode;
import org.sqlproc.model.processorModel.PojoDirectiveIndex;
import org.sqlproc.model.processorModel.PojoDirectiveOperators;
import org.sqlproc.model.processorModel.PojoDirectiveSerializable;
import org.sqlproc.model.processorModel.PojoDirectiveToString;
import org.sqlproc.model.processorModel.PojoEntity;
import org.sqlproc.model.processorModel.PojoEntityModifier1;
import org.sqlproc.model.processorModel.PojoEntityModifier2;
import org.sqlproc.model.processorModel.PojoProperty;
import org.sqlproc.model.processorModel.PojoPropertyDirective;
import org.sqlproc.model.processorModel.PojoPropertyDirectiveCreateCol;
import org.sqlproc.model.processorModel.PojoPropertyDirectiveEnumDef;
import org.sqlproc.model.processorModel.PojoPropertyDirectiveEnumInit;
import org.sqlproc.model.processorModel.PojoPropertyDirectiveIndex;
import org.sqlproc.model.processorModel.PojoPropertyDirectiveIsDef;
import org.sqlproc.model.processorModel.PojoPropertyDirectivePrimaryKey;
import org.sqlproc.model.processorModel.PojoPropertyDirectiveRequired;
import org.sqlproc.model.processorModel.PojoPropertyDirectiveToInit;
import org.sqlproc.model.processorModel.PojoPropertyDirectiveUpdateCol;
import org.sqlproc.model.processorModel.PojoPropertyDirectiveVersion;
import org.sqlproc.model.processorModel.PojoType;
import org.sqlproc.model.processorModel.ProcessorModelPackage;
import org.sqlproc.model.processorModel.ValueType;
import org.sqlproc.model.util.Utils;

@SuppressWarnings("all")
public class ProcessorGeneratorUtils {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Inject
  private IScopeProvider scopeProvider;
  
  @Inject
  private IQualifiedNameConverter qualifiedNameConverter;
  
  public CharSequence compileType(final EnumProperty f, final ImportManager im) {
    StringConcatenation _builder = new StringConcatenation();
    {
      JvmType _type = f.getType();
      boolean _notEquals = (!Objects.equal(_type, null));
      if (_notEquals) {
        JvmType _type_1 = f.getType();
        CharSequence _serialize = im.serialize(_type_1);
        _builder.append(_serialize, "");
      }
    }
    return _builder;
  }
  
  public CharSequence compileType(final PojoProperty f, final ImportManager im) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Entity _ref = f.getRef();
      boolean _notEquals = (!Objects.equal(_ref, null));
      if (_notEquals) {
        Entity _ref_1 = f.getRef();
        QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_ref_1);
        _builder.append(_fullyQualifiedName, "");
      } else {
        JvmType _type = f.getType();
        boolean _notEquals_1 = (!Objects.equal(_type, null));
        if (_notEquals_1) {
          JvmType _type_1 = f.getType();
          CharSequence _serialize = im.serialize(_type_1);
          _builder.append(_serialize, "");
        }
      }
    }
    {
      JvmType _gtype = f.getGtype();
      boolean _notEquals_2 = (!Objects.equal(_gtype, null));
      if (_notEquals_2) {
        _builder.append("<");
        JvmType _gtype_1 = f.getGtype();
        CharSequence _serialize_1 = im.serialize(_gtype_1);
        _builder.append(_serialize_1, "");
        _builder.append(">");
      }
    }
    {
      PojoEntity _gref = f.getGref();
      boolean _notEquals_3 = (!Objects.equal(_gref, null));
      if (_notEquals_3) {
        _builder.append("<");
        PojoEntity _gref_1 = f.getGref();
        QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(_gref_1);
        _builder.append(_fullyQualifiedName_1, "");
        _builder.append(">");
      }
    }
    {
      boolean _isArray = f.isArray();
      if (_isArray) {
        _builder.append("[]");
      }
    }
    return _builder;
  }
  
  public CharSequence compileType(final PojoType f, final ImportManager im) {
    StringConcatenation _builder = new StringConcatenation();
    {
      PojoEntity _ref = f.getRef();
      boolean _notEquals = (!Objects.equal(_ref, null));
      if (_notEquals) {
        PojoEntity _ref_1 = f.getRef();
        JvmType _pojoMethod2jvmType = Utils.pojoMethod2jvmType(_ref_1);
        CharSequence _serialize = im.serialize(_pojoMethod2jvmType);
        _builder.append(_serialize, "");
      } else {
        JvmType _type = f.getType();
        boolean _notEquals_1 = (!Objects.equal(_type, null));
        if (_notEquals_1) {
          JvmType _type_1 = f.getType();
          CharSequence _serialize_1 = im.serialize(_type_1);
          _builder.append(_serialize_1, "");
        }
      }
    }
    {
      JvmType _gtype = f.getGtype();
      boolean _notEquals_2 = (!Objects.equal(_gtype, null));
      if (_notEquals_2) {
        _builder.append("<");
        JvmType _gtype_1 = f.getGtype();
        CharSequence _serialize_2 = im.serialize(_gtype_1);
        _builder.append(_serialize_2, "");
        _builder.append(">");
      }
    }
    {
      PojoEntity _gref = f.getGref();
      boolean _notEquals_3 = (!Objects.equal(_gref, null));
      if (_notEquals_3) {
        _builder.append("<");
        PojoEntity _gref_1 = f.getGref();
        JvmType _pojoMethod2jvmType_1 = Utils.pojoMethod2jvmType(_gref_1);
        CharSequence _serialize_3 = im.serialize(_pojoMethod2jvmType_1);
        _builder.append(_serialize_3, "");
        _builder.append(">");
      }
    }
    {
      boolean _isArray = f.isArray();
      if (_isArray) {
        _builder.append("[]");
      }
    }
    return _builder;
  }
  
  public String completeName(final PojoEntity e) {
    String _package = Utils.getPackage(e);
    String _plus = (_package + ".");
    String _name = e.getName();
    return (_plus + _name);
  }
  
  public boolean isGenerics(final Implements impl) {
    EList<ImplementsExtendsDirective> _directives = impl.getDirectives();
    ImplementsExtendsDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = new Function1<ImplementsExtendsDirective, Boolean>() {
        public Boolean apply(final ImplementsExtendsDirective x) {
          return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveGenerics));
        }
      };
      _findFirst=IterableExtensions.<ImplementsExtendsDirective>findFirst(_directives, _function);
    }
    final ImplementsExtendsDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isRequired(final PojoProperty f) {
    EList<PojoPropertyDirective> _directives = f.getDirectives();
    PojoPropertyDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoPropertyDirective, Boolean> _function = new Function1<PojoPropertyDirective, Boolean>() {
        public Boolean apply(final PojoPropertyDirective x) {
          return Boolean.valueOf((x instanceof PojoPropertyDirectiveRequired));
        }
      };
      _findFirst=IterableExtensions.<PojoPropertyDirective>findFirst(_directives, _function);
    }
    final PojoPropertyDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public Integer getIndex(final PojoProperty f) {
    EList<PojoPropertyDirective> _directives = f.getDirectives();
    PojoPropertyDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoPropertyDirective, Boolean> _function = new Function1<PojoPropertyDirective, Boolean>() {
        public Boolean apply(final PojoPropertyDirective x) {
          return Boolean.valueOf((x instanceof PojoPropertyDirectiveIndex));
        }
      };
      _findFirst=IterableExtensions.<PojoPropertyDirective>findFirst(_directives, _function);
    }
    final PojoPropertyDirectiveIndex d = ((PojoPropertyDirectiveIndex) _findFirst);
    int _index = 0;
    if (d!=null) {
      _index=d.getIndex();
    }
    return Integer.valueOf(_index);
  }
  
  public String getUpdateColumn1(final PojoProperty f) {
    EList<PojoPropertyDirective> _directives = f.getDirectives();
    PojoPropertyDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoPropertyDirective, Boolean> _function = new Function1<PojoPropertyDirective, Boolean>() {
        public Boolean apply(final PojoPropertyDirective x) {
          return Boolean.valueOf((x instanceof PojoPropertyDirectiveUpdateCol));
        }
      };
      _findFirst=IterableExtensions.<PojoPropertyDirective>findFirst(_directives, _function);
    }
    final PojoPropertyDirectiveUpdateCol d = ((PojoPropertyDirectiveUpdateCol) _findFirst);
    String _updateColumn1 = null;
    if (d!=null) {
      _updateColumn1=d.getUpdateColumn1();
    }
    return _updateColumn1;
  }
  
  public String getUpdateColumn2(final PojoProperty f) {
    EList<PojoPropertyDirective> _directives = f.getDirectives();
    PojoPropertyDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoPropertyDirective, Boolean> _function = new Function1<PojoPropertyDirective, Boolean>() {
        public Boolean apply(final PojoPropertyDirective x) {
          return Boolean.valueOf((x instanceof PojoPropertyDirectiveUpdateCol));
        }
      };
      _findFirst=IterableExtensions.<PojoPropertyDirective>findFirst(_directives, _function);
    }
    final PojoPropertyDirectiveUpdateCol d = ((PojoPropertyDirectiveUpdateCol) _findFirst);
    String _updateColumn2 = null;
    if (d!=null) {
      _updateColumn2=d.getUpdateColumn2();
    }
    return _updateColumn2;
  }
  
  public String getCreateColumn1(final PojoProperty f) {
    EList<PojoPropertyDirective> _directives = f.getDirectives();
    PojoPropertyDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoPropertyDirective, Boolean> _function = new Function1<PojoPropertyDirective, Boolean>() {
        public Boolean apply(final PojoPropertyDirective x) {
          return Boolean.valueOf((x instanceof PojoPropertyDirectiveCreateCol));
        }
      };
      _findFirst=IterableExtensions.<PojoPropertyDirective>findFirst(_directives, _function);
    }
    final PojoPropertyDirectiveCreateCol d = ((PojoPropertyDirectiveCreateCol) _findFirst);
    String _createColumn1 = null;
    if (d!=null) {
      _createColumn1=d.getCreateColumn1();
    }
    return _createColumn1;
  }
  
  public String getCreateColumn2(final PojoProperty f) {
    EList<PojoPropertyDirective> _directives = f.getDirectives();
    PojoPropertyDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoPropertyDirective, Boolean> _function = new Function1<PojoPropertyDirective, Boolean>() {
        public Boolean apply(final PojoPropertyDirective x) {
          return Boolean.valueOf((x instanceof PojoPropertyDirectiveCreateCol));
        }
      };
      _findFirst=IterableExtensions.<PojoPropertyDirective>findFirst(_directives, _function);
    }
    final PojoPropertyDirectiveCreateCol d = ((PojoPropertyDirectiveCreateCol) _findFirst);
    String _createColumn2 = null;
    if (d!=null) {
      _createColumn2=d.getCreateColumn2();
    }
    return _createColumn2;
  }
  
  public boolean isPrimaryKey(final PojoProperty f) {
    EList<PojoPropertyDirective> _directives = f.getDirectives();
    PojoPropertyDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoPropertyDirective, Boolean> _function = new Function1<PojoPropertyDirective, Boolean>() {
        public Boolean apply(final PojoPropertyDirective x) {
          return Boolean.valueOf((x instanceof PojoPropertyDirectivePrimaryKey));
        }
      };
      _findFirst=IterableExtensions.<PojoPropertyDirective>findFirst(_directives, _function);
    }
    final PojoPropertyDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isOptLock(final PojoProperty f) {
    EList<PojoPropertyDirective> _directives = f.getDirectives();
    PojoPropertyDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoPropertyDirective, Boolean> _function = new Function1<PojoPropertyDirective, Boolean>() {
        public Boolean apply(final PojoPropertyDirective x) {
          return Boolean.valueOf((x instanceof PojoPropertyDirectiveVersion));
        }
      };
      _findFirst=IterableExtensions.<PojoPropertyDirective>findFirst(_directives, _function);
    }
    final PojoPropertyDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isList(final PojoProperty f) {
    JvmType _type = null;
    if (f!=null) {
      _type=f.getType();
    }
    String _simpleName = null;
    if (_type!=null) {
      _simpleName=_type.getSimpleName();
    }
    final String name = _simpleName;
    return Objects.equal("List", name);
  }
  
  public boolean isNative(final PojoProperty f) {
    boolean _xifexpression = false;
    boolean _and = false;
    JvmType _type = f.getType();
    boolean _notEquals = (!Objects.equal(_type, null));
    if (!_notEquals) {
      _and = false;
    } else {
      JvmType _type_1 = f.getType();
      _and = (_type_1 instanceof JvmPrimitiveType);
    }
    if (_and) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isToInit(final PojoProperty f) {
    EList<PojoPropertyDirective> _directives = f.getDirectives();
    PojoPropertyDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoPropertyDirective, Boolean> _function = new Function1<PojoPropertyDirective, Boolean>() {
        public Boolean apply(final PojoPropertyDirective x) {
          return Boolean.valueOf((x instanceof PojoPropertyDirectiveToInit));
        }
      };
      _findFirst=IterableExtensions.<PojoPropertyDirective>findFirst(_directives, _function);
    }
    final PojoPropertyDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isEnumInit(final PojoProperty f) {
    EList<PojoPropertyDirective> _directives = f.getDirectives();
    PojoPropertyDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoPropertyDirective, Boolean> _function = new Function1<PojoPropertyDirective, Boolean>() {
        public Boolean apply(final PojoPropertyDirective x) {
          return Boolean.valueOf((x instanceof PojoPropertyDirectiveEnumInit));
        }
      };
      _findFirst=IterableExtensions.<PojoPropertyDirective>findFirst(_directives, _function);
    }
    final PojoPropertyDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isIsDef(final PojoProperty f) {
    EList<PojoPropertyDirective> _directives = f.getDirectives();
    PojoPropertyDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoPropertyDirective, Boolean> _function = new Function1<PojoPropertyDirective, Boolean>() {
        public Boolean apply(final PojoPropertyDirective x) {
          return Boolean.valueOf((x instanceof PojoPropertyDirectiveIsDef));
        }
      };
      _findFirst=IterableExtensions.<PojoPropertyDirective>findFirst(_directives, _function);
    }
    final PojoPropertyDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isEnumDef(final PojoProperty f) {
    EList<PojoPropertyDirective> _directives = f.getDirectives();
    PojoPropertyDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoPropertyDirective, Boolean> _function = new Function1<PojoPropertyDirective, Boolean>() {
        public Boolean apply(final PojoPropertyDirective x) {
          return Boolean.valueOf((x instanceof PojoPropertyDirectiveEnumDef));
        }
      };
      _findFirst=IterableExtensions.<PojoPropertyDirective>findFirst(_directives, _function);
    }
    final PojoPropertyDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isAbstract(final PojoEntity pojo) {
    EList<PojoEntityModifier1> _modifiers1 = pojo.getModifiers1();
    PojoEntityModifier1 _findFirst = null;
    if (_modifiers1!=null) {
      final Function1<PojoEntityModifier1, Boolean> _function = new Function1<PojoEntityModifier1, Boolean>() {
        public Boolean apply(final PojoEntityModifier1 x) {
          return Boolean.valueOf(x.isAbstract());
        }
      };
      _findFirst=IterableExtensions.<PojoEntityModifier1>findFirst(_modifiers1, _function);
    }
    final PojoEntityModifier1 m = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(m, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean hasOperators(final PojoEntity pojo) {
    EList<PojoDirective> _directives = pojo.getDirectives();
    PojoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoDirective, Boolean> _function = new Function1<PojoDirective, Boolean>() {
        public Boolean apply(final PojoDirective x) {
          return Boolean.valueOf((x instanceof PojoDirectiveOperators));
        }
      };
      _findFirst=IterableExtensions.<PojoDirective>findFirst(_directives, _function);
    }
    final PojoDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public String getOperatorsSuffix(final PojoEntity pojo) {
    EList<PojoDirective> _directives = pojo.getDirectives();
    PojoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoDirective, Boolean> _function = new Function1<PojoDirective, Boolean>() {
        public Boolean apply(final PojoDirective x) {
          return Boolean.valueOf((x instanceof PojoDirectiveOperators));
        }
      };
      _findFirst=IterableExtensions.<PojoDirective>findFirst(_directives, _function);
    }
    final PojoDirectiveOperators d = ((PojoDirectiveOperators) _findFirst);
    String _operatorsSuffix = null;
    if (d!=null) {
      _operatorsSuffix=d.getOperatorsSuffix();
    }
    return _operatorsSuffix;
  }
  
  public Integer getSernum(final PojoEntity pojo) {
    EList<PojoDirective> _directives = pojo.getDirectives();
    PojoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoDirective, Boolean> _function = new Function1<PojoDirective, Boolean>() {
        public Boolean apply(final PojoDirective x) {
          return Boolean.valueOf((x instanceof PojoDirectiveSerializable));
        }
      };
      _findFirst=IterableExtensions.<PojoDirective>findFirst(_directives, _function);
    }
    final PojoDirectiveSerializable d = ((PojoDirectiveSerializable) _findFirst);
    int _sernum = 0;
    if (d!=null) {
      _sernum=d.getSernum();
    }
    return Integer.valueOf(_sernum);
  }
  
  public String getDiscriminator(final PojoEntity pojo) {
    EList<PojoDirective> _directives = null;
    if (pojo!=null) {
      _directives=pojo.getDirectives();
    }
    PojoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoDirective, Boolean> _function = new Function1<PojoDirective, Boolean>() {
        public Boolean apply(final PojoDirective x) {
          return Boolean.valueOf((x instanceof PojoDirectiveDiscriminator));
        }
      };
      _findFirst=IterableExtensions.<PojoDirective>findFirst(_directives, _function);
    }
    final PojoDirectiveDiscriminator d = ((PojoDirectiveDiscriminator) _findFirst);
    String _discriminator = null;
    if (d!=null) {
      _discriminator=d.getDiscriminator();
    }
    return _discriminator;
  }
  
  public boolean isFinal(final PojoEntity pojo) {
    EList<PojoEntityModifier1> _modifiers1 = pojo.getModifiers1();
    PojoEntityModifier1 _findFirst = null;
    if (_modifiers1!=null) {
      final Function1<PojoEntityModifier1, Boolean> _function = new Function1<PojoEntityModifier1, Boolean>() {
        public Boolean apply(final PojoEntityModifier1 x) {
          return Boolean.valueOf(x.isFinal());
        }
      };
      _findFirst=IterableExtensions.<PojoEntityModifier1>findFirst(_modifiers1, _function);
    }
    final PojoEntityModifier1 m = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(m, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public PojoEntity getSuperType(final PojoEntity pojo) {
    EList<PojoEntityModifier2> _modifiers2 = null;
    if (pojo!=null) {
      _modifiers2=pojo.getModifiers2();
    }
    PojoEntityModifier2 _findFirst = null;
    if (_modifiers2!=null) {
      final Function1<PojoEntityModifier2, Boolean> _function = new Function1<PojoEntityModifier2, Boolean>() {
        public Boolean apply(final PojoEntityModifier2 x) {
          PojoEntity _superType = x.getSuperType();
          return Boolean.valueOf((!Objects.equal(_superType, null)));
        }
      };
      _findFirst=IterableExtensions.<PojoEntityModifier2>findFirst(_modifiers2, _function);
    }
    final PojoEntityModifier2 m = _findFirst;
    PojoEntity _superType = null;
    if (m!=null) {
      _superType=m.getSuperType();
    }
    return _superType;
  }
  
  public PojoEntity getParent(final PojoEntity pojo) {
    String _discriminator = this.getDiscriminator(pojo);
    boolean _notEquals = (!Objects.equal(_discriminator, null));
    if (_notEquals) {
      return null;
    }
    return this.getSuperType(pojo);
  }
  
  public PojoProperty getOptLock(final PojoEntity pojo) {
    EList<PojoAnnotatedProperty> _features = null;
    if (pojo!=null) {
      _features=pojo.getFeatures();
    }
    PojoAnnotatedProperty _findFirst = null;
    if (_features!=null) {
      final Function1<PojoAnnotatedProperty, Boolean> _function = new Function1<PojoAnnotatedProperty, Boolean>() {
        public Boolean apply(final PojoAnnotatedProperty x) {
          PojoProperty _feature = x.getFeature();
          return Boolean.valueOf(ProcessorGeneratorUtils.this.isOptLock(_feature));
        }
      };
      _findFirst=IterableExtensions.<PojoAnnotatedProperty>findFirst(_features, _function);
    }
    PojoProperty _feature = null;
    if (_findFirst!=null) {
      _feature=_findFirst.getFeature();
    }
    final PojoProperty fea = _feature;
    PojoProperty _elvis = null;
    if (fea != null) {
      _elvis = fea;
    } else {
      PojoEntity _superType = null;
      if (pojo!=null) {
        _superType=this.getSuperType(pojo);
      }
      PojoProperty _optLock = null;
      if (_superType!=null) {
        _optLock=this.getOptLock(_superType);
      }
      _elvis = _optLock;
    }
    return _elvis;
  }
  
  public Map<Integer, List<PojoProperty>> getIndex(final PojoEntity pojo) {
    final Map<Integer, List<PojoProperty>> result = new TreeMap<Integer, List<PojoProperty>>();
    EList<PojoDirective> _directives = null;
    if (pojo!=null) {
      _directives=pojo.getDirectives();
    }
    final Function1<PojoDirective, Boolean> _function = new Function1<PojoDirective, Boolean>() {
      public Boolean apply(final PojoDirective x) {
        return Boolean.valueOf((x instanceof PojoDirectiveIndex));
      }
    };
    Iterable<PojoDirective> _filter = IterableExtensions.<PojoDirective>filter(_directives, _function);
    final Procedure1<PojoDirective> _function_1 = new Procedure1<PojoDirective>() {
      public void apply(final PojoDirective it) {
        final PojoDirectiveIndex d = ((PojoDirectiveIndex) it);
        int _index = d.getIndex();
        DirectiveProperties _proplist = d.getProplist();
        EList<PojoProperty> _features = _proplist.getFeatures();
        result.put(Integer.valueOf(_index), _features);
      }
    };
    IterableExtensions.<PojoDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<PojoProperty> toStringFeatures(final PojoEntity pojo) {
    final List<PojoProperty> result = CollectionLiterals.<PojoProperty>newArrayList();
    EList<PojoDirective> _directives = null;
    if (pojo!=null) {
      _directives=pojo.getDirectives();
    }
    final Function1<PojoDirective, Boolean> _function = new Function1<PojoDirective, Boolean>() {
      public Boolean apply(final PojoDirective x) {
        return Boolean.valueOf((x instanceof PojoDirectiveToString));
      }
    };
    Iterable<PojoDirective> _filter = IterableExtensions.<PojoDirective>filter(_directives, _function);
    final Procedure1<PojoDirective> _function_1 = new Procedure1<PojoDirective>() {
      public void apply(final PojoDirective it) {
        final PojoDirectiveToString d = ((PojoDirectiveToString) it);
        DirectiveProperties _proplist = d.getProplist();
        EList<PojoProperty> _features = _proplist.getFeatures();
        result.addAll(_features);
      }
    };
    IterableExtensions.<PojoDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<PojoProperty> equalsFeatures(final PojoEntity pojo) {
    final List<PojoProperty> result = CollectionLiterals.<PojoProperty>newArrayList();
    EList<PojoDirective> _directives = null;
    if (pojo!=null) {
      _directives=pojo.getDirectives();
    }
    final Function1<PojoDirective, Boolean> _function = new Function1<PojoDirective, Boolean>() {
      public Boolean apply(final PojoDirective x) {
        return Boolean.valueOf((x instanceof PojoDirectiveEquals));
      }
    };
    Iterable<PojoDirective> _filter = IterableExtensions.<PojoDirective>filter(_directives, _function);
    final Procedure1<PojoDirective> _function_1 = new Procedure1<PojoDirective>() {
      public void apply(final PojoDirective it) {
        final PojoDirectiveEquals d = ((PojoDirectiveEquals) it);
        DirectiveProperties _proplist = d.getProplist();
        EList<PojoProperty> _features = _proplist.getFeatures();
        result.addAll(_features);
      }
    };
    IterableExtensions.<PojoDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<PojoProperty> hashCodeFeatures(final PojoEntity pojo) {
    final List<PojoProperty> result = CollectionLiterals.<PojoProperty>newArrayList();
    EList<PojoDirective> _directives = null;
    if (pojo!=null) {
      _directives=pojo.getDirectives();
    }
    final Function1<PojoDirective, Boolean> _function = new Function1<PojoDirective, Boolean>() {
      public Boolean apply(final PojoDirective x) {
        return Boolean.valueOf((x instanceof PojoDirectiveHashCode));
      }
    };
    Iterable<PojoDirective> _filter = IterableExtensions.<PojoDirective>filter(_directives, _function);
    final Procedure1<PojoDirective> _function_1 = new Procedure1<PojoDirective>() {
      public void apply(final PojoDirective it) {
        final PojoDirectiveHashCode d = ((PojoDirectiveHashCode) it);
        DirectiveProperties _proplist = d.getProplist();
        EList<PojoProperty> _features = _proplist.getFeatures();
        result.addAll(_features);
      }
    };
    IterableExtensions.<PojoDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<PojoProperty> requiredFeatures(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<PojoProperty>newArrayList();
    }
    EList<PojoAnnotatedProperty> _features = pojo.getFeatures();
    final Function1<PojoAnnotatedProperty, Boolean> _function = new Function1<PojoAnnotatedProperty, Boolean>() {
      public Boolean apply(final PojoAnnotatedProperty x) {
        PojoProperty _feature = x.getFeature();
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isRequired(_feature));
      }
    };
    Iterable<PojoAnnotatedProperty> _filter = IterableExtensions.<PojoAnnotatedProperty>filter(_features, _function);
    final Function1<PojoAnnotatedProperty, PojoProperty> _function_1 = new Function1<PojoAnnotatedProperty, PojoProperty>() {
      public PojoProperty apply(final PojoAnnotatedProperty it) {
        return it.getFeature();
      }
    };
    Iterable<PojoProperty> _map = IterableExtensions.<PojoAnnotatedProperty, PojoProperty>map(_filter, _function_1);
    final List<PojoProperty> features = IterableExtensions.<PojoProperty>toList(_map);
    final PojoEntity se = this.getSuperType(pojo);
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      return features;
    }
    List<PojoProperty> _requiredFeatures = this.requiredFeatures(se);
    features.addAll(_requiredFeatures);
    return features;
  }
  
  public List<PojoProperty> attributes(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<PojoProperty>newArrayList();
    }
    EList<PojoAnnotatedProperty> _features = pojo.getFeatures();
    final Function1<PojoAnnotatedProperty, PojoProperty> _function = new Function1<PojoAnnotatedProperty, PojoProperty>() {
      public PojoProperty apply(final PojoAnnotatedProperty it) {
        return it.getFeature();
      }
    };
    List<PojoProperty> _map = ListExtensions.<PojoAnnotatedProperty, PojoProperty>map(_features, _function);
    final List<PojoProperty> features = IterableExtensions.<PojoProperty>toList(_map);
    final PojoEntity se = this.getSuperType(pojo);
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      return features;
    }
    List<PojoProperty> _attributes = this.attributes(se);
    features.addAll(_attributes);
    return features;
  }
  
  public Map<String, PojoProperty> attributesAsMap(final PojoEntity pojo) {
    final TreeMap<String, PojoProperty> result = new TreeMap<String, PojoProperty>();
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return result;
    }
    EList<PojoAnnotatedProperty> _features = pojo.getFeatures();
    final Function1<PojoAnnotatedProperty, PojoProperty> _function = new Function1<PojoAnnotatedProperty, PojoProperty>() {
      public PojoProperty apply(final PojoAnnotatedProperty it) {
        return it.getFeature();
      }
    };
    List<PojoProperty> _map = ListExtensions.<PojoAnnotatedProperty, PojoProperty>map(_features, _function);
    final Procedure1<PojoProperty> _function_1 = new Procedure1<PojoProperty>() {
      public void apply(final PojoProperty it) {
        String _name = it.getName();
        result.put(_name, it);
      }
    };
    IterableExtensions.<PojoProperty>forEach(_map, _function_1);
    final PojoEntity se = this.getSuperType(pojo);
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      return result;
    }
    Map<String, PojoProperty> _attributesAsMap = this.attributesAsMap(se);
    result.putAll(_attributesAsMap);
    return result;
  }
  
  public List<PojoProperty> toInitFeatures(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<PojoProperty>newArrayList();
    }
    EList<PojoAnnotatedProperty> _features = pojo.getFeatures();
    final Function1<PojoAnnotatedProperty, Boolean> _function = new Function1<PojoAnnotatedProperty, Boolean>() {
      public Boolean apply(final PojoAnnotatedProperty x) {
        PojoProperty _feature = x.getFeature();
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isToInit(_feature));
      }
    };
    Iterable<PojoAnnotatedProperty> _filter = IterableExtensions.<PojoAnnotatedProperty>filter(_features, _function);
    final Function1<PojoAnnotatedProperty, PojoProperty> _function_1 = new Function1<PojoAnnotatedProperty, PojoProperty>() {
      public PojoProperty apply(final PojoAnnotatedProperty it) {
        return it.getFeature();
      }
    };
    Iterable<PojoProperty> _map = IterableExtensions.<PojoAnnotatedProperty, PojoProperty>map(_filter, _function_1);
    final List<PojoProperty> features = IterableExtensions.<PojoProperty>toList(_map);
    final PojoEntity se = this.getSuperType(pojo);
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      return features;
    }
    List<PojoProperty> _initFeatures = this.toInitFeatures(se);
    features.addAll(_initFeatures);
    return features;
  }
  
  public List<PojoProperty> enumInitFeatures(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<PojoProperty>newArrayList();
    }
    EList<PojoAnnotatedProperty> _features = pojo.getFeatures();
    final Function1<PojoAnnotatedProperty, Boolean> _function = new Function1<PojoAnnotatedProperty, Boolean>() {
      public Boolean apply(final PojoAnnotatedProperty x) {
        PojoProperty _feature = x.getFeature();
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isEnumInit(_feature));
      }
    };
    Iterable<PojoAnnotatedProperty> _filter = IterableExtensions.<PojoAnnotatedProperty>filter(_features, _function);
    final Function1<PojoAnnotatedProperty, PojoProperty> _function_1 = new Function1<PojoAnnotatedProperty, PojoProperty>() {
      public PojoProperty apply(final PojoAnnotatedProperty it) {
        return it.getFeature();
      }
    };
    Iterable<PojoProperty> _map = IterableExtensions.<PojoAnnotatedProperty, PojoProperty>map(_filter, _function_1);
    final List<PojoProperty> features = IterableExtensions.<PojoProperty>toList(_map);
    final PojoEntity se = this.getSuperType(pojo);
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      return features;
    }
    List<PojoProperty> _enumInitFeatures = this.enumInitFeatures(se);
    features.addAll(_enumInitFeatures);
    return features;
  }
  
  public List<PojoProperty> isDefFeatures(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<PojoProperty>newArrayList();
    }
    EList<PojoAnnotatedProperty> _features = pojo.getFeatures();
    final Function1<PojoAnnotatedProperty, Boolean> _function = new Function1<PojoAnnotatedProperty, Boolean>() {
      public Boolean apply(final PojoAnnotatedProperty x) {
        PojoProperty _feature = x.getFeature();
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isIsDef(_feature));
      }
    };
    Iterable<PojoAnnotatedProperty> _filter = IterableExtensions.<PojoAnnotatedProperty>filter(_features, _function);
    final Function1<PojoAnnotatedProperty, PojoProperty> _function_1 = new Function1<PojoAnnotatedProperty, PojoProperty>() {
      public PojoProperty apply(final PojoAnnotatedProperty it) {
        return it.getFeature();
      }
    };
    Iterable<PojoProperty> _map = IterableExtensions.<PojoAnnotatedProperty, PojoProperty>map(_filter, _function_1);
    final List<PojoProperty> features = IterableExtensions.<PojoProperty>toList(_map);
    final PojoEntity se = this.getSuperType(pojo);
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      return features;
    }
    List<PojoProperty> _isDefFeatures = this.isDefFeatures(se);
    features.addAll(_isDefFeatures);
    return features;
  }
  
  public List<PojoProperty> enumDefFeatures(final PojoEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<PojoProperty>newArrayList();
    }
    EList<PojoAnnotatedProperty> _features = pojo.getFeatures();
    final Function1<PojoAnnotatedProperty, Boolean> _function = new Function1<PojoAnnotatedProperty, Boolean>() {
      public Boolean apply(final PojoAnnotatedProperty x) {
        PojoProperty _feature = x.getFeature();
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isEnumDef(_feature));
      }
    };
    Iterable<PojoAnnotatedProperty> _filter = IterableExtensions.<PojoAnnotatedProperty>filter(_features, _function);
    final Function1<PojoAnnotatedProperty, PojoProperty> _function_1 = new Function1<PojoAnnotatedProperty, PojoProperty>() {
      public PojoProperty apply(final PojoAnnotatedProperty it) {
        return it.getFeature();
      }
    };
    Iterable<PojoProperty> _map = IterableExtensions.<PojoAnnotatedProperty, PojoProperty>map(_filter, _function_1);
    final List<PojoProperty> features = IterableExtensions.<PojoProperty>toList(_map);
    final PojoEntity se = this.getSuperType(pojo);
    boolean _equals_1 = Objects.equal(se, null);
    if (_equals_1) {
      return features;
    }
    List<PojoProperty> _enumDefFeatures = this.enumDefFeatures(se);
    features.addAll(_enumDefFeatures);
    return features;
  }
  
  public boolean hasIsDef(final PojoEntity pojo) {
    EList<PojoAnnotatedProperty> _features = pojo.getFeatures();
    final Function1<PojoAnnotatedProperty, Boolean> _function = new Function1<PojoAnnotatedProperty, Boolean>() {
      public Boolean apply(final PojoAnnotatedProperty f) {
        boolean _or = false;
        PojoProperty _feature = f.getFeature();
        boolean _isIsDef = ProcessorGeneratorUtils.this.isIsDef(_feature);
        if (_isIsDef) {
          _or = true;
        } else {
          PojoProperty _feature_1 = f.getFeature();
          boolean _isEnumDef = ProcessorGeneratorUtils.this.isEnumDef(_feature_1);
          _or = _isEnumDef;
        }
        return Boolean.valueOf(_or);
      }
    };
    final PojoAnnotatedProperty result = IterableExtensions.<PojoAnnotatedProperty>findFirst(_features, _function);
    boolean _notEquals = (!Objects.equal(result, null));
    if (_notEquals) {
      return true;
    }
    final PojoEntity se = this.getSuperType(pojo);
    boolean _equals = Objects.equal(se, null);
    if (_equals) {
      return false;
    }
    return this.hasIsDef(se);
  }
  
  public boolean hasToInit(final PojoEntity pojo) {
    EList<PojoAnnotatedProperty> _features = pojo.getFeatures();
    final Function1<PojoAnnotatedProperty, Boolean> _function = new Function1<PojoAnnotatedProperty, Boolean>() {
      public Boolean apply(final PojoAnnotatedProperty f) {
        boolean _or = false;
        PojoProperty _feature = f.getFeature();
        boolean _isToInit = ProcessorGeneratorUtils.this.isToInit(_feature);
        if (_isToInit) {
          _or = true;
        } else {
          PojoProperty _feature_1 = f.getFeature();
          boolean _isEnumInit = ProcessorGeneratorUtils.this.isEnumInit(_feature_1);
          _or = _isEnumInit;
        }
        return Boolean.valueOf(_or);
      }
    };
    final PojoAnnotatedProperty result = IterableExtensions.<PojoAnnotatedProperty>findFirst(_features, _function);
    boolean _notEquals = (!Objects.equal(result, null));
    if (_notEquals) {
      return true;
    }
    final PojoEntity se = this.getSuperType(pojo);
    boolean _equals = Objects.equal(se, null);
    if (_equals) {
      return false;
    }
    return this.hasIsDef(se);
  }
  
  public PojoProperty getAttribute(final PojoEntity pojo, final String name) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return null;
    }
    EList<PojoAnnotatedProperty> _features = pojo.getFeatures();
    final Function1<PojoAnnotatedProperty, Boolean> _function = new Function1<PojoAnnotatedProperty, Boolean>() {
      public Boolean apply(final PojoAnnotatedProperty x) {
        PojoProperty _feature = x.getFeature();
        String _name = _feature.getName();
        return Boolean.valueOf(Objects.equal(_name, name));
      }
    };
    final PojoAnnotatedProperty feature = IterableExtensions.<PojoAnnotatedProperty>findFirst(_features, _function);
    PojoProperty _elvis = null;
    PojoProperty _feature = null;
    if (feature!=null) {
      _feature=feature.getFeature();
    }
    if (_feature != null) {
      _elvis = _feature;
    } else {
      PojoEntity _superType = this.getSuperType(pojo);
      PojoProperty _attribute = null;
      if (_superType!=null) {
        _attribute=this.getAttribute(_superType, name);
      }
      _elvis = _attribute;
    }
    return _elvis;
  }
  
  public String getSuffix(final Entity pojo) {
    final org.sqlproc.model.processorModel.Package packageDeclaration = EcoreUtil2.<org.sqlproc.model.processorModel.Package>getContainerOfType(pojo, org.sqlproc.model.processorModel.Package.class);
    return Utils.getSuffix(packageDeclaration);
  }
  
  public boolean isFinal(final EnumEntity enum_) {
    EList<EnumEntityModifier1> _modifiers1 = enum_.getModifiers1();
    EnumEntityModifier1 _findFirst = null;
    if (_modifiers1!=null) {
      final Function1<EnumEntityModifier1, Boolean> _function = new Function1<EnumEntityModifier1, Boolean>() {
        public Boolean apply(final EnumEntityModifier1 x) {
          return Boolean.valueOf(x.isFinal());
        }
      };
      _findFirst=IterableExtensions.<EnumEntityModifier1>findFirst(_modifiers1, _function);
    }
    final EnumEntityModifier1 m = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(m, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public PojoEntity getSuperType(final EnumEntity enum_) {
    EList<EnumEntityModifier2> _modifiers2 = enum_.getModifiers2();
    EnumEntityModifier2 _findFirst = null;
    if (_modifiers2!=null) {
      final Function1<EnumEntityModifier2, Boolean> _function = new Function1<EnumEntityModifier2, Boolean>() {
        public Boolean apply(final EnumEntityModifier2 x) {
          PojoEntity _superType = x.getSuperType();
          return Boolean.valueOf((!Objects.equal(_superType, null)));
        }
      };
      _findFirst=IterableExtensions.<EnumEntityModifier2>findFirst(_modifiers2, _function);
    }
    final EnumEntityModifier2 m = _findFirst;
    PojoEntity _superType = null;
    if (m!=null) {
      _superType=m.getSuperType();
    }
    return _superType;
  }
  
  public Integer getSernum(final EnumEntity enum_) {
    EList<PojoDirective> _directives = enum_.getDirectives();
    PojoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<PojoDirective, Boolean> _function = new Function1<PojoDirective, Boolean>() {
        public Boolean apply(final PojoDirective x) {
          return Boolean.valueOf((x instanceof PojoDirectiveSerializable));
        }
      };
      _findFirst=IterableExtensions.<PojoDirective>findFirst(_directives, _function);
    }
    final PojoDirectiveSerializable d = ((PojoDirectiveSerializable) _findFirst);
    int _sernum = 0;
    if (d!=null) {
      _sernum=d.getSernum();
    }
    return Integer.valueOf(_sernum);
  }
  
  public boolean isFinal(final PojoDao dao) {
    EList<PojoEntityModifier1> _modifiers1 = dao.getModifiers1();
    PojoEntityModifier1 _findFirst = null;
    if (_modifiers1!=null) {
      final Function1<PojoEntityModifier1, Boolean> _function = new Function1<PojoEntityModifier1, Boolean>() {
        public Boolean apply(final PojoEntityModifier1 x) {
          return Boolean.valueOf(x.isFinal());
        }
      };
      _findFirst=IterableExtensions.<PojoEntityModifier1>findFirst(_modifiers1, _function);
    }
    final PojoEntityModifier1 m = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(m, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isAbstract(final PojoDao dao) {
    EList<PojoEntityModifier1> _modifiers1 = dao.getModifiers1();
    PojoEntityModifier1 _findFirst = null;
    if (_modifiers1!=null) {
      final Function1<PojoEntityModifier1, Boolean> _function = new Function1<PojoEntityModifier1, Boolean>() {
        public Boolean apply(final PojoEntityModifier1 x) {
          return Boolean.valueOf(x.isAbstract());
        }
      };
      _findFirst=IterableExtensions.<PojoEntityModifier1>findFirst(_modifiers1, _function);
    }
    final PojoEntityModifier1 m = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(m, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public Integer getSernum(final PojoDao dao) {
    EList<DaoDirective> _directives = dao.getDirectives();
    DaoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<DaoDirective, Boolean> _function = new Function1<DaoDirective, Boolean>() {
        public Boolean apply(final DaoDirective x) {
          return Boolean.valueOf((x instanceof PojoDirectiveSerializable));
        }
      };
      _findFirst=IterableExtensions.<DaoDirective>findFirst(_directives, _function);
    }
    final PojoDirectiveSerializable d = ((PojoDirectiveSerializable) _findFirst);
    int _sernum = 0;
    if (d!=null) {
      _sernum=d.getSernum();
    }
    return Integer.valueOf(_sernum);
  }
  
  public PojoDao getSuperType(final PojoDao dao) {
    EList<PojoDaoModifier> _modifiers2 = dao.getModifiers2();
    PojoDaoModifier _findFirst = null;
    if (_modifiers2!=null) {
      final Function1<PojoDaoModifier, Boolean> _function = new Function1<PojoDaoModifier, Boolean>() {
        public Boolean apply(final PojoDaoModifier x) {
          PojoDao _superType = x.getSuperType();
          return Boolean.valueOf((!Objects.equal(_superType, null)));
        }
      };
      _findFirst=IterableExtensions.<PojoDaoModifier>findFirst(_modifiers2, _function);
    }
    final PojoDaoModifier m = _findFirst;
    PojoDao _superType = null;
    if (m!=null) {
      _superType=m.getSuperType();
    }
    return _superType;
  }
  
  public Map<String, Map<String, PojoType>> getMoreResultClasses(final PojoDao dao) {
    final Map<String, Map<String, PojoType>> result = new TreeMap<String, Map<String, PojoType>>();
    EList<DaoDirective> _directives = null;
    if (dao!=null) {
      _directives=dao.getDirectives();
    }
    final Function1<DaoDirective, Boolean> _function = new Function1<DaoDirective, Boolean>() {
      public Boolean apply(final DaoDirective x) {
        return Boolean.valueOf((x instanceof DaoDirectiveDiscriminator));
      }
    };
    Iterable<DaoDirective> _filter = IterableExtensions.<DaoDirective>filter(_directives, _function);
    final Procedure1<DaoDirective> _function_1 = new Procedure1<DaoDirective>() {
      public void apply(final DaoDirective it) {
        final DaoDirectiveDiscriminator d = ((DaoDirectiveDiscriminator) it);
        final Map<String, PojoType> map = new TreeMap<String, PojoType>();
        EList<DescendantAssignment> _descendants = d.getDescendants();
        final Procedure1<DescendantAssignment> _function = new Procedure1<DescendantAssignment>() {
          public void apply(final DescendantAssignment dd) {
            String _value = Utils.getValue(dd);
            PojoType _descendant = dd.getDescendant();
            map.put(_value, _descendant);
          }
        };
        IterableExtensions.<DescendantAssignment>forEach(_descendants, _function);
        PojoProperty _ancestor = d.getAncestor();
        String _name = _ancestor.getName();
        result.put(_name, map);
      }
    };
    IterableExtensions.<DaoDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public DaoDirective getPojoDirective(final PojoDao dao) {
    EList<DaoDirective> _directives = null;
    if (dao!=null) {
      _directives=dao.getDirectives();
    }
    final Function1<DaoDirective, Boolean> _function = new Function1<DaoDirective, Boolean>() {
      public Boolean apply(final DaoDirective x) {
        boolean _or = false;
        if (((x instanceof DaoDirectiveCrud) || 
          (x instanceof DaoDirectiveQuery))) {
          _or = true;
        } else {
          _or = (x instanceof FunProcDirective);
        }
        return Boolean.valueOf(_or);
      }
    };
    return IterableExtensions.<DaoDirective>findFirst(_directives, _function);
  }
  
  public String getFunProcName(final PojoDao dao) {
    String pojoName = dao.getName();
    boolean _endsWith = pojoName.endsWith("Dao");
    if (_endsWith) {
      int _length = pojoName.length();
      int _minus = (_length - 3);
      String _substring = pojoName.substring(0, _minus);
      pojoName = _substring;
    }
    return StringExtensions.toFirstLower(pojoName);
  }
  
  public PojoEntity getPojoImplicit(final PojoDao dao) {
    String pojoName = dao.getName();
    boolean _endsWith = pojoName.endsWith("Dao");
    if (_endsWith) {
      int _length = pojoName.length();
      int _minus = (_length - 3);
      String _substring = pojoName.substring(0, _minus);
      pojoName = _substring;
    }
    final Artifacts artifacts = EcoreUtil2.<Artifacts>getContainerOfType(dao, Artifacts.class);
    IScope _scope = this.scopeProvider.getScope(artifacts, ProcessorModelPackage.Literals.ARTIFACTS__POJOS);
    return Utils.findEntity(this.qualifiedNameConverter, artifacts, _scope, pojoName);
  }
  
  protected PojoEntity _getPojo(final PojoDao dao, final DaoDirectiveCrud pojoDirective) {
    PojoEntity _elvis = null;
    PojoType _pojo = null;
    if (pojoDirective!=null) {
      _pojo=pojoDirective.getPojo();
    }
    PojoEntity _ref = null;
    if (_pojo!=null) {
      _ref=_pojo.getRef();
    }
    if (_ref != null) {
      _elvis = _ref;
    } else {
      PojoEntity _pojoImplicit = this.getPojoImplicit(dao);
      _elvis = _pojoImplicit;
    }
    return _elvis;
  }
  
  protected PojoEntity _getPojo(final PojoDao dao, final DaoDirectiveQuery pojoDirective) {
    PojoEntity _elvis = null;
    PojoType _pojo = null;
    if (pojoDirective!=null) {
      _pojo=pojoDirective.getPojo();
    }
    PojoEntity _ref = null;
    if (_pojo!=null) {
      _ref=_pojo.getRef();
    }
    if (_ref != null) {
      _elvis = _ref;
    } else {
      PojoEntity _pojoImplicit = this.getPojoImplicit(dao);
      _elvis = _pojoImplicit;
    }
    return _elvis;
  }
  
  protected PojoEntity _getPojo(final PojoDao dao, final FunProcDirective pojoDirective) {
    DaoDirectiveParameters _paramlist = null;
    if (pojoDirective!=null) {
      _paramlist=pojoDirective.getParamlist();
    }
    EList<PojoType> _ins = null;
    if (_paramlist!=null) {
      _ins=_paramlist.getIns();
    }
    final List<PojoType> list = _ins;
    boolean _or = false;
    boolean _or_1 = false;
    boolean _equals = Objects.equal(list, null);
    if (_equals) {
      _or_1 = true;
    } else {
      boolean _isEmpty = list.isEmpty();
      _or_1 = _isEmpty;
    }
    if (_or_1) {
      _or = true;
    } else {
      PojoType _head = IterableExtensions.<PojoType>head(list);
      PojoEntity _ref = _head.getRef();
      boolean _equals_1 = Objects.equal(_ref, null);
      _or = _equals_1;
    }
    if (_or) {
      return this.getPojoImplicit(dao);
    }
    PojoType _head_1 = IterableExtensions.<PojoType>head(list);
    return _head_1.getRef();
  }
  
  public PojoEntity getPojo(final PojoDao dao) {
    DaoDirective _pojoDirective = null;
    if (dao!=null) {
      _pojoDirective=this.getPojoDirective(dao);
    }
    final DaoDirective pojoDirective = _pojoDirective;
    PojoEntity _pojo = null;
    if (dao!=null) {
      _pojo=this.getPojo(dao, pojoDirective);
    }
    return _pojo;
  }
  
  public String getDaoImplements(final PojoDao dao, final Implements impl) {
    final StringBuilder sb = new StringBuilder();
    JvmType _implements = impl.getImplements();
    String _simpleName = _implements.getSimpleName();
    sb.append(_simpleName);
    boolean _isGenerics = this.isGenerics(impl);
    if (_isGenerics) {
      final PojoEntity pojo = this.getPojo(dao);
      boolean _notEquals = (!Objects.equal(pojo, null));
      if (_notEquals) {
        StringBuilder _append = sb.append("<");
        String _name = pojo.getName();
        StringBuilder _append_1 = _append.append(_name);
        _append_1.append(">");
      }
    }
    return sb.toString();
  }
  
  public boolean isCRUD(final PojoDao dao) {
    EList<DaoDirective> _directives = dao.getDirectives();
    DaoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<DaoDirective, Boolean> _function = new Function1<DaoDirective, Boolean>() {
        public Boolean apply(final DaoDirective x) {
          return Boolean.valueOf((x instanceof DaoDirectiveCrud));
        }
      };
      _findFirst=IterableExtensions.<DaoDirective>findFirst(_directives, _function);
    }
    final DaoDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean isQuery(final PojoDao dao) {
    EList<DaoDirective> _directives = dao.getDirectives();
    DaoDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<DaoDirective, Boolean> _function = new Function1<DaoDirective, Boolean>() {
        public Boolean apply(final DaoDirective x) {
          return Boolean.valueOf((x instanceof DaoDirectiveQuery));
        }
      };
      _findFirst=IterableExtensions.<DaoDirective>findFirst(_directives, _function);
    }
    final DaoDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<FunProcDirective> listFunctionsDirectives(final PojoDao dao) {
    final List<FunProcDirective> result = CollectionLiterals.<FunProcDirective>newArrayList();
    EList<DaoDirective> _directives = dao.getDirectives();
    Iterable<DaoDirective> _filter = null;
    if (_directives!=null) {
      final Function1<DaoDirective, Boolean> _function = new Function1<DaoDirective, Boolean>() {
        public Boolean apply(final DaoDirective x) {
          return Boolean.valueOf((x instanceof FunProcDirective));
        }
      };
      _filter=IterableExtensions.<DaoDirective>filter(_directives, _function);
    }
    final Procedure1<DaoDirective> _function_1 = new Procedure1<DaoDirective>() {
      public void apply(final DaoDirective it) {
        result.add(((FunProcDirective) it));
      }
    };
    IterableExtensions.<DaoDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public String getSuffix(final PojoDao dao) {
    final org.sqlproc.model.processorModel.Package packageDeclaration = EcoreUtil2.<org.sqlproc.model.processorModel.Package>getContainerOfType(dao, org.sqlproc.model.processorModel.Package.class);
    return Utils.getSuffix(packageDeclaration);
  }
  
  public String getParamName(final PojoType pojo) {
    PojoEntity _ref = pojo.getRef();
    boolean _notEquals = (!Objects.equal(_ref, null));
    if (_notEquals) {
      PojoEntity _ref_1 = pojo.getRef();
      String _name = _ref_1.getName();
      return StringExtensions.toFirstLower(_name);
    }
    JvmType _type = pojo.getType();
    String _simpleName = _type.getSimpleName();
    return StringExtensions.toFirstLower(_simpleName);
  }
  
  public boolean isConflict(final Annotation an) {
    EList<AnnotationDirective> _directives = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<AnnotationDirective, Boolean> _function = new Function1<AnnotationDirective, Boolean>() {
        public Boolean apply(final AnnotationDirective x) {
          return Boolean.valueOf((x instanceof AnnotationDirectiveConflict));
        }
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> conflictAnnotations(final AnnotatedEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = pojo.getAnnotations();
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isConflict(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public boolean isConstructor(final Annotation an) {
    EList<AnnotationDirective> _directives = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<AnnotationDirective, Boolean> _function = new Function1<AnnotationDirective, Boolean>() {
        public Boolean apply(final AnnotationDirective x) {
          return Boolean.valueOf((x instanceof AnnotationDirectiveConstructor));
        }
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> constructorAnnotations(final AnnotatedEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = pojo.getAnnotations();
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isConstructor(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public boolean isStatic(final Annotation an) {
    EList<AnnotationDirective> _directives = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<AnnotationDirective, Boolean> _function = new Function1<AnnotationDirective, Boolean>() {
        public Boolean apply(final AnnotationDirective x) {
          return Boolean.valueOf((x instanceof AnnotationDirectiveStatic));
        }
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> staticAnnotations(final AnnotatedEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = pojo.getAnnotations();
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isStatic(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public boolean isStandard(final Annotation an) {
    boolean _or = false;
    EList<AnnotationDirective> _directives = an.getDirectives();
    boolean _equals = Objects.equal(_directives, null);
    if (_equals) {
      _or = true;
    } else {
      EList<AnnotationDirective> _directives_1 = an.getDirectives();
      boolean _isEmpty = _directives_1.isEmpty();
      _or = _isEmpty;
    }
    if (_or) {
      return true;
    }
    EList<AnnotationDirective> _directives_2 = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives_2!=null) {
      final Function1<AnnotationDirective, Boolean> _function = new Function1<AnnotationDirective, Boolean>() {
        public Boolean apply(final AnnotationDirective x) {
          return Boolean.valueOf((x instanceof AnnotationDirectiveStandard));
        }
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives_2, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> standardAnnotations(final AnnotatedEntity pojo) {
    boolean _equals = Objects.equal(pojo, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = pojo.getAnnotations();
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isStandard(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public boolean isSetter(final Annotation an) {
    EList<AnnotationDirective> _directives = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<AnnotationDirective, Boolean> _function = new Function1<AnnotationDirective, Boolean>() {
        public Boolean apply(final AnnotationDirective x) {
          return Boolean.valueOf((x instanceof AnnotationDirectiveSetter));
        }
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> setterAnnotations(final PojoAnnotatedProperty prop) {
    boolean _equals = Objects.equal(prop, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = prop.getAnnotations();
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isSetter(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public boolean isGetter(final Annotation an) {
    EList<AnnotationDirective> _directives = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives!=null) {
      final Function1<AnnotationDirective, Boolean> _function = new Function1<AnnotationDirective, Boolean>() {
        public Boolean apply(final AnnotationDirective x) {
          return Boolean.valueOf((x instanceof AnnotationDirectiveGetter));
        }
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> getterAnnotations(final PojoAnnotatedProperty prop) {
    boolean _equals = Objects.equal(prop, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = prop.getAnnotations();
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isGetter(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public boolean isAttribute(final Annotation an) {
    boolean _or = false;
    EList<AnnotationDirective> _directives = an.getDirectives();
    boolean _equals = Objects.equal(_directives, null);
    if (_equals) {
      _or = true;
    } else {
      EList<AnnotationDirective> _directives_1 = an.getDirectives();
      boolean _isEmpty = _directives_1.isEmpty();
      _or = _isEmpty;
    }
    if (_or) {
      return true;
    }
    EList<AnnotationDirective> _directives_2 = an.getDirectives();
    AnnotationDirective _findFirst = null;
    if (_directives_2!=null) {
      final Function1<AnnotationDirective, Boolean> _function = new Function1<AnnotationDirective, Boolean>() {
        public Boolean apply(final AnnotationDirective x) {
          return Boolean.valueOf((x instanceof AnnotationDirectiveAttribute));
        }
      };
      _findFirst=IterableExtensions.<AnnotationDirective>findFirst(_directives_2, _function);
    }
    final AnnotationDirective d = _findFirst;
    boolean _xifexpression = false;
    boolean _notEquals = (!Objects.equal(d, null));
    if (_notEquals) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public List<Annotation> attributeAnnotations(final PojoAnnotatedProperty prop) {
    boolean _equals = Objects.equal(prop, null);
    if (_equals) {
      return CollectionLiterals.<Annotation>newArrayList();
    }
    EList<Annotation> _annotations = prop.getAnnotations();
    final Function1<Annotation, Boolean> _function = new Function1<Annotation, Boolean>() {
      public Boolean apply(final Annotation x) {
        return Boolean.valueOf(ProcessorGeneratorUtils.this.isAttribute(x));
      }
    };
    Iterable<Annotation> _filter = IterableExtensions.<Annotation>filter(_annotations, _function);
    return IterableExtensions.<Annotation>toList(_filter);
  }
  
  public List<PojoEntity> onlyPojos(final Extends ext) {
    final List<PojoEntity> result = CollectionLiterals.<PojoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = ext.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = new Function1<ImplementsExtendsDirective, Boolean>() {
        public Boolean apply(final ImplementsExtendsDirective x) {
          return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveOnlyPojos));
        }
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Procedure1<ImplementsExtendsDirective> _function_1 = new Procedure1<ImplementsExtendsDirective>() {
      public void apply(final ImplementsExtendsDirective it) {
        EList<PojoEntity> _onlyPojos = ((ImplementsExtendsDirectiveOnlyPojos) it).getOnlyPojos();
        result.addAll(_onlyPojos);
      }
    };
    IterableExtensions.<ImplementsExtendsDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<PojoEntity> exceptPojos(final Extends ext) {
    final List<PojoEntity> result = CollectionLiterals.<PojoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = ext.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = new Function1<ImplementsExtendsDirective, Boolean>() {
        public Boolean apply(final ImplementsExtendsDirective x) {
          return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveExceptPojos));
        }
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Procedure1<ImplementsExtendsDirective> _function_1 = new Procedure1<ImplementsExtendsDirective>() {
      public void apply(final ImplementsExtendsDirective it) {
        EList<PojoEntity> _exceptPojos = ((ImplementsExtendsDirectiveExceptPojos) it).getExceptPojos();
        result.addAll(_exceptPojos);
      }
    };
    IterableExtensions.<ImplementsExtendsDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<PojoEntity> onlyPojos(final Implements imp) {
    final List<PojoEntity> result = CollectionLiterals.<PojoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = imp.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = new Function1<ImplementsExtendsDirective, Boolean>() {
        public Boolean apply(final ImplementsExtendsDirective x) {
          return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveOnlyPojos));
        }
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Procedure1<ImplementsExtendsDirective> _function_1 = new Procedure1<ImplementsExtendsDirective>() {
      public void apply(final ImplementsExtendsDirective it) {
        EList<PojoEntity> _onlyPojos = ((ImplementsExtendsDirectiveOnlyPojos) it).getOnlyPojos();
        result.addAll(_onlyPojos);
      }
    };
    IterableExtensions.<ImplementsExtendsDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<PojoEntity> exceptPojos(final Implements imp) {
    final List<PojoEntity> result = CollectionLiterals.<PojoEntity>newArrayList();
    EList<ImplementsExtendsDirective> _directives = imp.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = new Function1<ImplementsExtendsDirective, Boolean>() {
        public Boolean apply(final ImplementsExtendsDirective x) {
          return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveExceptPojos));
        }
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Procedure1<ImplementsExtendsDirective> _function_1 = new Procedure1<ImplementsExtendsDirective>() {
      public void apply(final ImplementsExtendsDirective it) {
        EList<PojoEntity> _exceptPojos = ((ImplementsExtendsDirectiveExceptPojos) it).getExceptPojos();
        result.addAll(_exceptPojos);
      }
    };
    IterableExtensions.<ImplementsExtendsDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<PojoDao> onlyDaos(final Extends ext) {
    final List<PojoDao> result = CollectionLiterals.<PojoDao>newArrayList();
    EList<ImplementsExtendsDirective> _directives = ext.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = new Function1<ImplementsExtendsDirective, Boolean>() {
        public Boolean apply(final ImplementsExtendsDirective x) {
          return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveOnlyDaos));
        }
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Procedure1<ImplementsExtendsDirective> _function_1 = new Procedure1<ImplementsExtendsDirective>() {
      public void apply(final ImplementsExtendsDirective it) {
        EList<PojoDao> _onlyDaos = ((ImplementsExtendsDirectiveOnlyDaos) it).getOnlyDaos();
        result.addAll(_onlyDaos);
      }
    };
    IterableExtensions.<ImplementsExtendsDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<PojoDao> exceptDaos(final Extends ext) {
    final List<PojoDao> result = CollectionLiterals.<PojoDao>newArrayList();
    EList<ImplementsExtendsDirective> _directives = ext.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = new Function1<ImplementsExtendsDirective, Boolean>() {
        public Boolean apply(final ImplementsExtendsDirective x) {
          return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveExceptDaos));
        }
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Procedure1<ImplementsExtendsDirective> _function_1 = new Procedure1<ImplementsExtendsDirective>() {
      public void apply(final ImplementsExtendsDirective it) {
        EList<PojoDao> _exceptDaos = ((ImplementsExtendsDirectiveExceptDaos) it).getExceptDaos();
        result.addAll(_exceptDaos);
      }
    };
    IterableExtensions.<ImplementsExtendsDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<PojoDao> onlyDaos(final Implements imp) {
    final List<PojoDao> result = CollectionLiterals.<PojoDao>newArrayList();
    EList<ImplementsExtendsDirective> _directives = imp.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = new Function1<ImplementsExtendsDirective, Boolean>() {
        public Boolean apply(final ImplementsExtendsDirective x) {
          return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveOnlyDaos));
        }
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Procedure1<ImplementsExtendsDirective> _function_1 = new Procedure1<ImplementsExtendsDirective>() {
      public void apply(final ImplementsExtendsDirective it) {
        EList<PojoDao> _onlyDaos = ((ImplementsExtendsDirectiveOnlyDaos) it).getOnlyDaos();
        result.addAll(_onlyDaos);
      }
    };
    IterableExtensions.<ImplementsExtendsDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public List<PojoDao> exceptDaos(final Implements imp) {
    final List<PojoDao> result = CollectionLiterals.<PojoDao>newArrayList();
    EList<ImplementsExtendsDirective> _directives = imp.getDirectives();
    Iterable<ImplementsExtendsDirective> _filter = null;
    if (_directives!=null) {
      final Function1<ImplementsExtendsDirective, Boolean> _function = new Function1<ImplementsExtendsDirective, Boolean>() {
        public Boolean apply(final ImplementsExtendsDirective x) {
          return Boolean.valueOf((x instanceof ImplementsExtendsDirectiveExceptDaos));
        }
      };
      _filter=IterableExtensions.<ImplementsExtendsDirective>filter(_directives, _function);
    }
    final Procedure1<ImplementsExtendsDirective> _function_1 = new Procedure1<ImplementsExtendsDirective>() {
      public void apply(final ImplementsExtendsDirective it) {
        EList<PojoDao> _exceptDaos = ((ImplementsExtendsDirectiveExceptDaos) it).getExceptDaos();
        result.addAll(_exceptDaos);
      }
    };
    IterableExtensions.<ImplementsExtendsDirective>forEach(_filter, _function_1);
    return result;
  }
  
  public String value(final ValueType pv) {
    boolean _equals = Objects.equal(pv, null);
    if (_equals) {
      return null;
    }
    String s = pv.getValue();
    boolean _notEquals = (!Objects.equal(s, null));
    if (_notEquals) {
      String _trim = s.trim();
      s = _trim;
      boolean _startsWith = s.startsWith("\"");
      boolean _not = (!_startsWith);
      if (_not) {
        s = ("\"" + s);
      }
      boolean _endsWith = s.endsWith("\"");
      boolean _not_1 = (!_endsWith);
      if (_not_1) {
        s = (s + "\"");
      }
      return s;
    } else {
      String _id = pv.getId();
      boolean _notEquals_1 = (!Objects.equal(_id, null));
      if (_notEquals_1) {
        return pv.getId();
      } else {
        int _number = pv.getNumber();
        return ("" + Integer.valueOf(_number));
      }
    }
  }
  
  public PojoEntity getPojo(final PojoDao dao, final DaoDirective pojoDirective) {
    if (pojoDirective instanceof DaoDirectiveCrud) {
      return _getPojo(dao, (DaoDirectiveCrud)pojoDirective);
    } else if (pojoDirective instanceof DaoDirectiveQuery) {
      return _getPojo(dao, (DaoDirectiveQuery)pojoDirective);
    } else if (pojoDirective instanceof FunProcDirective) {
      return _getPojo(dao, (FunProcDirective)pojoDirective);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(dao, pojoDirective).toString());
    }
  }
}
