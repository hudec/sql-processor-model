/*
* generated by Xtext
*/
grammar InternalProcessorModel;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.sqlproc.model.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.sqlproc.model.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.sqlproc.model.services.ProcessorModelGrammarAccess;

}

@parser::members {

 	private ProcessorModelGrammarAccess grammarAccess;
 	
    public InternalProcessorModelParser(TokenStream input, ProcessorModelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Artifacts";	
   	}
   	
   	@Override
   	protected ProcessorModelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleArtifacts
entryRuleArtifacts returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArtifactsRule()); }
	 iv_ruleArtifacts=ruleArtifacts 
	 { $current=$iv_ruleArtifacts.current; } 
	 EOF 
;

// Rule Artifacts
ruleArtifacts returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArtifactsAccess().getArtifactsAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getArtifactsAccess().getPropertiesPropertyParserRuleCall_1_0_0()); 
	    }
		lv_properties_1_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArtifactsRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_1_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getArtifactsAccess().getPojosPojoDefinitionParserRuleCall_1_1_0()); 
	    }
		lv_pojos_2_0=rulePojoDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArtifactsRule());
	        }
       		add(
       			$current, 
       			"pojos",
        		lv_pojos_2_0, 
        		"PojoDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getArtifactsAccess().getTablesTableDefinitionParserRuleCall_1_2_0()); 
	    }
		lv_tables_3_0=ruleTableDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArtifactsRule());
	        }
       		add(
       			$current, 
       			"tables",
        		lv_tables_3_0, 
        		"TableDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getArtifactsAccess().getProceduresProcedureDefinitionParserRuleCall_1_3_0()); 
	    }
		lv_procedures_4_0=ruleProcedureDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArtifactsRule());
	        }
       		add(
       			$current, 
       			"procedures",
        		lv_procedures_4_0, 
        		"ProcedureDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getArtifactsAccess().getFunctionsFunctionDefinitionParserRuleCall_1_4_0()); 
	    }
		lv_functions_5_0=ruleFunctionDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArtifactsRule());
	        }
       		add(
       			$current, 
       			"functions",
        		lv_functions_5_0, 
        		"FunctionDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getArtifactsAccess().getPackagesPackageParserRuleCall_1_5_0()); 
	    }
		lv_packages_6_0=rulePackage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArtifactsRule());
	        }
       		add(
       			$current, 
       			"packages",
        		lv_packages_6_0, 
        		"Package");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleValueType
entryRuleValueType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueTypeRule()); }
	 iv_ruleValueType=ruleValueType 
	 { $current=$iv_ruleValueType.current; } 
	 EOF 
;

// Rule ValueType
ruleValueType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getValueTypeAccess().getValueSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
    |(
(
		lv_number_1_0=RULE_INT
		{
			newLeafNode(lv_number_1_0, grammarAccess.getValueTypeAccess().getNumberINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"number",
        		lv_number_1_0, 
        		"INT");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getValueTypeAccess().getIdQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_id_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueTypeRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDatabaseCatalogAssignement
entryRuleDatabaseCatalogAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDatabaseCatalogAssignementRule()); }
	 iv_ruleDatabaseCatalogAssignement=ruleDatabaseCatalogAssignement 
	 { $current=$iv_ruleDatabaseCatalogAssignement.current; } 
	 EOF 
;

// Rule DatabaseCatalogAssignement
ruleDatabaseCatalogAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabaseCatalogAssignementAccess().getDbCatalogQualifiedNameParserRuleCall_0()); 
	    }
		lv_dbCatalog_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabaseCatalogAssignementRule());
	        }
       		set(
       			$current, 
       			"dbCatalog",
        		lv_dbCatalog_0_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleDatabaseSchemaAssignement
entryRuleDatabaseSchemaAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDatabaseSchemaAssignementRule()); }
	 iv_ruleDatabaseSchemaAssignement=ruleDatabaseSchemaAssignement 
	 { $current=$iv_ruleDatabaseSchemaAssignement.current; } 
	 EOF 
;

// Rule DatabaseSchemaAssignement
ruleDatabaseSchemaAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabaseSchemaAssignementAccess().getDbSchemaQualifiedNameParserRuleCall_0()); 
	    }
		lv_dbSchema_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabaseSchemaAssignementRule());
	        }
       		set(
       			$current, 
       			"dbSchema",
        		lv_dbSchema_0_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleDatabaseTypeAssignement
entryRuleDatabaseTypeAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDatabaseTypeAssignementRule()); }
	 iv_ruleDatabaseTypeAssignement=ruleDatabaseTypeAssignement 
	 { $current=$iv_ruleDatabaseTypeAssignement.current; } 
	 EOF 
;

// Rule DatabaseTypeAssignement
ruleDatabaseTypeAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabaseTypeAssignementAccess().getDbTypeValidIDParserRuleCall_0()); 
	    }
		lv_dbType_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabaseTypeAssignementRule());
	        }
       		set(
       			$current, 
       			"dbType",
        		lv_dbType_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleDatabaseMetaInfoAssignement
entryRuleDatabaseMetaInfoAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDatabaseMetaInfoAssignementRule()); }
	 iv_ruleDatabaseMetaInfoAssignement=ruleDatabaseMetaInfoAssignement 
	 { $current=$iv_ruleDatabaseMetaInfoAssignement.current; } 
	 EOF 
;

// Rule DatabaseMetaInfoAssignement
ruleDatabaseMetaInfoAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabaseMetaInfoAssignementAccess().getDbMetaInfoValueTypeParserRuleCall_0()); 
	    }
		lv_dbMetaInfo_0_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabaseMetaInfoAssignementRule());
	        }
       		set(
       			$current, 
       			"dbMetaInfo",
        		lv_dbMetaInfo_0_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleDriverMetaInfoAssignement
entryRuleDriverMetaInfoAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDriverMetaInfoAssignementRule()); }
	 iv_ruleDriverMetaInfoAssignement=ruleDriverMetaInfoAssignement 
	 { $current=$iv_ruleDriverMetaInfoAssignement.current; } 
	 EOF 
;

// Rule DriverMetaInfoAssignement
ruleDriverMetaInfoAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDriverMetaInfoAssignementAccess().getDbDriverInfoValueTypeParserRuleCall_0()); 
	    }
		lv_dbDriverInfo_0_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDriverMetaInfoAssignementRule());
	        }
       		set(
       			$current, 
       			"dbDriverInfo",
        		lv_dbDriverInfo_0_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleDriverMethodOutputAssignement
entryRuleDriverMethodOutputAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDriverMethodOutputAssignementRule()); }
	 iv_ruleDriverMethodOutputAssignement=ruleDriverMethodOutputAssignement 
	 { $current=$iv_ruleDriverMethodOutputAssignement.current; } 
	 EOF 
;

// Rule DriverMethodOutputAssignement
ruleDriverMethodOutputAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDriverMethodOutputAssignementAccess().getDriverMethodValidIDParserRuleCall_0_0()); 
	    }
		lv_driverMethod_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDriverMethodOutputAssignementRule());
	        }
       		set(
       			$current, 
       			"driverMethod",
        		lv_driverMethod_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDriverMethodOutputAssignementAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDriverMethodOutputAssignementAccess().getCallOutputValueTypeParserRuleCall_2_0()); 
	    }
		lv_callOutput_2_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDriverMethodOutputAssignementRule());
	        }
       		set(
       			$current, 
       			"callOutput",
        		lv_callOutput_2_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSqlTypeAssignement
entryRuleSqlTypeAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSqlTypeAssignementRule()); }
	 iv_ruleSqlTypeAssignement=ruleSqlTypeAssignement 
	 { $current=$iv_ruleSqlTypeAssignement.current; } 
	 EOF 
;

// Rule SqlTypeAssignement
ruleSqlTypeAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSqlTypeAssignementAccess().getTypeNameValidIDParserRuleCall_0_0()); 
	    }
		lv_typeName_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSqlTypeAssignementRule());
	        }
       		set(
       			$current, 
       			"typeName",
        		lv_typeName_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSqlTypeAssignementAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		lv_size_2_0=RULE_INT
		{
			newLeafNode(lv_size_2_0, grammarAccess.getSqlTypeAssignementAccess().getSizeINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSqlTypeAssignementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"size",
        		lv_size_2_0, 
        		"INT");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSqlTypeAssignementAccess().getRightParenthesisKeyword_1_2());
    }
)?	otherlv_4='->' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSqlTypeAssignementAccess().getHyphenMinusGreaterThanSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSqlTypeAssignementAccess().getTypeJvmParameterizedTypeReferenceParserRuleCall_3_0()); 
	    }
		lv_type_5_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSqlTypeAssignementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleColumnTypeAssignement
entryRuleColumnTypeAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getColumnTypeAssignementRule()); }
	 iv_ruleColumnTypeAssignement=ruleColumnTypeAssignement 
	 { $current=$iv_ruleColumnTypeAssignement.current; } 
	 EOF 
;

// Rule ColumnTypeAssignement
ruleColumnTypeAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getColumnTypeAssignementAccess().getDbColumnValidIDParserRuleCall_0_0()); 
	    }
		lv_dbColumn_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnTypeAssignementRule());
	        }
       		set(
       			$current, 
       			"dbColumn",
        		lv_dbColumn_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getColumnTypeAssignementAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getColumnTypeAssignementAccess().getTypeJvmParameterizedTypeReferenceParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnTypeAssignementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleShowColumnTypeAssignement
entryRuleShowColumnTypeAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShowColumnTypeAssignementRule()); }
	 iv_ruleShowColumnTypeAssignement=ruleShowColumnTypeAssignement 
	 { $current=$iv_ruleShowColumnTypeAssignement.current; } 
	 EOF 
;

// Rule ShowColumnTypeAssignement
ruleShowColumnTypeAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getShowColumnTypeAssignementAccess().getDbColumnValidIDParserRuleCall_0_0()); 
	    }
		lv_dbColumn_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShowColumnTypeAssignementRule());
	        }
       		set(
       			$current, 
       			"dbColumn",
        		lv_dbColumn_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getShowColumnTypeAssignementAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getShowColumnTypeAssignementAccess().getTypeValueTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShowColumnTypeAssignementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTableAssignement
entryRuleTableAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTableAssignementRule()); }
	 iv_ruleTableAssignement=ruleTableAssignement 
	 { $current=$iv_ruleTableAssignement.current; } 
	 EOF 
;

// Rule TableAssignement
ruleTableAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTableAssignementAccess().getDbTableValidIDParserRuleCall_0_0()); 
	    }
		lv_dbTable_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableAssignementRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTableAssignementAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTableAssignementAccess().getNewNameValidIDParserRuleCall_2_0()); 
	    }
		lv_newName_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableAssignementRule());
	        }
       		set(
       			$current, 
       			"newName",
        		lv_newName_2_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJoinTableAssignement
entryRuleJoinTableAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJoinTableAssignementRule()); }
	 iv_ruleJoinTableAssignement=ruleJoinTableAssignement 
	 { $current=$iv_ruleJoinTableAssignement.current; } 
	 EOF 
;

// Rule JoinTableAssignement
ruleJoinTableAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJoinTableAssignementAccess().getDbTableValidIDParserRuleCall_0_0()); 
	    }
		lv_dbTable_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinTableAssignementRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJoinTableAssignementAccess().getHyphenMinusGreaterThanSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinTableAssignementAccess().getDbTablesValidIDParserRuleCall_1_1_0()); 
	    }
		lv_dbTables_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinTableAssignementRule());
	        }
       		add(
       			$current, 
       			"dbTables",
        		lv_dbTables_2_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))+)
;





// Entry rule entryRuleColumnAssignement
entryRuleColumnAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getColumnAssignementRule()); }
	 iv_ruleColumnAssignement=ruleColumnAssignement 
	 { $current=$iv_ruleColumnAssignement.current; } 
	 EOF 
;

// Rule ColumnAssignement
ruleColumnAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getColumnAssignementAccess().getDbColumnValidIDParserRuleCall_0_0()); 
	    }
		lv_dbColumn_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnAssignementRule());
	        }
       		set(
       			$current, 
       			"dbColumn",
        		lv_dbColumn_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getColumnAssignementAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getColumnAssignementAccess().getNewNameValidIDParserRuleCall_2_0()); 
	    }
		lv_newName_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnAssignementRule());
	        }
       		set(
       			$current, 
       			"newName",
        		lv_newName_2_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleImportAssignement
entryRuleImportAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportAssignementRule()); }
	 iv_ruleImportAssignement=ruleImportAssignement 
	 { $current=$iv_ruleImportAssignement.current; } 
	 EOF 
;

// Rule ImportAssignement
ruleImportAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getImportAssignementAccess().getDbColumnValidIDParserRuleCall_0_0()); 
	    }
		lv_dbColumn_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportAssignementRule());
	        }
       		set(
       			$current, 
       			"dbColumn",
        		lv_dbColumn_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getImportAssignementAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAssignementAccess().getPkTableValidIDParserRuleCall_2_0()); 
	    }
		lv_pkTable_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportAssignementRule());
	        }
       		set(
       			$current, 
       			"pkTable",
        		lv_pkTable_2_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getImportAssignementAccess().getHyphenMinusGreaterThanSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAssignementAccess().getPkColumnValidIDParserRuleCall_3_1_0()); 
	    }
		lv_pkColumn_4_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportAssignementRule());
	        }
       		set(
       			$current, 
       			"pkColumn",
        		lv_pkColumn_4_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleExportAssignement
entryRuleExportAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExportAssignementRule()); }
	 iv_ruleExportAssignement=ruleExportAssignement 
	 { $current=$iv_ruleExportAssignement.current; } 
	 EOF 
;

// Rule ExportAssignement
ruleExportAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExportAssignementAccess().getDbColumnValidIDParserRuleCall_0_0()); 
	    }
		lv_dbColumn_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportAssignementRule());
	        }
       		set(
       			$current, 
       			"dbColumn",
        		lv_dbColumn_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExportAssignementAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExportAssignementAccess().getFkTableValidIDParserRuleCall_2_0()); 
	    }
		lv_fkTable_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportAssignementRule());
	        }
       		set(
       			$current, 
       			"fkTable",
        		lv_fkTable_2_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExportAssignementAccess().getHyphenMinusGreaterThanSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExportAssignementAccess().getFkColumnValidIDParserRuleCall_3_1_0()); 
	    }
		lv_fkColumn_4_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportAssignementRule());
	        }
       		set(
       			$current, 
       			"fkColumn",
        		lv_fkColumn_4_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleInheritanceAssignement
entryRuleInheritanceAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInheritanceAssignementRule()); }
	 iv_ruleInheritanceAssignement=ruleInheritanceAssignement 
	 { $current=$iv_ruleInheritanceAssignement.current; } 
	 EOF 
;

// Rule InheritanceAssignement
ruleInheritanceAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInheritanceAssignementAccess().getDiscriminatorValidIDParserRuleCall_0_0()); 
	    }
		lv_discriminator_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInheritanceAssignementRule());
	        }
       		set(
       			$current, 
       			"discriminator",
        		lv_discriminator_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInheritanceAssignementAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInheritanceAssignementAccess().getDbTableValidIDParserRuleCall_2_0()); 
	    }
		lv_dbTable_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInheritanceAssignementRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_2_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInheritanceAssignementAccess().getHyphenMinusGreaterThanSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInheritanceAssignementAccess().getDbColumnsValidIDParserRuleCall_3_1_0()); 
	    }
		lv_dbColumns_4_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInheritanceAssignementRule());
	        }
       		add(
       			$current, 
       			"dbColumns",
        		lv_dbColumns_4_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))+)
;





// Entry rule entryRuleManyToManyAssignement
entryRuleManyToManyAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getManyToManyAssignementRule()); }
	 iv_ruleManyToManyAssignement=ruleManyToManyAssignement 
	 { $current=$iv_ruleManyToManyAssignement.current; } 
	 EOF 
;

// Rule ManyToManyAssignement
ruleManyToManyAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getManyToManyAssignementAccess().getPkColumnValidIDParserRuleCall_0_0()); 
	    }
		lv_pkColumn_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getManyToManyAssignementRule());
	        }
       		set(
       			$current, 
       			"pkColumn",
        		lv_pkColumn_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getManyToManyAssignementAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getManyToManyAssignementAccess().getPkTableValidIDParserRuleCall_2_0()); 
	    }
		lv_pkTable_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getManyToManyAssignementRule());
	        }
       		set(
       			$current, 
       			"pkTable",
        		lv_pkTable_2_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getManyToManyAssignementAccess().getHyphenMinusGreaterThanSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getManyToManyAssignementAccess().getFkColumnValidIDParserRuleCall_3_1_0()); 
	    }
		lv_fkColumn_4_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getManyToManyAssignementRule());
	        }
       		set(
       			$current, 
       			"fkColumn",
        		lv_fkColumn_4_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleDebugLevelAssignement
entryRuleDebugLevelAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDebugLevelAssignementRule()); }
	 iv_ruleDebugLevelAssignement=ruleDebugLevelAssignement 
	 { $current=$iv_ruleDebugLevelAssignement.current; } 
	 EOF 
;

// Rule DebugLevelAssignement
ruleDebugLevelAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDebugLevelAssignementAccess().getDebugValidIDParserRuleCall_0_0()); 
	    }
		lv_debug_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDebugLevelAssignementRule());
	        }
       		set(
       			$current, 
       			"debug",
        		lv_debug_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDebugLevelAssignementAccess().getScopeValidIDParserRuleCall_1_0()); 
	    }
		lv_scope_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDebugLevelAssignementRule());
	        }
       		set(
       			$current, 
       			"scope",
        		lv_scope_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleProcedurePojoAssignement
entryRuleProcedurePojoAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedurePojoAssignementRule()); }
	 iv_ruleProcedurePojoAssignement=ruleProcedurePojoAssignement 
	 { $current=$iv_ruleProcedurePojoAssignement.current; } 
	 EOF 
;

// Rule ProcedurePojoAssignement
ruleProcedurePojoAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProcedurePojoAssignementAccess().getDbProcedureValidIDParserRuleCall_0_0()); 
	    }
		lv_dbProcedure_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedurePojoAssignementRule());
	        }
       		set(
       			$current, 
       			"dbProcedure",
        		lv_dbProcedure_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProcedurePojoAssignementAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedurePojoAssignementAccess().getPojoJvmParameterizedTypeReferenceParserRuleCall_2_0()); 
	    }
		lv_pojo_2_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedurePojoAssignementRule());
	        }
       		set(
       			$current, 
       			"pojo",
        		lv_pojo_2_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunctionPojoAssignement
entryRuleFunctionPojoAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionPojoAssignementRule()); }
	 iv_ruleFunctionPojoAssignement=ruleFunctionPojoAssignement 
	 { $current=$iv_ruleFunctionPojoAssignement.current; } 
	 EOF 
;

// Rule FunctionPojoAssignement
ruleFunctionPojoAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionPojoAssignementAccess().getDbFunctionValidIDParserRuleCall_0_0()); 
	    }
		lv_dbFunction_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionPojoAssignementRule());
	        }
       		set(
       			$current, 
       			"dbFunction",
        		lv_dbFunction_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionPojoAssignementAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionPojoAssignementAccess().getPojoJvmParameterizedTypeReferenceParserRuleCall_2_0()); 
	    }
		lv_pojo_2_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionPojoAssignementRule());
	        }
       		set(
       			$current, 
       			"pojo",
        		lv_pojo_2_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleImplementsAssignement
entryRuleImplementsAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplementsAssignementRule()); }
	 iv_ruleImplementsAssignement=ruleImplementsAssignement 
	 { $current=$iv_ruleImplementsAssignement.current; } 
	 EOF 
;

// Rule ImplementsAssignement
ruleImplementsAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0=':' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImplementsAssignementAccess().getColonKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImplementsAssignementAccess().getToImplementJvmParameterizedTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_toImplement_1_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplementsAssignementRule());
	        }
       		set(
       			$current, 
       			"toImplement",
        		lv_toImplement_1_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImplementsAssignementAccess().getPlusSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImplementsAssignementAccess().getDbTablesValidIDParserRuleCall_2_1_0()); 
	    }
		lv_dbTables_3_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplementsAssignementRule());
	        }
       		add(
       			$current, 
       			"dbTables",
        		lv_dbTables_3_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getImplementsAssignementAccess().getHyphenMinusKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImplementsAssignementAccess().getDbNotTablesValidIDParserRuleCall_3_1_0()); 
	    }
		lv_dbNotTables_5_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplementsAssignementRule());
	        }
       		add(
       			$current, 
       			"dbNotTables",
        		lv_dbNotTables_5_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?)
;





// Entry rule entryRuleExtendsAssignement
entryRuleExtendsAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtendsAssignementRule()); }
	 iv_ruleExtendsAssignement=ruleExtendsAssignement 
	 { $current=$iv_ruleExtendsAssignement.current; } 
	 EOF 
;

// Rule ExtendsAssignement
ruleExtendsAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0=':' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExtendsAssignementAccess().getColonKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtendsAssignementAccess().getToExtendsJvmParameterizedTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_toExtends_1_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtendsAssignementRule());
	        }
       		set(
       			$current, 
       			"toExtends",
        		lv_toExtends_1_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExtendsAssignementAccess().getPlusSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtendsAssignementAccess().getDbTablesValidIDParserRuleCall_2_1_0()); 
	    }
		lv_dbTables_3_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtendsAssignementRule());
	        }
       		add(
       			$current, 
       			"dbTables",
        		lv_dbTables_3_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExtendsAssignementAccess().getHyphenMinusKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtendsAssignementAccess().getDbNotTablesValidIDParserRuleCall_3_1_0()); 
	    }
		lv_dbNotTables_5_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtendsAssignementRule());
	        }
       		add(
       			$current, 
       			"dbNotTables",
        		lv_dbNotTables_5_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?)
;





// Entry rule entryRuleImplementsAssignementGenerics
entryRuleImplementsAssignementGenerics returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplementsAssignementGenericsRule()); }
	 iv_ruleImplementsAssignementGenerics=ruleImplementsAssignementGenerics 
	 { $current=$iv_ruleImplementsAssignementGenerics.current; } 
	 EOF 
;

// Rule ImplementsAssignementGenerics
ruleImplementsAssignementGenerics returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0=':' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImplementsAssignementGenericsAccess().getColonKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImplementsAssignementGenericsAccess().getToImplementJvmParameterizedTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_toImplement_1_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplementsAssignementGenericsRule());
	        }
       		set(
       			$current, 
       			"toImplement",
        		lv_toImplement_1_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImplementsAssignementGenericsAccess().getPlusSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImplementsAssignementGenericsAccess().getDbTablesValidIDParserRuleCall_2_1_0()); 
	    }
		lv_dbTables_3_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplementsAssignementGenericsRule());
	        }
       		add(
       			$current, 
       			"dbTables",
        		lv_dbTables_3_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getImplementsAssignementGenericsAccess().getHyphenMinusKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImplementsAssignementGenericsAccess().getDbNotTablesValidIDParserRuleCall_3_1_0()); 
	    }
		lv_dbNotTables_5_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplementsAssignementGenericsRule());
	        }
       		add(
       			$current, 
       			"dbNotTables",
        		lv_dbNotTables_5_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?)
;





// Entry rule entryRuleExtendsAssignementGenerics
entryRuleExtendsAssignementGenerics returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtendsAssignementGenericsRule()); }
	 iv_ruleExtendsAssignementGenerics=ruleExtendsAssignementGenerics 
	 { $current=$iv_ruleExtendsAssignementGenerics.current; } 
	 EOF 
;

// Rule ExtendsAssignementGenerics
ruleExtendsAssignementGenerics returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0=':' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExtendsAssignementGenericsAccess().getColonKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtendsAssignementGenericsAccess().getToExtendsJvmParameterizedTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_toExtends_1_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtendsAssignementGenericsRule());
	        }
       		set(
       			$current, 
       			"toExtends",
        		lv_toExtends_1_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExtendsAssignementGenericsAccess().getPlusSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtendsAssignementGenericsAccess().getDbTablesValidIDParserRuleCall_2_1_0()); 
	    }
		lv_dbTables_3_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtendsAssignementGenericsRule());
	        }
       		add(
       			$current, 
       			"dbTables",
        		lv_dbTables_3_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExtendsAssignementGenericsAccess().getHyphenMinusKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtendsAssignementGenericsAccess().getDbNotTablesValidIDParserRuleCall_3_1_0()); 
	    }
		lv_dbNotTables_5_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtendsAssignementGenericsRule());
	        }
       		add(
       			$current, 
       			"dbNotTables",
        		lv_dbNotTables_5_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?)
;





// Entry rule entryRulePropertyCondition
entryRulePropertyCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyConditionRule()); }
	 iv_rulePropertyCondition=rulePropertyCondition 
	 { $current=$iv_rulePropertyCondition.current; } 
	 EOF 
;

// Rule PropertyCondition
rulePropertyCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPropertyConditionAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyConditionAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyConditionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPropertyConditionAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyConditionAccess().getValueValueTypeParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyConditionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPropertyConditionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getConditionPropertyConditionParserRuleCall_0_0()); 
	    }
		lv_condition_0_0=rulePropertyCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_0_0, 
        		"PropertyCondition");
	        afterParserOrEnumRuleCall();
	    }

)
)?((
(
		lv_name_1_0=	'resolve-pojo-on' 
    {
        newLeafNode(lv_name_1_0, grammarAccess.getPropertyAccess().getNameResolvePojoOnKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_1_0, "resolve-pojo-on");
	    }

)
)
    |(
(
		lv_name_2_0=	'resolve-pojo-off' 
    {
        newLeafNode(lv_name_2_0, grammarAccess.getPropertyAccess().getNameResolvePojoOffKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_0, "resolve-pojo-off");
	    }

)
)
    |((
(
		lv_name_3_0=	'database-' 
    {
        newLeafNode(lv_name_3_0, grammarAccess.getPropertyAccess().getNameDatabaseKeyword_1_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_3_0, "database-");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getDatabaseDatabasePropertyParserRuleCall_1_2_1_0()); 
	    }
		lv_database_4_0=ruleDatabaseProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"database",
        		lv_database_4_0, 
        		"DatabaseProperty");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_5_0=	'pojogen-' 
    {
        newLeafNode(lv_name_5_0, grammarAccess.getPropertyAccess().getNamePojogenKeyword_1_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_5_0, "pojogen-");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getPojogenPojogenPropertyParserRuleCall_1_3_1_0()); 
	    }
		lv_pojogen_6_0=rulePojogenProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"pojogen",
        		lv_pojogen_6_0, 
        		"PojogenProperty");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_7_0=	'metagen-' 
    {
        newLeafNode(lv_name_7_0, grammarAccess.getPropertyAccess().getNameMetagenKeyword_1_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_7_0, "metagen-");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getMetagenMetagenPropertyParserRuleCall_1_4_1_0()); 
	    }
		lv_metagen_8_0=ruleMetagenProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"metagen",
        		lv_metagen_8_0, 
        		"MetagenProperty");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_9_0=	'daogen-' 
    {
        newLeafNode(lv_name_9_0, grammarAccess.getPropertyAccess().getNameDaogenKeyword_1_5_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_9_0, "daogen-");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getDaogenDaogenPropertyParserRuleCall_1_5_1_0()); 
	    }
		lv_daogen_10_0=ruleDaogenProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"daogen",
        		lv_daogen_10_0, 
        		"DaogenProperty");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_11_0=	'replace-all-regex' 
    {
        newLeafNode(lv_name_11_0, grammarAccess.getPropertyAccess().getNameReplaceAllRegexKeyword_1_6_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_11_0, "replace-all-regex");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getReplaceIdValidIDParserRuleCall_1_6_1_0()); 
	    }
		lv_replaceId_12_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"replaceId",
        		lv_replaceId_12_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getRegexValueTypeParserRuleCall_1_6_2_0()); 
	    }
		lv_regex_13_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"regex",
        		lv_regex_13_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_14_0=	'replace-all-replacement' 
    {
        newLeafNode(lv_name_14_0, grammarAccess.getPropertyAccess().getNameReplaceAllReplacementKeyword_1_7_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_14_0, "replace-all-replacement");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getReplaceIdValidIDParserRuleCall_1_7_1_0()); 
	    }
		lv_replaceId_15_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"replaceId",
        		lv_replaceId_15_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getReplacementValueTypeParserRuleCall_1_7_2_0()); 
	    }
		lv_replacement_16_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"replacement",
        		lv_replacement_16_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_name_17_0=	'compress-meta-directives' 
    {
        newLeafNode(lv_name_17_0, grammarAccess.getPropertyAccess().getNameCompressMetaDirectivesKeyword_1_8_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_17_0, "compress-meta-directives");
	    }

)
))	otherlv_18=';' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getPropertyAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleDatabaseProperty
entryRuleDatabaseProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDatabasePropertyRule()); }
	 iv_ruleDatabaseProperty=ruleDatabaseProperty 
	 { $current=$iv_ruleDatabaseProperty.current; } 
	 EOF 
;

// Rule DatabaseProperty
ruleDatabaseProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'is-online' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getDatabasePropertyAccess().getNameIsOnlineKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "is-online");
	    }

)
)
    |(
(
		lv_name_1_0=	'is-offline' 
    {
        newLeafNode(lv_name_1_0, grammarAccess.getDatabasePropertyAccess().getNameIsOfflineKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_1_0, "is-offline");
	    }

)
)
    |((
(
		lv_name_2_0=	'has-url' 
    {
        newLeafNode(lv_name_2_0, grammarAccess.getDatabasePropertyAccess().getNameHasUrlKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_0, "has-url");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabasePropertyAccess().getDbUrlValueTypeParserRuleCall_2_1_0()); 
	    }
		lv_dbUrl_3_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabasePropertyRule());
	        }
       		set(
       			$current, 
       			"dbUrl",
        		lv_dbUrl_3_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_4_0=	'login-username' 
    {
        newLeafNode(lv_name_4_0, grammarAccess.getDatabasePropertyAccess().getNameLoginUsernameKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_4_0, "login-username");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabasePropertyAccess().getDbUsernameValueTypeParserRuleCall_3_1_0()); 
	    }
		lv_dbUsername_5_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabasePropertyRule());
	        }
       		set(
       			$current, 
       			"dbUsername",
        		lv_dbUsername_5_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_6_0=	'login-password' 
    {
        newLeafNode(lv_name_6_0, grammarAccess.getDatabasePropertyAccess().getNameLoginPasswordKeyword_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_6_0, "login-password");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabasePropertyAccess().getDbPasswordValueTypeParserRuleCall_4_1_0()); 
	    }
		lv_dbPassword_7_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabasePropertyRule());
	        }
       		set(
       			$current, 
       			"dbPassword",
        		lv_dbPassword_7_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_8_0=	'in-catalog' 
    {
        newLeafNode(lv_name_8_0, grammarAccess.getDatabasePropertyAccess().getNameInCatalogKeyword_5_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_8_0, "in-catalog");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabasePropertyAccess().getDbCatalogDatabaseCatalogAssignementParserRuleCall_5_1_0()); 
	    }
		lv_dbCatalog_9_0=ruleDatabaseCatalogAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabasePropertyRule());
	        }
       		set(
       			$current, 
       			"dbCatalog",
        		lv_dbCatalog_9_0, 
        		"DatabaseCatalogAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_10_0=	'active-schema' 
    {
        newLeafNode(lv_name_10_0, grammarAccess.getDatabasePropertyAccess().getNameActiveSchemaKeyword_6_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_10_0, "active-schema");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabasePropertyAccess().getDbSchemaDatabaseSchemaAssignementParserRuleCall_6_1_0()); 
	    }
		lv_dbSchema_11_0=ruleDatabaseSchemaAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabasePropertyRule());
	        }
       		set(
       			$current, 
       			"dbSchema",
        		lv_dbSchema_11_0, 
        		"DatabaseSchemaAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_12_0=	'jdbc-driver' 
    {
        newLeafNode(lv_name_12_0, grammarAccess.getDatabasePropertyAccess().getNameJdbcDriverKeyword_7_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_12_0, "jdbc-driver");
	    }

)
)((((	':' 
)=>	otherlv_13=':' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getDatabasePropertyAccess().getColonKeyword_7_1_0_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabasePropertyAccess().getDbDriverxJvmParameterizedTypeReferenceParserRuleCall_7_1_0_1_0()); 
	    }
		lv_dbDriverx_14_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabasePropertyRule());
	        }
       		set(
       			$current, 
       			"dbDriverx",
        		lv_dbDriverx_14_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabasePropertyAccess().getDbDriverValueTypeParserRuleCall_7_1_1_0()); 
	    }
		lv_dbDriver_15_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabasePropertyRule());
	        }
       		set(
       			$current, 
       			"dbDriver",
        		lv_dbDriver_15_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |((
(
		lv_name_16_0=	'ddl-create' 
    {
        newLeafNode(lv_name_16_0, grammarAccess.getDatabasePropertyAccess().getNameDdlCreateKeyword_8_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_16_0, "ddl-create");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabasePropertyAccess().getDbExecuteBeforeValueTypeParserRuleCall_8_1_0()); 
	    }
		lv_dbExecuteBefore_17_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabasePropertyRule());
	        }
       		set(
       			$current, 
       			"dbExecuteBefore",
        		lv_dbExecuteBefore_17_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_18_0=	'ddl-drop' 
    {
        newLeafNode(lv_name_18_0, grammarAccess.getDatabasePropertyAccess().getNameDdlDropKeyword_9_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_18_0, "ddl-drop");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabasePropertyAccess().getDbExecuteAfterValueTypeParserRuleCall_9_1_0()); 
	    }
		lv_dbExecuteAfter_19_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabasePropertyRule());
	        }
       		set(
       			$current, 
       			"dbExecuteAfter",
        		lv_dbExecuteAfter_19_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_20_0=	'index-types' 
    {
        newLeafNode(lv_name_20_0, grammarAccess.getDatabasePropertyAccess().getNameIndexTypesKeyword_10_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_20_0, "index-types");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabasePropertyAccess().getDbIndexTypesValueTypeParserRuleCall_10_1_0()); 
	    }
		lv_dbIndexTypes_21_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabasePropertyRule());
	        }
       		set(
       			$current, 
       			"dbIndexTypes",
        		lv_dbIndexTypes_21_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_name_22_0=	'skip-indexes' 
    {
        newLeafNode(lv_name_22_0, grammarAccess.getDatabasePropertyAccess().getNameSkipIndexesKeyword_11_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_22_0, "skip-indexes");
	    }

)
)
    |(
(
		lv_name_23_0=	'skip-functions-procedures' 
    {
        newLeafNode(lv_name_23_0, grammarAccess.getDatabasePropertyAccess().getNameSkipFunctionsProceduresKeyword_12_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_23_0, "skip-functions-procedures");
	    }

)
)
    |(
(
		lv_name_24_0=	'skip-check-constraints' 
    {
        newLeafNode(lv_name_24_0, grammarAccess.getDatabasePropertyAccess().getNameSkipCheckConstraintsKeyword_13_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_24_0, "skip-check-constraints");
	    }

)
)
    |((
(
		lv_name_25_0=	'is-of-type' 
    {
        newLeafNode(lv_name_25_0, grammarAccess.getDatabasePropertyAccess().getNameIsOfTypeKeyword_14_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_25_0, "is-of-type");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabasePropertyAccess().getDbTypeDatabaseTypeAssignementParserRuleCall_14_1_0()); 
	    }
		lv_dbType_26_0=ruleDatabaseTypeAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabasePropertyRule());
	        }
       		set(
       			$current, 
       			"dbType",
        		lv_dbType_26_0, 
        		"DatabaseTypeAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_27_0=	'show-database-info' 
    {
        newLeafNode(lv_name_27_0, grammarAccess.getDatabasePropertyAccess().getNameShowDatabaseInfoKeyword_15_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_27_0, "show-database-info");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabasePropertyAccess().getDbMetaInfoDatabaseMetaInfoAssignementParserRuleCall_15_1_0()); 
	    }
		lv_dbMetaInfo_28_0=ruleDatabaseMetaInfoAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabasePropertyRule());
	        }
       		set(
       			$current, 
       			"dbMetaInfo",
        		lv_dbMetaInfo_28_0, 
        		"DatabaseMetaInfoAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_29_0=	'show-driver-info' 
    {
        newLeafNode(lv_name_29_0, grammarAccess.getDatabasePropertyAccess().getNameShowDriverInfoKeyword_16_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_29_0, "show-driver-info");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabasePropertyAccess().getDbDriverInfoDriverMetaInfoAssignementParserRuleCall_16_1_0()); 
	    }
		lv_dbDriverInfo_30_0=ruleDriverMetaInfoAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabasePropertyRule());
	        }
       		set(
       			$current, 
       			"dbDriverInfo",
        		lv_dbDriverInfo_30_0, 
        		"DriverMetaInfoAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_31_0=	'show-driver-output' 
    {
        newLeafNode(lv_name_31_0, grammarAccess.getDatabasePropertyAccess().getNameShowDriverOutputKeyword_17_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_31_0, "show-driver-output");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabasePropertyAccess().getDbMethodsCallsDriverMethodOutputAssignementParserRuleCall_17_1_0()); 
	    }
		lv_dbMethodsCalls_32_0=ruleDriverMethodOutputAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabasePropertyRule());
	        }
       		add(
       			$current, 
       			"dbMethodsCalls",
        		lv_dbMethodsCalls_32_0, 
        		"DriverMethodOutputAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_33_0=	'debug-level' 
    {
        newLeafNode(lv_name_33_0, grammarAccess.getDatabasePropertyAccess().getNameDebugLevelKeyword_18_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_33_0, "debug-level");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDatabasePropertyAccess().getDebugDebugLevelAssignementParserRuleCall_18_1_0()); 
	    }
		lv_debug_34_0=ruleDebugLevelAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDatabasePropertyRule());
	        }
       		set(
       			$current, 
       			"debug",
        		lv_debug_34_0, 
        		"DebugLevelAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_name_35_0=	'take-comments' 
    {
        newLeafNode(lv_name_35_0, grammarAccess.getDatabasePropertyAccess().getNameTakeCommentsKeyword_19_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_35_0, "take-comments");
	    }

)
)
    |(
(
		lv_name_36_0=	'lowercase-names' 
    {
        newLeafNode(lv_name_36_0, grammarAccess.getDatabasePropertyAccess().getNameLowercaseNamesKeyword_20_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_36_0, "lowercase-names");
	    }

)
)
    |(
(
		lv_name_37_0=	'uppercase-names' 
    {
        newLeafNode(lv_name_37_0, grammarAccess.getDatabasePropertyAccess().getNameUppercaseNamesKeyword_21_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabasePropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_37_0, "uppercase-names");
	    }

)
))
;





// Entry rule entryRulePojogenProperty
entryRulePojogenProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPojogenPropertyRule()); }
	 iv_rulePojogenProperty=rulePojogenProperty 
	 { $current=$iv_rulePojogenProperty.current; } 
	 EOF 
;

// Rule PojogenProperty
rulePojogenProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_name_0_0=	'types-sqltypes' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getPojogenPropertyAccess().getNameTypesSqltypesKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "types-sqltypes");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getSqlTypesSqlTypeAssignementParserRuleCall_0_1_0()); 
	    }
		lv_sqlTypes_1_0=ruleSqlTypeAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"sqlTypes",
        		lv_sqlTypes_1_0, 
        		"SqlTypeAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_2_0=	'types-in-table' 
    {
        newLeafNode(lv_name_2_0, grammarAccess.getPojogenPropertyAccess().getNameTypesInTableKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_0, "types-in-table");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTableValidIDParserRuleCall_1_1_0()); 
	    }
		lv_dbTable_3_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_3_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getSqlTypesSqlTypeAssignementParserRuleCall_1_2_0()); 
	    }
		lv_sqlTypes_4_0=ruleSqlTypeAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"sqlTypes",
        		lv_sqlTypes_4_0, 
        		"SqlTypeAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_5_0=	'types-for-columns' 
    {
        newLeafNode(lv_name_5_0, grammarAccess.getPojogenPropertyAccess().getNameTypesForColumnsKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_5_0, "types-for-columns");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTableValidIDParserRuleCall_2_1_0()); 
	    }
		lv_dbTable_6_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_6_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getColumnTypesColumnTypeAssignementParserRuleCall_2_2_0()); 
	    }
		lv_columnTypes_7_0=ruleColumnTypeAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"columnTypes",
        		lv_columnTypes_7_0, 
        		"ColumnTypeAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_8_0=	'types-for-procedure' 
    {
        newLeafNode(lv_name_8_0, grammarAccess.getPojogenPropertyAccess().getNameTypesForProcedureKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_8_0, "types-for-procedure");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbProcedureValidIDParserRuleCall_3_1_0()); 
	    }
		lv_dbProcedure_9_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbProcedure",
        		lv_dbProcedure_9_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getColumnTypesColumnTypeAssignementParserRuleCall_3_2_0()); 
	    }
		lv_columnTypes_10_0=ruleColumnTypeAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"columnTypes",
        		lv_columnTypes_10_0, 
        		"ColumnTypeAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_11_0=	'types-for-function' 
    {
        newLeafNode(lv_name_11_0, grammarAccess.getPojogenPropertyAccess().getNameTypesForFunctionKeyword_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_11_0, "types-for-function");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbFunctionValidIDParserRuleCall_4_1_0()); 
	    }
		lv_dbFunction_12_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbFunction",
        		lv_dbFunction_12_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getColumnTypesColumnTypeAssignementParserRuleCall_4_2_0()); 
	    }
		lv_columnTypes_13_0=ruleColumnTypeAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"columnTypes",
        		lv_columnTypes_13_0, 
        		"ColumnTypeAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_14_0=	'show-type-for-column' 
    {
        newLeafNode(lv_name_14_0, grammarAccess.getPojogenPropertyAccess().getNameShowTypeForColumnKeyword_5_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_14_0, "show-type-for-column");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTableValidIDParserRuleCall_5_1_0()); 
	    }
		lv_dbTable_15_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_15_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getColumnTypeShowColumnTypeAssignementParserRuleCall_5_2_0()); 
	    }
		lv_columnType_16_0=ruleShowColumnTypeAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"columnType",
        		lv_columnType_16_0, 
        		"ShowColumnTypeAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_17_0=	'show-type-for-procedure' 
    {
        newLeafNode(lv_name_17_0, grammarAccess.getPojogenPropertyAccess().getNameShowTypeForProcedureKeyword_6_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_17_0, "show-type-for-procedure");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbProcedureValidIDParserRuleCall_6_1_0()); 
	    }
		lv_dbProcedure_18_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbProcedure",
        		lv_dbProcedure_18_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getColumnTypeShowColumnTypeAssignementParserRuleCall_6_2_0()); 
	    }
		lv_columnType_19_0=ruleShowColumnTypeAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"columnType",
        		lv_columnType_19_0, 
        		"ShowColumnTypeAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_20_0=	'show-type-for-function' 
    {
        newLeafNode(lv_name_20_0, grammarAccess.getPojogenPropertyAccess().getNameShowTypeForFunctionKeyword_7_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_20_0, "show-type-for-function");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbFunctionValidIDParserRuleCall_7_1_0()); 
	    }
		lv_dbFunction_21_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbFunction",
        		lv_dbFunction_21_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getColumnTypeShowColumnTypeAssignementParserRuleCall_7_2_0()); 
	    }
		lv_columnType_22_0=ruleShowColumnTypeAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"columnType",
        		lv_columnType_22_0, 
        		"ShowColumnTypeAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_23_0=	'ignore-tables' 
    {
        newLeafNode(lv_name_23_0, grammarAccess.getPojogenPropertyAccess().getNameIgnoreTablesKeyword_8_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_23_0, "ignore-tables");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTablesValidIDParserRuleCall_8_1_0()); 
	    }
		lv_dbTables_24_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbTables",
        		lv_dbTables_24_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_25_0=	'only-tables' 
    {
        newLeafNode(lv_name_25_0, grammarAccess.getPojogenPropertyAccess().getNameOnlyTablesKeyword_9_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_25_0, "only-tables");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTablesValidIDParserRuleCall_9_1_0()); 
	    }
		lv_dbTables_26_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbTables",
        		lv_dbTables_26_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_27_0=	'not-abstract-tables' 
    {
        newLeafNode(lv_name_27_0, grammarAccess.getPojogenPropertyAccess().getNameNotAbstractTablesKeyword_10_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_27_0, "not-abstract-tables");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTablesValidIDParserRuleCall_10_1_0()); 
	    }
		lv_dbTables_28_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbTables",
        		lv_dbTables_28_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_29_0=	'join-tables' 
    {
        newLeafNode(lv_name_29_0, grammarAccess.getPojogenPropertyAccess().getNameJoinTablesKeyword_11_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_29_0, "join-tables");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getJoinTablesJoinTableAssignementParserRuleCall_11_1_0()); 
	    }
		lv_joinTables_30_0=ruleJoinTableAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"joinTables",
        		lv_joinTables_30_0, 
        		"JoinTableAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_31_0=	'ignore-columns' 
    {
        newLeafNode(lv_name_31_0, grammarAccess.getPojogenPropertyAccess().getNameIgnoreColumnsKeyword_12_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_31_0, "ignore-columns");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTableValidIDParserRuleCall_12_1_0()); 
	    }
		lv_dbTable_32_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_32_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbColumnsValidIDParserRuleCall_12_2_0()); 
	    }
		lv_dbColumns_33_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbColumns",
        		lv_dbColumns_33_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_34_0=	'required-columns' 
    {
        newLeafNode(lv_name_34_0, grammarAccess.getPojogenPropertyAccess().getNameRequiredColumnsKeyword_13_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_34_0, "required-columns");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTableValidIDParserRuleCall_13_1_0()); 
	    }
		lv_dbTable_35_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_35_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbColumnsValidIDParserRuleCall_13_2_0()); 
	    }
		lv_dbColumns_36_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbColumns",
        		lv_dbColumns_36_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_37_0=	'not-required-columns' 
    {
        newLeafNode(lv_name_37_0, grammarAccess.getPojogenPropertyAccess().getNameNotRequiredColumnsKeyword_14_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_37_0, "not-required-columns");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTableValidIDParserRuleCall_14_1_0()); 
	    }
		lv_dbTable_38_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_38_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbColumnsValidIDParserRuleCall_14_2_0()); 
	    }
		lv_dbColumns_39_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbColumns",
        		lv_dbColumns_39_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_40_0=	'create-columns' 
    {
        newLeafNode(lv_name_40_0, grammarAccess.getPojogenPropertyAccess().getNameCreateColumnsKeyword_15_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_40_0, "create-columns");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTableValidIDParserRuleCall_15_1_0()); 
	    }
		lv_dbTable_41_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_41_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getColumnTypesColumnTypeAssignementParserRuleCall_15_2_0()); 
	    }
		lv_columnTypes_42_0=ruleColumnTypeAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"columnTypes",
        		lv_columnTypes_42_0, 
        		"ColumnTypeAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_43_0=	'rename-tables' 
    {
        newLeafNode(lv_name_43_0, grammarAccess.getPojogenPropertyAccess().getNameRenameTablesKeyword_16_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_43_0, "rename-tables");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getTablesTableAssignementParserRuleCall_16_1_0()); 
	    }
		lv_tables_44_0=ruleTableAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"tables",
        		lv_tables_44_0, 
        		"TableAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_45_0=	'rename-columns' 
    {
        newLeafNode(lv_name_45_0, grammarAccess.getPojogenPropertyAccess().getNameRenameColumnsKeyword_17_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_45_0, "rename-columns");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTableValidIDParserRuleCall_17_1_0()); 
	    }
		lv_dbTable_46_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_46_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getColumnsColumnAssignementParserRuleCall_17_2_0()); 
	    }
		lv_columns_47_0=ruleColumnAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"columns",
        		lv_columns_47_0, 
        		"ColumnAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_48_0=	'ignore-one-to-many' 
    {
        newLeafNode(lv_name_48_0, grammarAccess.getPojogenPropertyAccess().getNameIgnoreOneToManyKeyword_18_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_48_0, "ignore-one-to-many");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTableValidIDParserRuleCall_18_1_0()); 
	    }
		lv_dbTable_49_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_49_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getExportsExportAssignementParserRuleCall_18_2_0()); 
	    }
		lv_exports_50_0=ruleExportAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"exports",
        		lv_exports_50_0, 
        		"ExportAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_51_0=	'ignore-many-to-one' 
    {
        newLeafNode(lv_name_51_0, grammarAccess.getPojogenPropertyAccess().getNameIgnoreManyToOneKeyword_19_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_51_0, "ignore-many-to-one");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTableValidIDParserRuleCall_19_1_0()); 
	    }
		lv_dbTable_52_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_52_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getImportsImportAssignementParserRuleCall_19_2_0()); 
	    }
		lv_imports_53_0=ruleImportAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_53_0, 
        		"ImportAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_54_0=	'inherit-many-to-one' 
    {
        newLeafNode(lv_name_54_0, grammarAccess.getPojogenPropertyAccess().getNameInheritManyToOneKeyword_20_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_54_0, "inherit-many-to-one");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTableValidIDParserRuleCall_20_1_0()); 
	    }
		lv_dbTable_55_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_55_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getImportsImportAssignementParserRuleCall_20_2_0()); 
	    }
		lv_imports_56_0=ruleImportAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_56_0, 
        		"ImportAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_57_0=	'create-one-to-many' 
    {
        newLeafNode(lv_name_57_0, grammarAccess.getPojogenPropertyAccess().getNameCreateOneToManyKeyword_21_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_57_0, "create-one-to-many");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTableValidIDParserRuleCall_21_1_0()); 
	    }
		lv_dbTable_58_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_58_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getExportsExportAssignementParserRuleCall_21_2_0()); 
	    }
		lv_exports_59_0=ruleExportAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"exports",
        		lv_exports_59_0, 
        		"ExportAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_60_0=	'create-many-to-one' 
    {
        newLeafNode(lv_name_60_0, grammarAccess.getPojogenPropertyAccess().getNameCreateManyToOneKeyword_22_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_60_0, "create-many-to-one");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTableValidIDParserRuleCall_22_1_0()); 
	    }
		lv_dbTable_61_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_61_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getImportsImportAssignementParserRuleCall_22_2_0()); 
	    }
		lv_imports_62_0=ruleImportAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_62_0, 
        		"ImportAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_63_0=	'table-many-to-many' 
    {
        newLeafNode(lv_name_63_0, grammarAccess.getPojogenPropertyAccess().getNameTableManyToManyKeyword_23_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_63_0, "table-many-to-many");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTableValidIDParserRuleCall_23_1_0()); 
	    }
		lv_dbTable_64_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_64_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getMany2sManyToManyAssignementParserRuleCall_23_2_0()); 
	    }
		lv_many2s_65_0=ruleManyToManyAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"many2s",
        		lv_many2s_65_0, 
        		"ManyToManyAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_66_0=	'inherit-discriminator' 
    {
        newLeafNode(lv_name_66_0, grammarAccess.getPojogenPropertyAccess().getNameInheritDiscriminatorKeyword_24_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_66_0, "inherit-discriminator");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTableValidIDParserRuleCall_24_1_0()); 
	    }
		lv_dbTable_67_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_67_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbColumnValidIDParserRuleCall_24_2_0()); 
	    }
		lv_dbColumn_68_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbColumn",
        		lv_dbColumn_68_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getInheritanceInheritanceAssignementParserRuleCall_24_3_0()); 
	    }
		lv_inheritance_69_0=ruleInheritanceAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"inheritance",
        		lv_inheritance_69_0, 
        		"InheritanceAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_70_0=	'generate-methods' 
    {
        newLeafNode(lv_name_70_0, grammarAccess.getPojogenPropertyAccess().getNameGenerateMethodsKeyword_25_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_70_0, "generate-methods");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getMethodsValidIDParserRuleCall_25_1_0()); 
	    }
		lv_methods_71_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"methods",
        		lv_methods_71_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_72_0=	'generate-operators' 
    {
        newLeafNode(lv_name_72_0, grammarAccess.getPojogenPropertyAccess().getNameGenerateOperatorsKeyword_26_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_72_0, "generate-operators");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getOperatorsSuffixValidIDParserRuleCall_26_1_0()); 
	    }
		lv_operatorsSuffix_73_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"operatorsSuffix",
        		lv_operatorsSuffix_73_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
(
		lv_name_74_0=	'implements-interfaces' 
    {
        newLeafNode(lv_name_74_0, grammarAccess.getPojogenPropertyAccess().getNameImplementsInterfacesKeyword_27_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_74_0, "implements-interfaces");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getToImplementsImplementsAssignementParserRuleCall_27_1_0()); 
	    }
		lv_toImplements_75_0=ruleImplementsAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"toImplements",
        		lv_toImplements_75_0, 
        		"ImplementsAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_76_0=	'extends-class' 
    {
        newLeafNode(lv_name_76_0, grammarAccess.getPojogenPropertyAccess().getNameExtendsClassKeyword_28_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_76_0, "extends-class");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getToExtendsExtendsAssignementParserRuleCall_28_1_0()); 
	    }
		lv_toExtends_77_0=ruleExtendsAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"toExtends",
        		lv_toExtends_77_0, 
        		"ExtendsAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_78_0=	'implements-interfaces-generics' 
    {
        newLeafNode(lv_name_78_0, grammarAccess.getPojogenPropertyAccess().getNameImplementsInterfacesGenericsKeyword_29_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_78_0, "implements-interfaces-generics");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getToImplementsGenericsImplementsAssignementGenericsParserRuleCall_29_1_0()); 
	    }
		lv_toImplementsGenerics_79_0=ruleImplementsAssignementGenerics		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"toImplementsGenerics",
        		lv_toImplementsGenerics_79_0, 
        		"ImplementsAssignementGenerics");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_80_0=	'extends-class-generics' 
    {
        newLeafNode(lv_name_80_0, grammarAccess.getPojogenPropertyAccess().getNameExtendsClassGenericsKeyword_30_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_80_0, "extends-class-generics");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getToExtendsGenericsExtendsAssignementGenericsParserRuleCall_30_1_0()); 
	    }
		lv_toExtendsGenerics_81_0=ruleExtendsAssignementGenerics		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"toExtendsGenerics",
        		lv_toExtendsGenerics_81_0, 
        		"ExtendsAssignementGenerics");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_name_82_0=	'generate-wrappers' 
    {
        newLeafNode(lv_name_82_0, grammarAccess.getPojogenPropertyAccess().getNameGenerateWrappersKeyword_31_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_82_0, "generate-wrappers");
	    }

)
)
    |(
(
		lv_name_83_0=	'generate-validation-annotations' 
    {
        newLeafNode(lv_name_83_0, grammarAccess.getPojogenPropertyAccess().getNameGenerateValidationAnnotationsKeyword_32_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_83_0, "generate-validation-annotations");
	    }

)
)
    |((
(
		lv_name_84_0=	'preserve-foreign-keys' 
    {
        newLeafNode(lv_name_84_0, grammarAccess.getPojogenPropertyAccess().getNamePreserveForeignKeysKeyword_33_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_84_0, "preserve-foreign-keys");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTablesValidIDParserRuleCall_33_1_0()); 
	    }
		lv_dbTables_85_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbTables",
        		lv_dbTables_85_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |(
(
		lv_name_86_0=	'make-it-final' 
    {
        newLeafNode(lv_name_86_0, grammarAccess.getPojogenPropertyAccess().getNameMakeItFinalKeyword_34_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_86_0, "make-it-final");
	    }

)
)
    |((
(
		lv_name_87_0=	'version-column' 
    {
        newLeafNode(lv_name_87_0, grammarAccess.getPojogenPropertyAccess().getNameVersionColumnKeyword_35_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_87_0, "version-column");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getVersionValidIDParserRuleCall_35_1_0()); 
	    }
		lv_version_88_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"version",
        		lv_version_88_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_89='+' 
    {
    	newLeafNode(otherlv_89, grammarAccess.getPojogenPropertyAccess().getPlusSignKeyword_35_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbTablesValidIDParserRuleCall_35_2_1_0()); 
	    }
		lv_dbTables_90_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbTables",
        		lv_dbTables_90_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(	otherlv_91='-' 
    {
    	newLeafNode(otherlv_91, grammarAccess.getPojogenPropertyAccess().getHyphenMinusKeyword_35_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbNotTablesValidIDParserRuleCall_35_3_1_0()); 
	    }
		lv_dbNotTables_92_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbNotTables",
        		lv_dbNotTables_92_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?)
    |((
(
		lv_name_93_0=	'debug-level' 
    {
        newLeafNode(lv_name_93_0, grammarAccess.getPojogenPropertyAccess().getNameDebugLevelKeyword_36_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_93_0, "debug-level");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDebugDebugLevelAssignementParserRuleCall_36_1_0()); 
	    }
		lv_debug_94_0=ruleDebugLevelAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"debug",
        		lv_debug_94_0, 
        		"DebugLevelAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_95_0=	'pojos-for-procedures' 
    {
        newLeafNode(lv_name_95_0, grammarAccess.getPojogenPropertyAccess().getNamePojosForProceduresKeyword_37_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_95_0, "pojos-for-procedures");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getProcPojosProcedurePojoAssignementParserRuleCall_37_1_0()); 
	    }
		lv_procPojos_96_0=ruleProcedurePojoAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"procPojos",
        		lv_procPojos_96_0, 
        		"ProcedurePojoAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_97_0=	'pojos-for-functions' 
    {
        newLeafNode(lv_name_97_0, grammarAccess.getPojogenPropertyAccess().getNamePojosForFunctionsKeyword_38_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_97_0, "pojos-for-functions");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getFunPojosFunctionPojoAssignementParserRuleCall_38_1_0()); 
	    }
		lv_funPojos_98_0=ruleFunctionPojoAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"funPojos",
        		lv_funPojos_98_0, 
        		"FunctionPojoAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_99_0=	'active-filter' 
    {
        newLeafNode(lv_name_99_0, grammarAccess.getPojogenPropertyAccess().getNameActiveFilterKeyword_39_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_99_0, "active-filter");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getActiveFilterValueTypeParserRuleCall_39_1_0()); 
	    }
		lv_activeFilter_100_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"activeFilter",
        		lv_activeFilter_100_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_101_0=	'package' 
    {
        newLeafNode(lv_name_101_0, grammarAccess.getPojogenPropertyAccess().getNamePackageKeyword_40_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_101_0, "package");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getPckgQualifiedNameParserRuleCall_40_1_0()); 
	    }
		lv_pckg_102_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"pckg",
        		lv_pckg_102_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_103_0=	'enum-for-check-constraints' 
    {
        newLeafNode(lv_name_103_0, grammarAccess.getPojogenPropertyAccess().getNameEnumForCheckConstraintsKeyword_41_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_103_0, "enum-for-check-constraints");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getEnumNameValidIDParserRuleCall_41_1_0()); 
	    }
		lv_enumName_104_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		set(
       			$current, 
       			"enumName",
        		lv_enumName_104_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPojogenPropertyAccess().getDbCheckConstraintsValidIDParserRuleCall_41_2_0()); 
	    }
		lv_dbCheckConstraints_105_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojogenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbCheckConstraints",
        		lv_dbCheckConstraints_105_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+))
;





// Entry rule entryRuleMetaTypeAssignement
entryRuleMetaTypeAssignement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMetaTypeAssignementRule()); }
	 iv_ruleMetaTypeAssignement=ruleMetaTypeAssignement 
	 { $current=$iv_ruleMetaTypeAssignement.current; } 
	 EOF 
;

// Rule MetaTypeAssignement
ruleMetaTypeAssignement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMetaTypeAssignementAccess().getDbColumnValidIDParserRuleCall_0_0()); 
	    }
		lv_dbColumn_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetaTypeAssignementRule());
	        }
       		set(
       			$current, 
       			"dbColumn",
        		lv_dbColumn_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMetaTypeAssignementAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMetaTypeAssignementAccess().getTypeValidIDParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetaTypeAssignementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMetaTypeAssignementAccess().getHyphenMinusGreaterThanSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMetaTypeAssignementAccess().getExtensionValidIDParserRuleCall_3_1_0()); 
	    }
		lv_extension_4_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetaTypeAssignementRule());
	        }
       		set(
       			$current, 
       			"extension",
        		lv_extension_4_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleMetagenProperty
entryRuleMetagenProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMetagenPropertyRule()); }
	 iv_ruleMetagenProperty=ruleMetagenProperty 
	 { $current=$iv_ruleMetagenProperty.current; } 
	 EOF 
;

// Rule MetagenProperty
ruleMetagenProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_name_0_0=	'global-sequence' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getMetagenPropertyAccess().getNameGlobalSequenceKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "global-sequence");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getSequenceValidIDParserRuleCall_0_1_0()); 
	    }
		lv_sequence_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"sequence",
        		lv_sequence_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getTypeValidIDParserRuleCall_0_2_0()); 
	    }
		lv_type_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3='+' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMetagenPropertyAccess().getPlusSignKeyword_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbTablesValidIDParserRuleCall_0_3_1_0()); 
	    }
		lv_dbTables_4_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbTables",
        		lv_dbTables_4_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(	otherlv_5='-' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMetagenPropertyAccess().getHyphenMinusKeyword_0_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbNotTablesValidIDParserRuleCall_0_4_1_0()); 
	    }
		lv_dbNotTables_6_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbNotTables",
        		lv_dbNotTables_6_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?)
    |((
(
		lv_name_7_0=	'table-sequence' 
    {
        newLeafNode(lv_name_7_0, grammarAccess.getMetagenPropertyAccess().getNameTableSequenceKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_7_0, "table-sequence");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbTableValidIDParserRuleCall_1_1_0()); 
	    }
		lv_dbTable_8_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_8_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getSequenceValidIDParserRuleCall_1_2_0()); 
	    }
		lv_sequence_9_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"sequence",
        		lv_sequence_9_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getTypeValidIDParserRuleCall_1_3_0()); 
	    }
		lv_type_10_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_10_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
(
		lv_name_11_0=	'global-identity' 
    {
        newLeafNode(lv_name_11_0, grammarAccess.getMetagenPropertyAccess().getNameGlobalIdentityKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_11_0, "global-identity");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getIdentityValidIDParserRuleCall_2_1_0_0()); 
	    }
		lv_identity_12_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"identity",
        		lv_identity_12_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getTypeValidIDParserRuleCall_2_1_1_0()); 
	    }
		lv_type_13_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_13_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)?)?(	otherlv_14='+' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getMetagenPropertyAccess().getPlusSignKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbTablesValidIDParserRuleCall_2_2_1_0()); 
	    }
		lv_dbTables_15_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbTables",
        		lv_dbTables_15_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(	otherlv_16='-' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getMetagenPropertyAccess().getHyphenMinusKeyword_2_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbNotTablesValidIDParserRuleCall_2_3_1_0()); 
	    }
		lv_dbNotTables_17_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbNotTables",
        		lv_dbNotTables_17_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?)
    |((
(
		lv_name_18_0=	'table-identity' 
    {
        newLeafNode(lv_name_18_0, grammarAccess.getMetagenPropertyAccess().getNameTableIdentityKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_18_0, "table-identity");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbTableValidIDParserRuleCall_3_1_0()); 
	    }
		lv_dbTable_19_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_19_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getIdentityValidIDParserRuleCall_3_2_0()); 
	    }
		lv_identity_20_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"identity",
        		lv_identity_20_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getTypeValidIDParserRuleCall_3_3_0()); 
	    }
		lv_type_21_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_21_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
(
		lv_name_22_0=	'column-meta-type' 
    {
        newLeafNode(lv_name_22_0, grammarAccess.getMetagenPropertyAccess().getNameColumnMetaTypeKeyword_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_22_0, "column-meta-type");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbTableValidIDParserRuleCall_4_1_0()); 
	    }
		lv_dbTable_23_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_23_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getMetaTypesMetaTypeAssignementParserRuleCall_4_2_0()); 
	    }
		lv_metaTypes_24_0=ruleMetaTypeAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		add(
       			$current, 
       			"metaTypes",
        		lv_metaTypes_24_0, 
        		"MetaTypeAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_25_0=	'statement-meta-type' 
    {
        newLeafNode(lv_name_25_0, grammarAccess.getMetagenPropertyAccess().getNameStatementMetaTypeKeyword_5_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_25_0, "statement-meta-type");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbStatementValidIDParserRuleCall_5_1_0()); 
	    }
		lv_dbStatement_26_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbStatement",
        		lv_dbStatement_26_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getMetaTypesMetaTypeAssignementParserRuleCall_5_2_0()); 
	    }
		lv_metaTypes_27_0=ruleMetaTypeAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		add(
       			$current, 
       			"metaTypes",
        		lv_metaTypes_27_0, 
        		"MetaTypeAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |(
(
		lv_name_28_0=	'make-it-final' 
    {
        newLeafNode(lv_name_28_0, grammarAccess.getMetagenPropertyAccess().getNameMakeItFinalKeyword_6_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_28_0, "make-it-final");
	    }

)
)
    |((
(
		lv_name_29_0=	'like-columns' 
    {
        newLeafNode(lv_name_29_0, grammarAccess.getMetagenPropertyAccess().getNameLikeColumnsKeyword_7_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_29_0, "like-columns");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbTableValidIDParserRuleCall_7_1_0_0()); 
	    }
		lv_dbTable_30_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_30_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbColumnsValidIDParserRuleCall_7_1_1_0()); 
	    }
		lv_dbColumns_31_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbColumns",
        		lv_dbColumns_31_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?)
    |((
(
		lv_name_32_0=	'not-like-columns' 
    {
        newLeafNode(lv_name_32_0, grammarAccess.getMetagenPropertyAccess().getNameNotLikeColumnsKeyword_8_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_32_0, "not-like-columns");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbTableValidIDParserRuleCall_8_1_0_0()); 
	    }
		lv_dbTable_33_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_33_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbColumnsValidIDParserRuleCall_8_1_1_0()); 
	    }
		lv_dbColumns_34_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbColumns",
        		lv_dbColumns_34_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?)
    |(
(
		lv_name_35_0=	'generate-sequences' 
    {
        newLeafNode(lv_name_35_0, grammarAccess.getMetagenPropertyAccess().getNameGenerateSequencesKeyword_9_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_35_0, "generate-sequences");
	    }

)
)
    |(
(
		lv_name_36_0=	'generate-identities' 
    {
        newLeafNode(lv_name_36_0, grammarAccess.getMetagenPropertyAccess().getNameGenerateIdentitiesKeyword_10_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_36_0, "generate-identities");
	    }

)
)
    |(
(
		lv_name_37_0=	'generate-idgenerators' 
    {
        newLeafNode(lv_name_37_0, grammarAccess.getMetagenPropertyAccess().getNameGenerateIdgeneratorsKeyword_11_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_37_0, "generate-idgenerators");
	    }

)
)
    |(
(
		lv_name_38_0=	'generate-default-idgenerators' 
    {
        newLeafNode(lv_name_38_0, grammarAccess.getMetagenPropertyAccess().getNameGenerateDefaultIdgeneratorsKeyword_12_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_38_0, "generate-default-idgenerators");
	    }

)
)
    |((
(
		lv_name_39_0=	'function-result' 
    {
        newLeafNode(lv_name_39_0, grammarAccess.getMetagenPropertyAccess().getNameFunctionResultKeyword_13_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_39_0, "function-result");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbFunctionValidIDParserRuleCall_13_1_0()); 
	    }
		lv_dbFunction_40_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbFunction",
        		lv_dbFunction_40_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getTypeValidIDParserRuleCall_13_2_0()); 
	    }
		lv_type_41_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_41_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_42_0=	'function-result-set' 
    {
        newLeafNode(lv_name_42_0, grammarAccess.getMetagenPropertyAccess().getNameFunctionResultSetKeyword_14_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_42_0, "function-result-set");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbFunctionValidIDParserRuleCall_14_1_0()); 
	    }
		lv_dbFunction_43_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbFunction",
        		lv_dbFunction_43_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbTableValidIDParserRuleCall_14_2_0()); 
	    }
		lv_dbTable_44_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_44_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_45_0=	'procedure-result-set' 
    {
        newLeafNode(lv_name_45_0, grammarAccess.getMetagenPropertyAccess().getNameProcedureResultSetKeyword_15_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_45_0, "procedure-result-set");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbProcedureValidIDParserRuleCall_15_1_0()); 
	    }
		lv_dbProcedure_46_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbProcedure",
        		lv_dbProcedure_46_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbTableValidIDParserRuleCall_15_2_0()); 
	    }
		lv_dbTable_47_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbTable",
        		lv_dbTable_47_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_48_0=	'debug-level' 
    {
        newLeafNode(lv_name_48_0, grammarAccess.getMetagenPropertyAccess().getNameDebugLevelKeyword_16_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_48_0, "debug-level");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDebugDebugLevelAssignementParserRuleCall_16_1_0()); 
	    }
		lv_debug_49_0=ruleDebugLevelAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"debug",
        		lv_debug_49_0, 
        		"DebugLevelAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_name_50_0=	'generate-operators' 
    {
        newLeafNode(lv_name_50_0, grammarAccess.getMetagenPropertyAccess().getNameGenerateOperatorsKeyword_17_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_50_0, "generate-operators");
	    }

)
)
    |((
(
		lv_name_51_0=	'optimize-insert' 
    {
        newLeafNode(lv_name_51_0, grammarAccess.getMetagenPropertyAccess().getNameOptimizeInsertKeyword_18_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_51_0, "optimize-insert");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbTablesValidIDParserRuleCall_18_1_0()); 
	    }
		lv_dbTables_52_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbTables",
        		lv_dbTables_52_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
(
		lv_name_53_0=	'optional-features' 
    {
        newLeafNode(lv_name_53_0, grammarAccess.getMetagenPropertyAccess().getNameOptionalFeaturesKeyword_19_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_53_0, "optional-features");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getDbStatementValidIDParserRuleCall_19_1_0()); 
	    }
		lv_dbStatement_54_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbStatement",
        		lv_dbStatement_54_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getOptionalFeaturesValidIDParserRuleCall_19_2_0()); 
	    }
		lv_optionalFeatures_55_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		add(
       			$current, 
       			"optionalFeatures",
        		lv_optionalFeatures_55_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_56_0=	'active-filter' 
    {
        newLeafNode(lv_name_56_0, grammarAccess.getMetagenPropertyAccess().getNameActiveFilterKeyword_20_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetagenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_56_0, "active-filter");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetagenPropertyAccess().getActiveFilterValueTypeParserRuleCall_20_1_0()); 
	    }
		lv_activeFilter_57_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetagenPropertyRule());
	        }
       		set(
       			$current, 
       			"activeFilter",
        		lv_activeFilter_57_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleDaogenProperty
entryRuleDaogenProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDaogenPropertyRule()); }
	 iv_ruleDaogenProperty=ruleDaogenProperty 
	 { $current=$iv_ruleDaogenProperty.current; } 
	 EOF 
;

// Rule DaogenProperty
ruleDaogenProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_name_0_0=	'ignore-tables' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getDaogenPropertyAccess().getNameIgnoreTablesKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDaogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "ignore-tables");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDaogenPropertyAccess().getDbTablesValidIDParserRuleCall_0_1_0()); 
	    }
		lv_dbTables_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaogenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbTables",
        		lv_dbTables_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
(
		lv_name_2_0=	'only-tables' 
    {
        newLeafNode(lv_name_2_0, grammarAccess.getDaogenPropertyAccess().getNameOnlyTablesKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDaogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_0, "only-tables");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDaogenPropertyAccess().getDbTablesValidIDParserRuleCall_1_1_0()); 
	    }
		lv_dbTables_3_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaogenPropertyRule());
	        }
       		add(
       			$current, 
       			"dbTables",
        		lv_dbTables_3_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
(
		lv_name_4_0=	'implements-interfaces' 
    {
        newLeafNode(lv_name_4_0, grammarAccess.getDaogenPropertyAccess().getNameImplementsInterfacesKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDaogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_4_0, "implements-interfaces");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDaogenPropertyAccess().getToImplementsImplementsAssignementParserRuleCall_2_1_0()); 
	    }
		lv_toImplements_5_0=ruleImplementsAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaogenPropertyRule());
	        }
       		set(
       			$current, 
       			"toImplements",
        		lv_toImplements_5_0, 
        		"ImplementsAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_6_0=	'extends-class' 
    {
        newLeafNode(lv_name_6_0, grammarAccess.getDaogenPropertyAccess().getNameExtendsClassKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDaogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_6_0, "extends-class");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDaogenPropertyAccess().getToExtendsExtendsAssignementParserRuleCall_3_1_0()); 
	    }
		lv_toExtends_7_0=ruleExtendsAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaogenPropertyRule());
	        }
       		set(
       			$current, 
       			"toExtends",
        		lv_toExtends_7_0, 
        		"ExtendsAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_8_0=	'implements-interfaces-generics' 
    {
        newLeafNode(lv_name_8_0, grammarAccess.getDaogenPropertyAccess().getNameImplementsInterfacesGenericsKeyword_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDaogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_8_0, "implements-interfaces-generics");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDaogenPropertyAccess().getToImplementsGenericsImplementsAssignementGenericsParserRuleCall_4_1_0()); 
	    }
		lv_toImplementsGenerics_9_0=ruleImplementsAssignementGenerics		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaogenPropertyRule());
	        }
       		set(
       			$current, 
       			"toImplementsGenerics",
        		lv_toImplementsGenerics_9_0, 
        		"ImplementsAssignementGenerics");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_10_0=	'extends-class-generics' 
    {
        newLeafNode(lv_name_10_0, grammarAccess.getDaogenPropertyAccess().getNameExtendsClassGenericsKeyword_5_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDaogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_10_0, "extends-class-generics");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDaogenPropertyAccess().getToExtendsGenericsExtendsAssignementGenericsParserRuleCall_5_1_0()); 
	    }
		lv_toExtendsGenerics_11_0=ruleExtendsAssignementGenerics		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaogenPropertyRule());
	        }
       		set(
       			$current, 
       			"toExtendsGenerics",
        		lv_toExtendsGenerics_11_0, 
        		"ExtendsAssignementGenerics");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_name_12_0=	'make-it-final' 
    {
        newLeafNode(lv_name_12_0, grammarAccess.getDaogenPropertyAccess().getNameMakeItFinalKeyword_6_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDaogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_12_0, "make-it-final");
	    }

)
)
    |((
(
		lv_name_13_0=	'function-result' 
    {
        newLeafNode(lv_name_13_0, grammarAccess.getDaogenPropertyAccess().getNameFunctionResultKeyword_7_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDaogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_13_0, "function-result");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDaogenPropertyAccess().getDbFunctionValidIDParserRuleCall_7_1_0()); 
	    }
		lv_dbFunction_14_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaogenPropertyRule());
	        }
       		set(
       			$current, 
       			"dbFunction",
        		lv_dbFunction_14_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDaogenPropertyAccess().getResultTypeJvmParameterizedTypeReferenceParserRuleCall_7_2_0()); 
	    }
		lv_resultType_15_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaogenPropertyRule());
	        }
       		set(
       			$current, 
       			"resultType",
        		lv_resultType_15_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_16_0=	'debug-level' 
    {
        newLeafNode(lv_name_16_0, grammarAccess.getDaogenPropertyAccess().getNameDebugLevelKeyword_8_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDaogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_16_0, "debug-level");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDaogenPropertyAccess().getDebugDebugLevelAssignementParserRuleCall_8_1_0()); 
	    }
		lv_debug_17_0=ruleDebugLevelAssignement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaogenPropertyRule());
	        }
       		set(
       			$current, 
       			"debug",
        		lv_debug_17_0, 
        		"DebugLevelAssignement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_18_0=	'active-filter' 
    {
        newLeafNode(lv_name_18_0, grammarAccess.getDaogenPropertyAccess().getNameActiveFilterKeyword_9_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDaogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_18_0, "active-filter");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDaogenPropertyAccess().getActiveFilterValueTypeParserRuleCall_9_1_0()); 
	    }
		lv_activeFilter_19_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaogenPropertyRule());
	        }
       		set(
       			$current, 
       			"activeFilter",
        		lv_activeFilter_19_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_20_0=	'package' 
    {
        newLeafNode(lv_name_20_0, grammarAccess.getDaogenPropertyAccess().getNamePackageKeyword_10_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDaogenPropertyRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_20_0, "package");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDaogenPropertyAccess().getPckgQualifiedNameParserRuleCall_10_1_0()); 
	    }
		lv_pckg_21_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaogenPropertyRule());
	        }
       		set(
       			$current, 
       			"pckg",
        		lv_pckg_21_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRulePojoDefinition
entryRulePojoDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPojoDefinitionRule()); }
	 iv_rulePojoDefinition=rulePojoDefinition 
	 { $current=$iv_rulePojoDefinition.current; } 
	 EOF 
;

// Rule PojoDefinition
rulePojoDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='pojo' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPojoDefinitionAccess().getPojoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoDefinitionAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getPojoDefinitionAccess().getClassQualifiedNameParserRuleCall_2_0_0()); 
	    }
		lv_class_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoDefinitionRule());
	        }
       		set(
       			$current, 
       			"class",
        		lv_class_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPojoDefinitionAccess().getColonKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoDefinitionAccess().getClassxJvmParameterizedTypeReferenceParserRuleCall_2_1_1_0()); 
	    }
		lv_classx_4_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoDefinitionRule());
	        }
       		set(
       			$current, 
       			"classx",
        		lv_classx_4_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)))	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPojoDefinitionAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleTableDefinition
entryRuleTableDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTableDefinitionRule()); }
	 iv_ruleTableDefinition=ruleTableDefinition 
	 { $current=$iv_ruleTableDefinition.current; } 
	 EOF 
;

// Rule TableDefinition
ruleTableDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='table' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTableDefinitionAccess().getTableKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTableDefinitionAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTableDefinitionAccess().getTableValidIDParserRuleCall_2_0()); 
	    }
		lv_table_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableDefinitionRule());
	        }
       		set(
       			$current, 
       			"table",
        		lv_table_2_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTableDefinitionAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleProcedureDefinition
entryRuleProcedureDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedureDefinitionRule()); }
	 iv_ruleProcedureDefinition=ruleProcedureDefinition 
	 { $current=$iv_ruleProcedureDefinition.current; } 
	 EOF 
;

// Rule ProcedureDefinition
ruleProcedureDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='procedure' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProcedureDefinitionAccess().getProcedureKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureDefinitionAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureDefinitionAccess().getTableValidIDParserRuleCall_2_0()); 
	    }
		lv_table_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureDefinitionRule());
	        }
       		set(
       			$current, 
       			"table",
        		lv_table_2_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProcedureDefinitionAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDefinitionRule()); }
	 iv_ruleFunctionDefinition=ruleFunctionDefinition 
	 { $current=$iv_ruleFunctionDefinition.current; } 
	 EOF 
;

// Rule FunctionDefinition
ruleFunctionDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionDefinitionAccess().getFunctionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getTableValidIDParserRuleCall_2_0()); 
	    }
		lv_table_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
	        }
       		set(
       			$current, 
       			"table",
        		lv_table_2_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionDefinitionAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRulePackage
entryRulePackage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageRule()); }
	 iv_rulePackage=rulePackage 
	 { $current=$iv_rulePackage.current; } 
	 EOF 
;

// Rule Package
rulePackage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPackageAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getImportSectionXImportSectionParserRuleCall_3_0()); 
	    }
		lv_importSection_3_0=ruleXImportSection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		set(
       			$current, 
       			"importSection",
        		lv_importSection_3_0, 
        		"XImportSection");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getElementsAbstractEntityParserRuleCall_4_0()); 
	    }
		lv_elements_4_0=ruleAbstractEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"AbstractEntity");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPackageAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleAbstractEntity
entryRuleAbstractEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractEntityRule()); }
	 iv_ruleAbstractEntity=ruleAbstractEntity 
	 { $current=$iv_ruleAbstractEntity.current; } 
	 EOF 
;

// Rule AbstractEntity
ruleAbstractEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractEntityAccess().getImplementsParserRuleCall_0()); 
    }
    this_Implements_0=ruleImplements
    { 
        $current = $this_Implements_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractEntityAccess().getExtendsParserRuleCall_1()); 
    }
    this_Extends_1=ruleExtends
    { 
        $current = $this_Extends_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractEntityAccess().getAnnotatedEntityParserRuleCall_2()); 
    }
    this_AnnotatedEntity_2=ruleAnnotatedEntity
    { 
        $current = $this_AnnotatedEntity_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleImplementsExtendsDirective
entryRuleImplementsExtendsDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplementsExtendsDirectiveRule()); }
	 iv_ruleImplementsExtendsDirective=ruleImplementsExtendsDirective 
	 { $current=$iv_ruleImplementsExtendsDirective.current; } 
	 EOF 
;

// Rule ImplementsExtendsDirective
ruleImplementsExtendsDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getImplementsExtendsDirectiveAccess().getImplementsExtendsDirectiveGenericsAction_0_0(),
            $current);
    }
)	otherlv_1='#Generics' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getImplementsExtendsDirectiveAccess().getGenericsKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getImplementsExtendsDirectiveAccess().getImplementsExtendsDirectiveOnlyPojosAction_1_0(),
            $current);
    }
)	otherlv_3='#OnlyPojos' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getImplementsExtendsDirectiveAccess().getOnlyPojosKeyword_1_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getImplementsExtendsDirectiveRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getImplementsExtendsDirectiveAccess().getOnlyPojosPojoEntityCrossReference_1_2_0()); 
	    }
		ruleValidID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getImplementsExtendsDirectiveAccess().getImplementsExtendsDirectiveOnlyDaosAction_2_0(),
            $current);
    }
)	otherlv_6='#OnlyDaos' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getImplementsExtendsDirectiveAccess().getOnlyDaosKeyword_2_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getImplementsExtendsDirectiveRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getImplementsExtendsDirectiveAccess().getOnlyDaosDaoEntityCrossReference_2_2_0()); 
	    }
		ruleValidID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getImplementsExtendsDirectiveAccess().getImplementsExtendsDirectiveExceptPojosAction_3_0(),
            $current);
    }
)	otherlv_9='#ExceptPojos' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getImplementsExtendsDirectiveAccess().getExceptPojosKeyword_3_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getImplementsExtendsDirectiveRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getImplementsExtendsDirectiveAccess().getExceptPojosPojoEntityCrossReference_3_2_0()); 
	    }
		ruleValidID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getImplementsExtendsDirectiveAccess().getImplementsExtendsDirectiveExceptDaosAction_4_0(),
            $current);
    }
)	otherlv_12='#ExceptDaos' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getImplementsExtendsDirectiveAccess().getExceptDaosKeyword_4_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getImplementsExtendsDirectiveRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getImplementsExtendsDirectiveAccess().getExceptDaosDaoEntityCrossReference_4_2_0()); 
	    }
		ruleValidID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*))
;





// Entry rule entryRuleImplements
entryRuleImplements returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplementsRule()); }
	 iv_ruleImplements=ruleImplements 
	 { $current=$iv_ruleImplements.current; } 
	 EOF 
;

// Rule Implements
ruleImplements returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getImplementsAccess().getDirectivesImplementsExtendsDirectiveParserRuleCall_0_0()); 
	    }
		lv_directives_0_0=ruleImplementsExtendsDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplementsRule());
	        }
       		add(
       			$current, 
       			"directives",
        		lv_directives_0_0, 
        		"ImplementsExtendsDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='implements' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getImplementsAccess().getImplementsKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImplementsAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImplementsAccess().getImplementsJvmParameterizedTypeReferenceParserRuleCall_3_0()); 
	    }
		lv_implements_3_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplementsRule());
	        }
       		set(
       			$current, 
       			"implements",
        		lv_implements_3_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExtends
entryRuleExtends returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtendsRule()); }
	 iv_ruleExtends=ruleExtends 
	 { $current=$iv_ruleExtends.current; } 
	 EOF 
;

// Rule Extends
ruleExtends returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExtendsAccess().getDirectivesImplementsExtendsDirectiveParserRuleCall_0_0()); 
	    }
		lv_directives_0_0=ruleImplementsExtendsDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtendsRule());
	        }
       		add(
       			$current, 
       			"directives",
        		lv_directives_0_0, 
        		"ImplementsExtendsDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='extends' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExtendsAccess().getExtendsKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExtendsAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtendsAccess().getExtendsJvmParameterizedTypeReferenceParserRuleCall_3_0()); 
	    }
		lv_extends_3_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtendsRule());
	        }
       		set(
       			$current, 
       			"extends",
        		lv_extends_3_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAnnotatedEntity
entryRuleAnnotatedEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotatedEntityRule()); }
	 iv_ruleAnnotatedEntity=ruleAnnotatedEntity 
	 { $current=$iv_ruleAnnotatedEntity.current; } 
	 EOF 
;

// Rule AnnotatedEntity
ruleAnnotatedEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotatedEntityAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotatedEntityRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotatedEntityAccess().getEntityEntityParserRuleCall_1_0()); 
	    }
		lv_entity_1_0=ruleEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotatedEntityRule());
	        }
       		set(
       			$current, 
       			"entity",
        		lv_entity_1_0, 
        		"Entity");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	 iv_ruleEntity=ruleEntity 
	 { $current=$iv_ruleEntity.current; } 
	 EOF 
;

// Rule Entity
ruleEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEntityAccess().getPojoEntityParserRuleCall_0()); 
    }
    this_PojoEntity_0=rulePojoEntity
    { 
        $current = $this_PojoEntity_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEntityAccess().getEnumEntityParserRuleCall_1()); 
    }
    this_EnumEntity_1=ruleEnumEntity
    { 
        $current = $this_EnumEntity_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEntityAccess().getDaoEntityParserRuleCall_2()); 
    }
    this_DaoEntity_2=ruleDaoEntity
    { 
        $current = $this_DaoEntity_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDirectiveProperties
entryRuleDirectiveProperties returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDirectivePropertiesRule()); }
	 iv_ruleDirectiveProperties=ruleDirectiveProperties 
	 { $current=$iv_ruleDirectiveProperties.current; } 
	 EOF 
;

// Rule DirectiveProperties
ruleDirectiveProperties returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDirectivePropertiesRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDirectivePropertiesAccess().getFeaturesPojoAttributeCrossReference_0_0()); 
	    }
		ruleValidID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDirectivePropertiesAccess().getCommaKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDirectivePropertiesRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDirectivePropertiesAccess().getFeaturesPojoAttributeCrossReference_1_1_0()); 
	    }
		ruleValidID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePojoDirective
entryRulePojoDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPojoDirectiveRule()); }
	 iv_rulePojoDirective=rulePojoDirective 
	 { $current=$iv_rulePojoDirective.current; } 
	 EOF 
;

// Rule PojoDirective
rulePojoDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPojoDirectiveAccess().getPojoDirectiveToStringAction_0_0(),
            $current);
    }
)	otherlv_1='#ToString' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPojoDirectiveAccess().getToStringKeyword_0_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPojoDirectiveAccess().getLeftParenthesisKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoDirectiveAccess().getProplistDirectivePropertiesParserRuleCall_0_3_0()); 
	    }
		lv_proplist_3_0=ruleDirectiveProperties		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoDirectiveRule());
	        }
       		set(
       			$current, 
       			"proplist",
        		lv_proplist_3_0, 
        		"DirectiveProperties");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPojoDirectiveAccess().getRightParenthesisKeyword_0_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPojoDirectiveAccess().getPojoDirectiveIndexAction_1_0(),
            $current);
    }
)	otherlv_6='#Index' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPojoDirectiveAccess().getIndexKeyword_1_1());
    }
	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPojoDirectiveAccess().getLeftParenthesisKeyword_1_2());
    }
(
(
		lv_index_8_0=RULE_INT
		{
			newLeafNode(lv_index_8_0, grammarAccess.getPojoDirectiveAccess().getIndexINTTerminalRuleCall_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojoDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_8_0, 
        		"INT");
	    }

)
)	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPojoDirectiveAccess().getCommaKeyword_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoDirectiveAccess().getProplistDirectivePropertiesParserRuleCall_1_5_0()); 
	    }
		lv_proplist_10_0=ruleDirectiveProperties		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoDirectiveRule());
	        }
       		set(
       			$current, 
       			"proplist",
        		lv_proplist_10_0, 
        		"DirectiveProperties");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getPojoDirectiveAccess().getRightParenthesisKeyword_1_6());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPojoDirectiveAccess().getPojoDirectiveOperatorsAction_2_0(),
            $current);
    }
)	otherlv_13='#Operators' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getPojoDirectiveAccess().getOperatorsKeyword_2_1());
    }
(	otherlv_14='(' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getPojoDirectiveAccess().getLeftParenthesisKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoDirectiveAccess().getOperatorsSuffixValidIDParserRuleCall_2_2_1_0()); 
	    }
		lv_operatorsSuffix_15_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoDirectiveRule());
	        }
       		set(
       			$current, 
       			"operatorsSuffix",
        		lv_operatorsSuffix_15_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_16=')' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getPojoDirectiveAccess().getRightParenthesisKeyword_2_2_2());
    }
)?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPojoDirectiveAccess().getPojoDirectiveSerializableAction_3_0(),
            $current);
    }
)	otherlv_18='#Serializable' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getPojoDirectiveAccess().getSerializableKeyword_3_1());
    }
	otherlv_19='(' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getPojoDirectiveAccess().getLeftParenthesisKeyword_3_2());
    }
(
(
		lv_sernum_20_0=RULE_INT
		{
			newLeafNode(lv_sernum_20_0, grammarAccess.getPojoDirectiveAccess().getSernumINTTerminalRuleCall_3_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojoDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sernum",
        		lv_sernum_20_0, 
        		"INT");
	    }

)
)	otherlv_21=')' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getPojoDirectiveAccess().getRightParenthesisKeyword_3_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPojoDirectiveAccess().getPojoDirectiveDiscriminatorAction_4_0(),
            $current);
    }
)	otherlv_23='#InheritanceChild' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getPojoDirectiveAccess().getInheritanceChildKeyword_4_1());
    }
	otherlv_24='(' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getPojoDirectiveAccess().getLeftParenthesisKeyword_4_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoDirectiveAccess().getDiscriminatorValidIDParserRuleCall_4_3_0()); 
	    }
		lv_discriminator_25_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoDirectiveRule());
	        }
       		set(
       			$current, 
       			"discriminator",
        		lv_discriminator_25_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_26=')' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getPojoDirectiveAccess().getRightParenthesisKeyword_4_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPojoDirectiveAccess().getPojoDirectiveEqualsAction_5_0(),
            $current);
    }
)	otherlv_28='#Equals' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getPojoDirectiveAccess().getEqualsKeyword_5_1());
    }
	otherlv_29='(' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getPojoDirectiveAccess().getLeftParenthesisKeyword_5_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoDirectiveAccess().getProplistDirectivePropertiesParserRuleCall_5_3_0()); 
	    }
		lv_proplist_30_0=ruleDirectiveProperties		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoDirectiveRule());
	        }
       		set(
       			$current, 
       			"proplist",
        		lv_proplist_30_0, 
        		"DirectiveProperties");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_31=')' 
    {
    	newLeafNode(otherlv_31, grammarAccess.getPojoDirectiveAccess().getRightParenthesisKeyword_5_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPojoDirectiveAccess().getPojoDirectiveHashCodeAction_6_0(),
            $current);
    }
)	otherlv_33='#HashCode' 
    {
    	newLeafNode(otherlv_33, grammarAccess.getPojoDirectiveAccess().getHashCodeKeyword_6_1());
    }
	otherlv_34='(' 
    {
    	newLeafNode(otherlv_34, grammarAccess.getPojoDirectiveAccess().getLeftParenthesisKeyword_6_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoDirectiveAccess().getProplistDirectivePropertiesParserRuleCall_6_3_0()); 
	    }
		lv_proplist_35_0=ruleDirectiveProperties		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoDirectiveRule());
	        }
       		set(
       			$current, 
       			"proplist",
        		lv_proplist_35_0, 
        		"DirectiveProperties");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_36=')' 
    {
    	newLeafNode(otherlv_36, grammarAccess.getPojoDirectiveAccess().getRightParenthesisKeyword_6_4());
    }
))
;





// Entry rule entryRulePojoEntity
entryRulePojoEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPojoEntityRule()); }
	 iv_rulePojoEntity=rulePojoEntity 
	 { $current=$iv_rulePojoEntity.current; } 
	 EOF 
;

// Rule PojoEntity
rulePojoEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPojoEntityAccess().getDirectivesPojoDirectiveParserRuleCall_0_0()); 
	    }
		lv_directives_0_0=rulePojoDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoEntityRule());
	        }
       		add(
       			$current, 
       			"directives",
        		lv_directives_0_0, 
        		"PojoDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_final_1_0=	'final' 
    {
        newLeafNode(lv_final_1_0, grammarAccess.getPojoEntityAccess().getFinalFinalKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojoEntityRule());
	        }
       		setWithLastConsumed($current, "final", true, "final");
	    }

)
)?(
(
		lv_abstract_2_0=	'abstract' 
    {
        newLeafNode(lv_abstract_2_0, grammarAccess.getPojoEntityAccess().getAbstractAbstractKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojoEntityRule());
	        }
       		setWithLastConsumed($current, "abstract", true, "abstract");
	    }

)
)?	otherlv_3='#Pojo' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPojoEntityAccess().getPojoKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoEntityAccess().getNameValidIDParserRuleCall_4_0()); 
	    }
		lv_name_4_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoEntityRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='extends' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPojoEntityAccess().getExtendsKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoEntityAccess().getSuperTypeJvmParameterizedTypeReferenceParserRuleCall_5_1_0()); 
	    }
		lv_superType_6_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoEntityRule());
	        }
       		set(
       			$current, 
       			"superType",
        		lv_superType_6_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPojoEntityAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoEntityAccess().getAttributesPojoAttributeParserRuleCall_7_0()); 
	    }
		lv_attributes_8_0=rulePojoAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoEntityRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_8_0, 
        		"PojoAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPojoEntityAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRulePojoAttributeDirective
entryRulePojoAttributeDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPojoAttributeDirectiveRule()); }
	 iv_rulePojoAttributeDirective=rulePojoAttributeDirective 
	 { $current=$iv_rulePojoAttributeDirective.current; } 
	 EOF 
;

// Rule PojoAttributeDirective
rulePojoAttributeDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPojoAttributeDirectiveAccess().getPojoPropertyDirectiveRequiredAction_0_0(),
            $current);
    }
)	otherlv_1='#Required' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPojoAttributeDirectiveAccess().getRequiredKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPojoAttributeDirectiveAccess().getPojoPropertyDirectivePrimaryKeyAction_1_0(),
            $current);
    }
)	otherlv_3='#PrimaryKey' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPojoAttributeDirectiveAccess().getPrimaryKeyKeyword_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPojoAttributeDirectiveAccess().getPojoPropertyDirectiveDiscriminatorAction_2_0(),
            $current);
    }
)	otherlv_5='#InheritanceDiscriminator' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPojoAttributeDirectiveAccess().getInheritanceDiscriminatorKeyword_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPojoAttributeDirectiveAccess().getPojoPropertyDirectiveIndexAction_3_0(),
            $current);
    }
)	otherlv_7='#Index' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPojoAttributeDirectiveAccess().getIndexKeyword_3_1());
    }
	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPojoAttributeDirectiveAccess().getLeftParenthesisKeyword_3_2());
    }
(
(
		lv_index_9_0=RULE_INT
		{
			newLeafNode(lv_index_9_0, grammarAccess.getPojoAttributeDirectiveAccess().getIndexINTTerminalRuleCall_3_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPojoAttributeDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_9_0, 
        		"INT");
	    }

)
)	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getPojoAttributeDirectiveAccess().getRightParenthesisKeyword_3_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPojoAttributeDirectiveAccess().getPojoPropertyDirectiveVersionAction_4_0(),
            $current);
    }
)	otherlv_12='#Version' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getPojoAttributeDirectiveAccess().getVersionKeyword_4_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPojoAttributeDirectiveAccess().getPojoPropertyDirectiveUpdateColAction_5_0(),
            $current);
    }
)	otherlv_14='#UpdateCol' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getPojoAttributeDirectiveAccess().getUpdateColKeyword_5_1());
    }
	otherlv_15='(' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getPojoAttributeDirectiveAccess().getLeftParenthesisKeyword_5_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoAttributeDirectiveAccess().getUpdateColumn1ValidIDParserRuleCall_5_3_0()); 
	    }
		lv_updateColumn1_16_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoAttributeDirectiveRule());
	        }
       		set(
       			$current, 
       			"updateColumn1",
        		lv_updateColumn1_16_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_17=',' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getPojoAttributeDirectiveAccess().getCommaKeyword_5_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoAttributeDirectiveAccess().getUpdateColumn2ValidIDParserRuleCall_5_5_0()); 
	    }
		lv_updateColumn2_18_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoAttributeDirectiveRule());
	        }
       		set(
       			$current, 
       			"updateColumn2",
        		lv_updateColumn2_18_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_19=')' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getPojoAttributeDirectiveAccess().getRightParenthesisKeyword_5_6());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPojoAttributeDirectiveAccess().getPojoPropertyDirectiveCreateColAction_6_0(),
            $current);
    }
)	otherlv_21='#CreateCol' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getPojoAttributeDirectiveAccess().getCreateColKeyword_6_1());
    }
	otherlv_22='(' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getPojoAttributeDirectiveAccess().getLeftParenthesisKeyword_6_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoAttributeDirectiveAccess().getCreateColumn1ValidIDParserRuleCall_6_3_0()); 
	    }
		lv_createColumn1_23_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoAttributeDirectiveRule());
	        }
       		set(
       			$current, 
       			"createColumn1",
        		lv_createColumn1_23_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_24=',' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getPojoAttributeDirectiveAccess().getCommaKeyword_6_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoAttributeDirectiveAccess().getCreateColumn2ValidIDParserRuleCall_6_5_0()); 
	    }
		lv_createColumn2_25_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoAttributeDirectiveRule());
	        }
       		set(
       			$current, 
       			"createColumn2",
        		lv_createColumn2_25_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_26=')' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getPojoAttributeDirectiveAccess().getRightParenthesisKeyword_6_6());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPojoAttributeDirectiveAccess().getPojoPropertyDirectiveToInitAction_7_0(),
            $current);
    }
)	otherlv_28='#ToInit' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getPojoAttributeDirectiveAccess().getToInitKeyword_7_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPojoAttributeDirectiveAccess().getPojoPropertyDirectiveEnumInitAction_8_0(),
            $current);
    }
)	otherlv_30='#EnumInit' 
    {
    	newLeafNode(otherlv_30, grammarAccess.getPojoAttributeDirectiveAccess().getEnumInitKeyword_8_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPojoAttributeDirectiveAccess().getPojoPropertyDirectiveIsDefAction_9_0(),
            $current);
    }
)	otherlv_32='#IsDef' 
    {
    	newLeafNode(otherlv_32, grammarAccess.getPojoAttributeDirectiveAccess().getIsDefKeyword_9_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPojoAttributeDirectiveAccess().getPojoPropertyDirectiveEnumDefAction_10_0(),
            $current);
    }
)	otherlv_34='#EnumDef' 
    {
    	newLeafNode(otherlv_34, grammarAccess.getPojoAttributeDirectiveAccess().getEnumDefKeyword_10_1());
    }
))
;





// Entry rule entryRulePojoAttribute
entryRulePojoAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPojoAttributeRule()); }
	 iv_rulePojoAttribute=rulePojoAttribute 
	 { $current=$iv_rulePojoAttribute.current; } 
	 EOF 
;

// Rule PojoAttribute
rulePojoAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPojoAttributeAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoAttributeRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoAttributeAccess().getDirectivesPojoAttributeDirectiveParserRuleCall_1_0()); 
	    }
		lv_directives_1_0=rulePojoAttributeDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoAttributeRule());
	        }
       		add(
       			$current, 
       			"directives",
        		lv_directives_1_0, 
        		"PojoAttributeDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='#Attr' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPojoAttributeAccess().getAttrKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoAttributeAccess().getTypeJvmTypeReferenceParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoAttributeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoAttributeAccess().getNameValidIDParserRuleCall_4_0()); 
	    }
		lv_name_4_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoAttributeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPojoAttributeAccess().getEqualsSignKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPojoAttributeAccess().getInitExprXExpressionParserRuleCall_5_1_0()); 
	    }
		lv_initExpr_6_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPojoAttributeRule());
	        }
       		set(
       			$current, 
       			"initExpr",
        		lv_initExpr_6_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEnumDirective
entryRuleEnumDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumDirectiveRule()); }
	 iv_ruleEnumDirective=ruleEnumDirective 
	 { $current=$iv_ruleEnumDirective.current; } 
	 EOF 
;

// Rule EnumDirective
ruleEnumDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEnumDirectiveAccess().getEnumDirectiveSerializableAction_0(),
            $current);
    }
)	otherlv_1='#Serializable' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumDirectiveAccess().getSerializableKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumDirectiveAccess().getLeftParenthesisKeyword_2());
    }
(
(
		lv_sernum_3_0=RULE_INT
		{
			newLeafNode(lv_sernum_3_0, grammarAccess.getEnumDirectiveAccess().getSernumINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sernum",
        		lv_sernum_3_0, 
        		"INT");
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumDirectiveAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleEnumEntity
entryRuleEnumEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumEntityRule()); }
	 iv_ruleEnumEntity=ruleEnumEntity 
	 { $current=$iv_ruleEnumEntity.current; } 
	 EOF 
;

// Rule EnumEntity
ruleEnumEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumEntityAccess().getDirectivesEnumDirectiveParserRuleCall_0_0()); 
	    }
		lv_directives_0_0=ruleEnumDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumEntityRule());
	        }
       		add(
       			$current, 
       			"directives",
        		lv_directives_0_0, 
        		"EnumDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_final_1_0=	'final' 
    {
        newLeafNode(lv_final_1_0, grammarAccess.getEnumEntityAccess().getFinalFinalKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumEntityRule());
	        }
       		setWithLastConsumed($current, "final", true, "final");
	    }

)
)?	otherlv_2='#Enum' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumEntityAccess().getEnumKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumEntityAccess().getNameValidIDParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumEntityRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumEntityAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumEntityAccess().getAttributeEnumPropertyParserRuleCall_5_0()); 
	    }
		lv_attribute_5_0=ruleEnumProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumEntityRule());
	        }
       		set(
       			$current, 
       			"attribute",
        		lv_attribute_5_0, 
        		"EnumProperty");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEnumEntityAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleEnumPropertyValue
entryRuleEnumPropertyValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumPropertyValueRule()); }
	 iv_ruleEnumPropertyValue=ruleEnumPropertyValue 
	 { $current=$iv_ruleEnumPropertyValue.current; } 
	 EOF 
;

// Rule EnumPropertyValue
ruleEnumPropertyValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumPropertyValueAccess().getNameValidIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumPropertyValueRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumPropertyValueAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumPropertyValueAccess().getValueXExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumPropertyValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEnumPropertyDirective
entryRuleEnumPropertyDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumPropertyDirectiveRule()); }
	 iv_ruleEnumPropertyDirective=ruleEnumPropertyDirective 
	 { $current=$iv_ruleEnumPropertyDirective.current; } 
	 EOF 
;

// Rule EnumPropertyDirective
ruleEnumPropertyDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEnumPropertyDirectiveAccess().getEnumPropertyDirectiveValuesAction_0(),
            $current);
    }
)	otherlv_1='#Values' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumPropertyDirectiveAccess().getValuesKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumPropertyDirectiveAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumPropertyDirectiveAccess().getValuesEnumPropertyValueParserRuleCall_3_0()); 
	    }
		lv_values_3_0=ruleEnumPropertyValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumPropertyDirectiveRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_3_0, 
        		"EnumPropertyValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumPropertyDirectiveAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumPropertyDirectiveAccess().getValuesEnumPropertyValueParserRuleCall_4_1_0()); 
	    }
		lv_values_5_0=ruleEnumPropertyValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumPropertyDirectiveRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_5_0, 
        		"EnumPropertyValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEnumPropertyDirectiveAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleEnumProperty
entryRuleEnumProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumPropertyRule()); }
	 iv_ruleEnumProperty=ruleEnumProperty 
	 { $current=$iv_ruleEnumProperty.current; } 
	 EOF 
;

// Rule EnumProperty
ruleEnumProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumPropertyAccess().getDirectivesEnumPropertyDirectiveParserRuleCall_0_0()); 
	    }
		lv_directives_0_0=ruleEnumPropertyDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumPropertyRule());
	        }
       		add(
       			$current, 
       			"directives",
        		lv_directives_0_0, 
        		"EnumPropertyDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='#Attr' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumPropertyAccess().getAttrKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumPropertyAccess().getTypeJvmTypeReferenceParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumPropertyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumPropertyAccess().getNameValidIDParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumPropertyRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDaoDirectiveParameters
entryRuleDaoDirectiveParameters returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDaoDirectiveParametersRule()); }
	 iv_ruleDaoDirectiveParameters=ruleDaoDirectiveParameters 
	 { $current=$iv_ruleDaoDirectiveParameters.current; } 
	 EOF 
;

// Rule DaoDirectiveParameters
ruleDaoDirectiveParameters returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDaoDirectiveParametersAccess().getOutJvmParameterizedTypeReferenceParserRuleCall_0_0()); 
	    }
		lv_out_0_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaoDirectiveParametersRule());
	        }
       		set(
       			$current, 
       			"out",
        		lv_out_0_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDaoDirectiveParametersAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDaoDirectiveParametersAccess().getInsJvmParameterizedTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_ins_2_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaoDirectiveParametersRule());
	        }
       		add(
       			$current, 
       			"ins",
        		lv_ins_2_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDescendantAssignment
entryRuleDescendantAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDescendantAssignmentRule()); }
	 iv_ruleDescendantAssignment=ruleDescendantAssignment 
	 { $current=$iv_ruleDescendantAssignment.current; } 
	 EOF 
;

// Rule DescendantAssignment
ruleDescendantAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDescendantAssignmentAccess().getValueValidIDParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDescendantAssignmentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDescendantAssignmentAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDescendantAssignmentAccess().getDescendantJvmParameterizedTypeReferenceParserRuleCall_2_0()); 
	    }
		lv_descendant_2_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDescendantAssignmentRule());
	        }
       		set(
       			$current, 
       			"descendant",
        		lv_descendant_2_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunProcType
entryRuleFunProcType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunProcTypeRule()); }
	 iv_ruleFunProcType=ruleFunProcType 
	 { $current=$iv_ruleFunProcType.current; } 
	 EOF 
;

// Rule FunProcType
ruleFunProcType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunProcTypeAccess().getFunctionCallQueryAction_0_0(),
            $current);
    }
)	otherlv_1='#FunctionCallQuery' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunProcTypeAccess().getFunctionCallQueryKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunProcTypeAccess().getProcedureCallQueryAction_1_0(),
            $current);
    }
)	otherlv_3='#ProcedureCallQuery' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunProcTypeAccess().getProcedureCallQueryKeyword_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunProcTypeAccess().getFunctionCallAction_2_0(),
            $current);
    }
)	otherlv_5='#FunctionCall' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunProcTypeAccess().getFunctionCallKeyword_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunProcTypeAccess().getProcedureUpdateAction_3_0(),
            $current);
    }
)	otherlv_7='#ProcedureUpdate' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunProcTypeAccess().getProcedureUpdateKeyword_3_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunProcTypeAccess().getFunctionQueryAction_4_0(),
            $current);
    }
)	otherlv_9='#FunctionQuery' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFunProcTypeAccess().getFunctionQueryKeyword_4_1());
    }
))
;





// Entry rule entryRuleDaoDirective
entryRuleDaoDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDaoDirectiveRule()); }
	 iv_ruleDaoDirective=ruleDaoDirective 
	 { $current=$iv_ruleDaoDirective.current; } 
	 EOF 
;

// Rule DaoDirective
ruleDaoDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDaoDirectiveAccess().getDaoDirectiveSerializableAction_0_0(),
            $current);
    }
)	otherlv_1='#Serializable' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDaoDirectiveAccess().getSerializableKeyword_0_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDaoDirectiveAccess().getLeftParenthesisKeyword_0_2());
    }
(
(
		lv_sernum_3_0=RULE_INT
		{
			newLeafNode(lv_sernum_3_0, grammarAccess.getDaoDirectiveAccess().getSernumINTTerminalRuleCall_0_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDaoDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sernum",
        		lv_sernum_3_0, 
        		"INT");
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDaoDirectiveAccess().getRightParenthesisKeyword_0_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDaoDirectiveAccess().getDaoDirectiveDiscriminatorAction_1_0(),
            $current);
    }
)	otherlv_6='#InheritanceHandler' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDaoDirectiveAccess().getInheritanceHandlerKeyword_1_1());
    }
	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDaoDirectiveAccess().getLeftParenthesisKeyword_1_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDaoDirectiveRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDaoDirectiveAccess().getAncestorPojoAttributeCrossReference_1_3_0()); 
	    }
		ruleValidID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDaoDirectiveAccess().getCommaKeyword_1_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDaoDirectiveAccess().getDescendantsDescendantAssignmentParserRuleCall_1_4_1_0()); 
	    }
		lv_descendants_10_0=ruleDescendantAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaoDirectiveRule());
	        }
       		add(
       			$current, 
       			"descendants",
        		lv_descendants_10_0, 
        		"DescendantAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDaoDirectiveAccess().getRightParenthesisKeyword_1_5());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDaoDirectiveAccess().getDaoDirectiveCrudAction_2_0(),
            $current);
    }
)	otherlv_13='#CRUD' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getDaoDirectiveAccess().getCRUDKeyword_2_1());
    }
(((	'(' 
)=>	otherlv_14='(' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getDaoDirectiveAccess().getLeftParenthesisKeyword_2_2_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDaoDirectiveAccess().getPojoJvmParameterizedTypeReferenceParserRuleCall_2_2_1_0()); 
	    }
		lv_pojo_15_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaoDirectiveRule());
	        }
       		set(
       			$current, 
       			"pojo",
        		lv_pojo_15_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_16=')' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getDaoDirectiveAccess().getRightParenthesisKeyword_2_2_2());
    }
)?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDaoDirectiveAccess().getDaoDirectiveQueryAction_3_0(),
            $current);
    }
)	otherlv_18='#Query' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getDaoDirectiveAccess().getQueryKeyword_3_1());
    }
(((	'(' 
)=>	otherlv_19='(' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getDaoDirectiveAccess().getLeftParenthesisKeyword_3_2_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDaoDirectiveAccess().getPojoJvmParameterizedTypeReferenceParserRuleCall_3_2_1_0()); 
	    }
		lv_pojo_20_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaoDirectiveRule());
	        }
       		set(
       			$current, 
       			"pojo",
        		lv_pojo_20_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_21=')' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getDaoDirectiveAccess().getRightParenthesisKeyword_3_2_2());
    }
)?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDaoDirectiveAccess().getFunProcDirectiveAction_4_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDaoDirectiveAccess().getTypeFunProcTypeParserRuleCall_4_1_0()); 
	    }
		lv_type_23_0=ruleFunProcType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaoDirectiveRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_23_0, 
        		"FunProcType");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'(' 
)=>	otherlv_24='(' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getDaoDirectiveAccess().getLeftParenthesisKeyword_4_2_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDaoDirectiveAccess().getParamlistDaoDirectiveParametersParserRuleCall_4_2_1_0()); 
	    }
		lv_paramlist_25_0=ruleDaoDirectiveParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaoDirectiveRule());
	        }
       		set(
       			$current, 
       			"paramlist",
        		lv_paramlist_25_0, 
        		"DaoDirectiveParameters");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_26=')' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getDaoDirectiveAccess().getRightParenthesisKeyword_4_2_2());
    }
)?))
;





// Entry rule entryRuleDaoEntity
entryRuleDaoEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDaoEntityRule()); }
	 iv_ruleDaoEntity=ruleDaoEntity 
	 { $current=$iv_ruleDaoEntity.current; } 
	 EOF 
;

// Rule DaoEntity
ruleDaoEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDaoEntityAccess().getDirectivesDaoDirectiveParserRuleCall_0_0()); 
	    }
		lv_directives_0_0=ruleDaoDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaoEntityRule());
	        }
       		add(
       			$current, 
       			"directives",
        		lv_directives_0_0, 
        		"DaoDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_final_1_0=	'final' 
    {
        newLeafNode(lv_final_1_0, grammarAccess.getDaoEntityAccess().getFinalFinalKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDaoEntityRule());
	        }
       		setWithLastConsumed($current, "final", true, "final");
	    }

)
)?	otherlv_2='#Dao' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDaoEntityAccess().getDaoKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDaoEntityAccess().getNameValidIDParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaoEntityRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='extends' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDaoEntityAccess().getExtendsKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDaoEntityAccess().getSuperTypeJvmParameterizedTypeReferenceParserRuleCall_4_1_0()); 
	    }
		lv_superType_5_0=ruleJvmParameterizedTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDaoEntityRule());
	        }
       		set(
       			$current, 
       			"superType",
        		lv_superType_5_0, 
        		"JvmParameterizedTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDaoEntityAccess().getLeftCurlyBracketKeyword_5());
    }
	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDaoEntityAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleAnnotationDirective
entryRuleAnnotationDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationDirectiveRule()); }
	 iv_ruleAnnotationDirective=ruleAnnotationDirective 
	 { $current=$iv_ruleAnnotationDirective.current; } 
	 EOF 
;

// Rule AnnotationDirective
ruleAnnotationDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnnotationDirectiveAccess().getAnnotationDirectiveConflictAction_0_0(),
            $current);
    }
)	otherlv_1='#Conflict' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationDirectiveAccess().getConflictKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnnotationDirectiveAccess().getAnnotationDirectiveStaticAction_1_0(),
            $current);
    }
)	otherlv_3='#Static' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAnnotationDirectiveAccess().getStaticKeyword_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnnotationDirectiveAccess().getAnnotationDirectiveConstructorAction_2_0(),
            $current);
    }
)	otherlv_5='#Constructor' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAnnotationDirectiveAccess().getConstructorKeyword_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnnotationDirectiveAccess().getAnnotationDirectiveStandardAction_3_0(),
            $current);
    }
)	otherlv_7='#Standard' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAnnotationDirectiveAccess().getStandardKeyword_3_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnnotationDirectiveAccess().getAnnotationDirectiveSetterAction_4_0(),
            $current);
    }
)	otherlv_9='#Setter' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAnnotationDirectiveAccess().getSetterKeyword_4_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnnotationDirectiveAccess().getAnnotationDirectiveGetterAction_5_0(),
            $current);
    }
)	otherlv_11='#Getter' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getAnnotationDirectiveAccess().getGetterKeyword_5_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnnotationDirectiveAccess().getAnnotationDirectiveAttributeAction_6_0(),
            $current);
    }
)	otherlv_13='#Attribute' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getAnnotationDirectiveAccess().getAttributeKeyword_6_1());
    }
))
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getDirectivesAnnotationDirectiveParserRuleCall_0_0()); 
	    }
		lv_directives_0_0=ruleAnnotationDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		add(
       			$current, 
       			"directives",
        		lv_directives_0_0, 
        		"AnnotationDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getAnnotationXAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotation_1_0=ruleXAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		set(
       			$current, 
       			"annotation",
        		lv_annotation_1_0, 
        		"XAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXAnnotation
entryRuleXAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXAnnotationRule()); }
	 iv_ruleXAnnotation=ruleXAnnotation 
	 { $current=$iv_ruleXAnnotation.current; } 
	 EOF 
;

// Rule XAnnotation
ruleXAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXAnnotationAccess().getXAnnotationAction_0(),
            $current);
    }
)	otherlv_1='@' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXAnnotationAccess().getCommercialAtKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXAnnotationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXAnnotationAccess().getAnnotationTypeJvmAnnotationTypeCrossReference_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'(' 
)=>	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXAnnotationAccess().getLeftParenthesisKeyword_3_0());
    }
)((((((
(
		ruleValidID
)
)	'=' 
))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXAnnotationAccess().getElementValuePairsXAnnotationElementValuePairParserRuleCall_3_1_0_0_0()); 
	    }
		lv_elementValuePairs_4_0=ruleXAnnotationElementValuePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAnnotationRule());
	        }
       		add(
       			$current, 
       			"elementValuePairs",
        		lv_elementValuePairs_4_0, 
        		"XAnnotationElementValuePair");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getXAnnotationAccess().getCommaKeyword_3_1_0_1_0());
    }
((((
(
		ruleValidID
)
)	'=' 
))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXAnnotationAccess().getElementValuePairsXAnnotationElementValuePairParserRuleCall_3_1_0_1_1_0()); 
	    }
		lv_elementValuePairs_6_0=ruleXAnnotationElementValuePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAnnotationRule());
	        }
       		add(
       			$current, 
       			"elementValuePairs",
        		lv_elementValuePairs_6_0, 
        		"XAnnotationElementValuePair");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXAnnotationAccess().getValueXAnnotationElementValueOrCommaListParserRuleCall_3_1_1_0()); 
	    }
		lv_value_7_0=ruleXAnnotationElementValueOrCommaList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAnnotationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_7_0, 
        		"XAnnotationElementValueOrCommaList");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getXAnnotationAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleXAnnotationElementValuePair
entryRuleXAnnotationElementValuePair returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXAnnotationElementValuePairRule()); }
	 iv_ruleXAnnotationElementValuePair=ruleXAnnotationElementValuePair 
	 { $current=$iv_ruleXAnnotationElementValuePair.current; } 
	 EOF 
;

// Rule XAnnotationElementValuePair
ruleXAnnotationElementValuePair returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
(
		ruleValidID
)
)	'=' 
))=>((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXAnnotationElementValuePairRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXAnnotationElementValuePairAccess().getElementJvmOperationCrossReference_0_0_0_0()); 
	    }
		ruleValidID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXAnnotationElementValuePairAccess().getEqualsSignKeyword_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXAnnotationElementValuePairAccess().getValueXAnnotationElementValueParserRuleCall_1_0()); 
	    }
		lv_value_2_0=ruleXAnnotationElementValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAnnotationElementValuePairRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"XAnnotationElementValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXAnnotationElementValueOrCommaList
entryRuleXAnnotationElementValueOrCommaList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXAnnotationElementValueOrCommaListRule()); }
	 iv_ruleXAnnotationElementValueOrCommaList=ruleXAnnotationElementValueOrCommaList 
	 { $current=$iv_ruleXAnnotationElementValueOrCommaList.current; } 
	 EOF 
;

// Rule XAnnotationElementValueOrCommaList
ruleXAnnotationElementValueOrCommaList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((((
)	'#' 
	'[' 
))=>((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXAnnotationElementValueOrCommaListAccess().getXListLiteralAction_0_0_0_0(),
            $current);
    }
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXAnnotationElementValueOrCommaListAccess().getNumberSignKeyword_0_0_0_1());
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXAnnotationElementValueOrCommaListAccess().getLeftSquareBracketKeyword_0_0_0_2());
    }
))((
(
		{ 
	        newCompositeNode(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getElementsXAnnotationOrExpressionParserRuleCall_0_1_0_0()); 
	    }
		lv_elements_3_0=ruleXAnnotationOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAnnotationElementValueOrCommaListRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"XAnnotationOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXAnnotationElementValueOrCommaListAccess().getCommaKeyword_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getElementsXAnnotationOrExpressionParserRuleCall_0_1_1_1_0()); 
	    }
		lv_elements_5_0=ruleXAnnotationOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAnnotationElementValueOrCommaListRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_5_0, 
        		"XAnnotationOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXAnnotationElementValueOrCommaListAccess().getRightSquareBracketKeyword_0_2());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getXAnnotationOrExpressionParserRuleCall_1_0()); 
    }
    this_XAnnotationOrExpression_7=ruleXAnnotationOrExpression
    { 
        $current = $this_XAnnotationOrExpression_7.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getXAnnotationElementValueOrCommaListAccess().getXListLiteralElementsAction_1_1_0(),
            $current);
    }
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getXAnnotationElementValueOrCommaListAccess().getCommaKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getElementsXAnnotationOrExpressionParserRuleCall_1_1_1_1_0()); 
	    }
		lv_elements_10_0=ruleXAnnotationOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAnnotationElementValueOrCommaListRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_10_0, 
        		"XAnnotationOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?))
;





// Entry rule entryRuleXAnnotationElementValue
entryRuleXAnnotationElementValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXAnnotationElementValueRule()); }
	 iv_ruleXAnnotationElementValue=ruleXAnnotationElementValue 
	 { $current=$iv_ruleXAnnotationElementValue.current; } 
	 EOF 
;

// Rule XAnnotationElementValue
ruleXAnnotationElementValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((((
)	'#' 
	'[' 
))=>((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXAnnotationElementValueAccess().getXListLiteralAction_0_0_0_0(),
            $current);
    }
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXAnnotationElementValueAccess().getNumberSignKeyword_0_0_0_1());
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXAnnotationElementValueAccess().getLeftSquareBracketKeyword_0_0_0_2());
    }
))((
(
		{ 
	        newCompositeNode(grammarAccess.getXAnnotationElementValueAccess().getElementsXAnnotationOrExpressionParserRuleCall_0_1_0_0()); 
	    }
		lv_elements_3_0=ruleXAnnotationOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAnnotationElementValueRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"XAnnotationOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXAnnotationElementValueAccess().getCommaKeyword_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXAnnotationElementValueAccess().getElementsXAnnotationOrExpressionParserRuleCall_0_1_1_1_0()); 
	    }
		lv_elements_5_0=ruleXAnnotationOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAnnotationElementValueRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_5_0, 
        		"XAnnotationOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXAnnotationElementValueAccess().getRightSquareBracketKeyword_0_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getXAnnotationElementValueAccess().getXAnnotationOrExpressionParserRuleCall_1()); 
    }
    this_XAnnotationOrExpression_7=ruleXAnnotationOrExpression
    { 
        $current = $this_XAnnotationOrExpression_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXAnnotationOrExpression
entryRuleXAnnotationOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXAnnotationOrExpressionRule()); }
	 iv_ruleXAnnotationOrExpression=ruleXAnnotationOrExpression 
	 { $current=$iv_ruleXAnnotationOrExpression.current; } 
	 EOF 
;

// Rule XAnnotationOrExpression
ruleXAnnotationOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXAnnotationOrExpressionAccess().getXAnnotationParserRuleCall_0()); 
    }
    this_XAnnotation_0=ruleXAnnotation
    { 
        $current = $this_XAnnotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXAnnotationOrExpressionAccess().getXExpressionParserRuleCall_1()); 
    }
    this_XExpression_1=ruleXExpression
    { 
        $current = $this_XExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXExpression
entryRuleXExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpressionRule()); }
	 iv_ruleXExpression=ruleXExpression 
	 { $current=$iv_ruleXExpression.current; } 
	 EOF 
;

// Rule XExpression
ruleXExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getXExpressionAccess().getXAssignmentParserRuleCall()); 
    }
    this_XAssignment_0=ruleXAssignment
    { 
        $current = $this_XAssignment_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleXAssignment
entryRuleXAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXAssignmentRule()); }
	 iv_ruleXAssignment=ruleXAssignment 
	 { $current=$iv_ruleXAssignment.current; } 
	 EOF 
;

// Rule XAssignment
ruleXAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXAssignmentAccess().getXAssignmentAction_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXAssignmentRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXAssignmentAccess().getFeatureJvmIdentifiableElementCrossReference_0_1_0()); 
	    }
		ruleFeatureCallID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getXAssignmentAccess().getOpSingleAssignParserRuleCall_0_2()); 
    }
ruleOpSingleAssign
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXAssignmentAccess().getValueXAssignmentParserRuleCall_0_3_0()); 
	    }
		lv_value_3_0=ruleXAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAssignmentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"XAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
    { 
        newCompositeNode(grammarAccess.getXAssignmentAccess().getXOrExpressionParserRuleCall_1_0()); 
    }
    this_XOrExpression_4=ruleXOrExpression
    { 
        $current = $this_XOrExpression_4.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpMultiAssign
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXAssignmentRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXAssignmentAccess().getFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0()); 
	    }
		ruleOpMultiAssign		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXAssignmentAccess().getRightOperandXAssignmentParserRuleCall_1_1_1_0()); 
	    }
		lv_rightOperand_7_0=ruleXAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAssignmentRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_7_0, 
        		"XAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
))?))
;





// Entry rule entryRuleOpSingleAssign
entryRuleOpSingleAssign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpSingleAssignRule()); } 
	 iv_ruleOpSingleAssign=ruleOpSingleAssign 
	 { $current=$iv_ruleOpSingleAssign.current.getText(); }  
	 EOF 
;

// Rule OpSingleAssign
ruleOpSingleAssign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpSingleAssignAccess().getEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRuleOpMultiAssign
entryRuleOpMultiAssign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpMultiAssignRule()); } 
	 iv_ruleOpMultiAssign=ruleOpMultiAssign 
	 { $current=$iv_ruleOpMultiAssign.current.getText(); }  
	 EOF 
;

// Rule OpMultiAssign
ruleOpMultiAssign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getPlusSignEqualsSignKeyword_0()); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getHyphenMinusEqualsSignKeyword_1()); 
    }

    |
	kw='*=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getAsteriskEqualsSignKeyword_2()); 
    }

    |
	kw='/=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getSolidusEqualsSignKeyword_3()); 
    }

    |
	kw='%=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getPercentSignEqualsSignKeyword_4()); 
    }

    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getLessThanSignKeyword_5_0()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getLessThanSignKeyword_5_1()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getEqualsSignKeyword_5_2()); 
    }
)
    |(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getGreaterThanSignKeyword_6_0()); 
    }
(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getGreaterThanSignKeyword_6_1()); 
    }
)?
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getGreaterThanSignEqualsSignKeyword_6_2()); 
    }
))
    ;





// Entry rule entryRuleXOrExpression
entryRuleXOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXOrExpressionRule()); }
	 iv_ruleXOrExpression=ruleXOrExpression 
	 { $current=$iv_ruleXOrExpression.current; } 
	 EOF 
;

// Rule XOrExpression
ruleXOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXOrExpressionAccess().getXAndExpressionParserRuleCall_0()); 
    }
    this_XAndExpression_0=ruleXAndExpression
    { 
        $current = $this_XAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpOr
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXOrExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXOrExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpOr		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXOrExpressionAccess().getRightOperandXAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleXAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXOrExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpOr
entryRuleOpOr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpOrRule()); } 
	 iv_ruleOpOr=ruleOpOr 
	 { $current=$iv_ruleOpOr.current.getText(); }  
	 EOF 
;

// Rule OpOr
ruleOpOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOrAccess().getVerticalLineVerticalLineKeyword()); 
    }

    ;





// Entry rule entryRuleXAndExpression
entryRuleXAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXAndExpressionRule()); }
	 iv_ruleXAndExpression=ruleXAndExpression 
	 { $current=$iv_ruleXAndExpression.current; } 
	 EOF 
;

// Rule XAndExpression
ruleXAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXAndExpressionAccess().getXEqualityExpressionParserRuleCall_0()); 
    }
    this_XEqualityExpression_0=ruleXEqualityExpression
    { 
        $current = $this_XEqualityExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpAnd
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXAndExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXAndExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpAnd		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXAndExpressionAccess().getRightOperandXEqualityExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleXEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAndExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XEqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpAnd
entryRuleOpAnd returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpAndRule()); } 
	 iv_ruleOpAnd=ruleOpAnd 
	 { $current=$iv_ruleOpAnd.current.getText(); }  
	 EOF 
;

// Rule OpAnd
ruleOpAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='&&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpAndAccess().getAmpersandAmpersandKeyword()); 
    }

    ;





// Entry rule entryRuleXEqualityExpression
entryRuleXEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXEqualityExpressionRule()); }
	 iv_ruleXEqualityExpression=ruleXEqualityExpression 
	 { $current=$iv_ruleXEqualityExpression.current; } 
	 EOF 
;

// Rule XEqualityExpression
ruleXEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXEqualityExpressionAccess().getXRelationalExpressionParserRuleCall_0()); 
    }
    this_XRelationalExpression_0=ruleXRelationalExpression
    { 
        $current = $this_XRelationalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpEquality
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXEqualityExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXEqualityExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpEquality		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXEqualityExpressionAccess().getRightOperandXRelationalExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleXRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XRelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpEquality
entryRuleOpEquality returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpEqualityRule()); } 
	 iv_ruleOpEquality=ruleOpEquality 
	 { $current=$iv_ruleOpEquality.current.getText(); }  
	 EOF 
;

// Rule OpEquality
ruleOpEquality returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignKeyword_1()); 
    }

    |
	kw='===' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignEqualsSignKeyword_2()); 
    }

    |
	kw='!==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignEqualsSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleXRelationalExpression
entryRuleXRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXRelationalExpressionRule()); }
	 iv_ruleXRelationalExpression=ruleXRelationalExpression 
	 { $current=$iv_ruleXRelationalExpression.current; } 
	 EOF 
;

// Rule XRelationalExpression
ruleXRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXRelationalExpressionAccess().getXOtherOperatorExpressionParserRuleCall_0()); 
    }
    this_XOtherOperatorExpression_0=ruleXOtherOperatorExpression
    { 
        $current = $this_XOtherOperatorExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((((((
)	'instanceof' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0(),
            $current);
    }
)	otherlv_2='instanceof' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXRelationalExpressionAccess().getInstanceofKeyword_1_0_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXRelationalExpressionAccess().getTypeJvmTypeReferenceParserRuleCall_1_0_1_0()); 
	    }
		lv_type_3_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(((((
)(
(
		ruleOpCompare
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXRelationalExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXRelationalExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0()); 
	    }
		ruleOpCompare		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXRelationalExpressionAccess().getRightOperandXOtherOperatorExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_rightOperand_6_0=ruleXOtherOperatorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_6_0, 
        		"XOtherOperatorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleOpCompare
entryRuleOpCompare returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpCompareRule()); } 
	 iv_ruleOpCompare=ruleOpCompare 
	 { $current=$iv_ruleOpCompare.current.getText(); }  
	 EOF 
;

// Rule OpCompare
ruleOpCompare returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_0()); 
    }

    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getLessThanSignKeyword_1_0()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getEqualsSignKeyword_1_1()); 
    }
)
    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_2()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getLessThanSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleXOtherOperatorExpression
entryRuleXOtherOperatorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXOtherOperatorExpressionRule()); }
	 iv_ruleXOtherOperatorExpression=ruleXOtherOperatorExpression 
	 { $current=$iv_ruleXOtherOperatorExpression.current; } 
	 EOF 
;

// Rule XOtherOperatorExpression
ruleXOtherOperatorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getXAdditiveExpressionParserRuleCall_0()); 
    }
    this_XAdditiveExpression_0=ruleXAdditiveExpression
    { 
        $current = $this_XAdditiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpOther
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXOtherOperatorExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpOther		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getRightOperandXAdditiveExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleXAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXOtherOperatorExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XAdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpOther
entryRuleOpOther returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpOtherRule()); } 
	 iv_ruleOpOther=ruleOpOther 
	 { $current=$iv_ruleOpOther.current.getText(); }  
	 EOF 
;

// Rule OpOther
ruleOpOther returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getHyphenMinusGreaterThanSignKeyword_0()); 
    }

    |
	kw='..<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getFullStopFullStopLessThanSignKeyword_1()); 
    }

    |(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_2_0()); 
    }

	kw='..' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getFullStopFullStopKeyword_2_1()); 
    }
)
    |
	kw='..' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getFullStopFullStopKeyword_3()); 
    }

    |
	kw='=>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getEqualsSignGreaterThanSignKeyword_4()); 
    }

    |(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_0()); 
    }
((((
	'>' 

	'>' 
))=>(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_0_0_0()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_0_0_1()); 
    }
))
    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_1()); 
    }
))
    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_0()); 
    }
((((
	'<' 

	'<' 
))=>(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_0_0_0()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_0_0_1()); 
    }
))
    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_1()); 
    }

    |
	kw='=>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getEqualsSignGreaterThanSignKeyword_6_1_2()); 
    }
))
    |
	kw='<>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignGreaterThanSignKeyword_7()); 
    }

    |
	kw='?:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getQuestionMarkColonKeyword_8()); 
    }
)
    ;





// Entry rule entryRuleXAdditiveExpression
entryRuleXAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXAdditiveExpressionRule()); }
	 iv_ruleXAdditiveExpression=ruleXAdditiveExpression 
	 { $current=$iv_ruleXAdditiveExpression.current; } 
	 EOF 
;

// Rule XAdditiveExpression
ruleXAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXAdditiveExpressionAccess().getXMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_XMultiplicativeExpression_0=ruleXMultiplicativeExpression
    { 
        $current = $this_XMultiplicativeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpAdd
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXAdditiveExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXAdditiveExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpAdd		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXAdditiveExpressionAccess().getRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleXMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XMultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpAdd
entryRuleOpAdd returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpAddRule()); } 
	 iv_ruleOpAdd=ruleOpAdd 
	 { $current=$iv_ruleOpAdd.current.getText(); }  
	 EOF 
;

// Rule OpAdd
ruleOpAdd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpAddAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpAddAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleXMultiplicativeExpression
entryRuleXMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXMultiplicativeExpressionRule()); }
	 iv_ruleXMultiplicativeExpression=ruleXMultiplicativeExpression 
	 { $current=$iv_ruleXMultiplicativeExpression.current; } 
	 EOF 
;

// Rule XMultiplicativeExpression
ruleXMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXMultiplicativeExpressionAccess().getXUnaryOperationParserRuleCall_0()); 
    }
    this_XUnaryOperation_0=ruleXUnaryOperation
    { 
        $current = $this_XUnaryOperation_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpMulti
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMultiplicativeExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXMultiplicativeExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpMulti		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXMultiplicativeExpressionAccess().getRightOperandXUnaryOperationParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleXUnaryOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XUnaryOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpMulti
entryRuleOpMulti returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpMultiRule()); } 
	 iv_ruleOpMulti=ruleOpMulti 
	 { $current=$iv_ruleOpMulti.current.getText(); }  
	 EOF 
;

// Rule OpMulti
ruleOpMulti returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getAsteriskKeyword_0()); 
    }

    |
	kw='**' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getAsteriskAsteriskKeyword_1()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getSolidusKeyword_2()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getPercentSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleXUnaryOperation
entryRuleXUnaryOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXUnaryOperationRule()); }
	 iv_ruleXUnaryOperation=ruleXUnaryOperation 
	 { $current=$iv_ruleXUnaryOperation.current; } 
	 EOF 
;

// Rule XUnaryOperation
ruleXUnaryOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXUnaryOperationAccess().getXUnaryOperationAction_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXUnaryOperationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXUnaryOperationAccess().getFeatureJvmIdentifiableElementCrossReference_0_1_0()); 
	    }
		ruleOpUnary		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXUnaryOperationAccess().getOperandXUnaryOperationParserRuleCall_0_2_0()); 
	    }
		lv_operand_2_0=ruleXUnaryOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXUnaryOperationRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"XUnaryOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getXUnaryOperationAccess().getXCastedExpressionParserRuleCall_1()); 
    }
    this_XCastedExpression_3=ruleXCastedExpression
    { 
        $current = $this_XCastedExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOpUnary
entryRuleOpUnary returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpUnaryRule()); } 
	 iv_ruleOpUnary=ruleOpUnary 
	 { $current=$iv_ruleOpUnary.current.getText(); }  
	 EOF 
;

// Rule OpUnary
ruleOpUnary returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpUnaryAccess().getExclamationMarkKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpUnaryAccess().getPlusSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleXCastedExpression
entryRuleXCastedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXCastedExpressionRule()); }
	 iv_ruleXCastedExpression=ruleXCastedExpression 
	 { $current=$iv_ruleXCastedExpression.current; } 
	 EOF 
;

// Rule XCastedExpression
ruleXCastedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXCastedExpressionAccess().getXPostfixOperationParserRuleCall_0()); 
    }
    this_XPostfixOperation_0=ruleXPostfixOperation
    { 
        $current = $this_XPostfixOperation_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)	'as' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXCastedExpressionAccess().getAsKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXCastedExpressionAccess().getTypeJvmTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_type_3_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXCastedExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleXPostfixOperation
entryRuleXPostfixOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXPostfixOperationRule()); }
	 iv_ruleXPostfixOperation=ruleXPostfixOperation 
	 { $current=$iv_ruleXPostfixOperation.current; } 
	 EOF 
;

// Rule XPostfixOperation
ruleXPostfixOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXPostfixOperationAccess().getXMemberFeatureCallParserRuleCall_0()); 
    }
    this_XMemberFeatureCall_0=ruleXMemberFeatureCall
    { 
        $current = $this_XMemberFeatureCall_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)(
(
		ruleOpPostfix
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXPostfixOperationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXPostfixOperationAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_1_0()); 
	    }
		ruleOpPostfix		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleOpPostfix
entryRuleOpPostfix returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpPostfixRule()); } 
	 iv_ruleOpPostfix=ruleOpPostfix 
	 { $current=$iv_ruleOpPostfix.current.getText(); }  
	 EOF 
;

// Rule OpPostfix
ruleOpPostfix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='++' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpPostfixAccess().getPlusSignPlusSignKeyword_0()); 
    }

    |
	kw='--' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpPostfixAccess().getHyphenMinusHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleXMemberFeatureCall
entryRuleXMemberFeatureCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXMemberFeatureCallRule()); }
	 iv_ruleXMemberFeatureCall=ruleXMemberFeatureCall 
	 { $current=$iv_ruleXMemberFeatureCall.current; } 
	 EOF 
;

// Rule XMemberFeatureCall
ruleXMemberFeatureCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getXPrimaryExpressionParserRuleCall_0()); 
    }
    this_XPrimaryExpression_0=ruleXPrimaryExpression
    { 
        $current = $this_XPrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((((((
)(	'.' 

    |(
(
	'::' 
 

)
))(
(
		ruleFeatureCallID
)
)	ruleOpSingleAssign))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0(),
            $current);
    }
)(	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXMemberFeatureCallAccess().getFullStopKeyword_1_0_0_0_1_0());
    }

    |(
(
		lv_explicitStatic_3_0=	'::' 
    {
        newLeafNode(lv_explicitStatic_3_0, grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticColonColonKeyword_1_0_0_0_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
	        }
       		setWithLastConsumed($current, "explicitStatic", true, "::");
	    }

)
))(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0()); 
	    }
		ruleFeatureCallID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getOpSingleAssignParserRuleCall_1_0_0_0_3()); 
    }
ruleOpSingleAssign
    { 
        afterParserOrEnumRuleCall();
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getValueXAssignmentParserRuleCall_1_0_1_0()); 
	    }
		lv_value_6_0=ruleXAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_6_0, 
        		"XAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(((((
)(	'.' 

    |(
(
	'?.' 
 

)
)
    |(
(
	'::' 
 

)
))))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0(),
            $current);
    }
)(	otherlv_8='.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getXMemberFeatureCallAccess().getFullStopKeyword_1_1_0_0_1_0());
    }

    |(
(
		lv_nullSafe_9_0=	'?.' 
    {
        newLeafNode(lv_nullSafe_9_0, grammarAccess.getXMemberFeatureCallAccess().getNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
	        }
       		setWithLastConsumed($current, "nullSafe", true, "?.");
	    }

)
)
    |(
(
		lv_explicitStatic_10_0=	'::' 
    {
        newLeafNode(lv_explicitStatic_10_0, grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticColonColonKeyword_1_1_0_0_1_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
	        }
       		setWithLastConsumed($current, "explicitStatic", true, "::");
	    }

)
))))(	otherlv_11='<' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getXMemberFeatureCallAccess().getLessThanSignKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_1_0()); 
	    }
		lv_typeArguments_12_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_12_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getXMemberFeatureCallAccess().getCommaKeyword_1_1_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_2_1_0()); 
	    }
		lv_typeArguments_14_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_14_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_15='>' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getXMemberFeatureCallAccess().getGreaterThanSignKeyword_1_1_1_3());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getFeatureJvmIdentifiableElementCrossReference_1_1_2_0()); 
	    }
		ruleIdOrSuper		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
	'(' 
 

)
)=>
(
		lv_explicitOperationCall_17_0=	'(' 
    {
        newLeafNode(lv_explicitOperationCall_17_0, grammarAccess.getXMemberFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
	        }
       		setWithLastConsumed($current, "explicitOperationCall", true, "(");
	    }

)
)(((((
)((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXShortClosureParserRuleCall_1_1_3_1_0_0()); 
	    }
		lv_memberCallArguments_18_0=ruleXShortClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		lv_memberCallArguments_18_0, 
        		"XShortClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_0_0()); 
	    }
		lv_memberCallArguments_19_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		lv_memberCallArguments_19_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_20=',' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getXMemberFeatureCallAccess().getCommaKeyword_1_1_3_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_1_1_0()); 
	    }
		lv_memberCallArguments_21_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		lv_memberCallArguments_21_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*))?	otherlv_22=')' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getXMemberFeatureCallAccess().getRightParenthesisKeyword_1_1_3_2());
    }
)?((((
)	'[' 
))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXClosureParserRuleCall_1_1_4_0()); 
	    }
		lv_memberCallArguments_23_0=ruleXClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		lv_memberCallArguments_23_0, 
        		"XClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)?))*)
;





// Entry rule entryRuleXPrimaryExpression
entryRuleXPrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXPrimaryExpressionRule()); }
	 iv_ruleXPrimaryExpression=ruleXPrimaryExpression 
	 { $current=$iv_ruleXPrimaryExpression.current; } 
	 EOF 
;

// Rule XPrimaryExpression
ruleXPrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXConstructorCallParserRuleCall_0()); 
    }
    this_XConstructorCall_0=ruleXConstructorCall
    { 
        $current = $this_XConstructorCall_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXBlockExpressionParserRuleCall_1()); 
    }
    this_XBlockExpression_1=ruleXBlockExpression
    { 
        $current = $this_XBlockExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXSwitchExpressionParserRuleCall_2()); 
    }
    this_XSwitchExpression_2=ruleXSwitchExpression
    { 
        $current = $this_XSwitchExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |((((
)	'synchronized' 
	'(' 
))=>
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXSynchronizedExpressionParserRuleCall_3()); 
    }
    this_XSynchronizedExpression_3=ruleXSynchronizedExpression
    { 
        $current = $this_XSynchronizedExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXFeatureCallParserRuleCall_4()); 
    }
    this_XFeatureCall_4=ruleXFeatureCall
    { 
        $current = $this_XFeatureCall_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXLiteralParserRuleCall_5()); 
    }
    this_XLiteral_5=ruleXLiteral
    { 
        $current = $this_XLiteral_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXIfExpressionParserRuleCall_6()); 
    }
    this_XIfExpression_6=ruleXIfExpression
    { 
        $current = $this_XIfExpression_6.current; 
        afterParserOrEnumRuleCall();
    }

    |((((
)	'for' 
	'(' 
(
(
ruleJvmFormalParameter
)
)	':' 
))=>
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXForLoopExpressionParserRuleCall_7()); 
    }
    this_XForLoopExpression_7=ruleXForLoopExpression
    { 
        $current = $this_XForLoopExpression_7.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXBasicForLoopExpressionParserRuleCall_8()); 
    }
    this_XBasicForLoopExpression_8=ruleXBasicForLoopExpression
    { 
        $current = $this_XBasicForLoopExpression_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXWhileExpressionParserRuleCall_9()); 
    }
    this_XWhileExpression_9=ruleXWhileExpression
    { 
        $current = $this_XWhileExpression_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXDoWhileExpressionParserRuleCall_10()); 
    }
    this_XDoWhileExpression_10=ruleXDoWhileExpression
    { 
        $current = $this_XDoWhileExpression_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXThrowExpressionParserRuleCall_11()); 
    }
    this_XThrowExpression_11=ruleXThrowExpression
    { 
        $current = $this_XThrowExpression_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXReturnExpressionParserRuleCall_12()); 
    }
    this_XReturnExpression_12=ruleXReturnExpression
    { 
        $current = $this_XReturnExpression_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXTryCatchFinallyExpressionParserRuleCall_13()); 
    }
    this_XTryCatchFinallyExpression_13=ruleXTryCatchFinallyExpression
    { 
        $current = $this_XTryCatchFinallyExpression_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXParenthesizedExpressionParserRuleCall_14()); 
    }
    this_XParenthesizedExpression_14=ruleXParenthesizedExpression
    { 
        $current = $this_XParenthesizedExpression_14.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXLiteral
entryRuleXLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXLiteralRule()); }
	 iv_ruleXLiteral=ruleXLiteral 
	 { $current=$iv_ruleXLiteral.current; } 
	 EOF 
;

// Rule XLiteral
ruleXLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXCollectionLiteralParserRuleCall_0()); 
    }
    this_XCollectionLiteral_0=ruleXCollectionLiteral
    { 
        $current = $this_XCollectionLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((((
)	'[' 
))=>
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXClosureParserRuleCall_1()); 
    }
    this_XClosure_1=ruleXClosure
    { 
        $current = $this_XClosure_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXBooleanLiteralParserRuleCall_2()); 
    }
    this_XBooleanLiteral_2=ruleXBooleanLiteral
    { 
        $current = $this_XBooleanLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXNumberLiteralParserRuleCall_3()); 
    }
    this_XNumberLiteral_3=ruleXNumberLiteral
    { 
        $current = $this_XNumberLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXNullLiteralParserRuleCall_4()); 
    }
    this_XNullLiteral_4=ruleXNullLiteral
    { 
        $current = $this_XNullLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXStringLiteralParserRuleCall_5()); 
    }
    this_XStringLiteral_5=ruleXStringLiteral
    { 
        $current = $this_XStringLiteral_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXTypeLiteralParserRuleCall_6()); 
    }
    this_XTypeLiteral_6=ruleXTypeLiteral
    { 
        $current = $this_XTypeLiteral_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXCollectionLiteral
entryRuleXCollectionLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXCollectionLiteralRule()); }
	 iv_ruleXCollectionLiteral=ruleXCollectionLiteral 
	 { $current=$iv_ruleXCollectionLiteral.current; } 
	 EOF 
;

// Rule XCollectionLiteral
ruleXCollectionLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXCollectionLiteralAccess().getXSetLiteralParserRuleCall_0()); 
    }
    this_XSetLiteral_0=ruleXSetLiteral
    { 
        $current = $this_XSetLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXCollectionLiteralAccess().getXListLiteralParserRuleCall_1()); 
    }
    this_XListLiteral_1=ruleXListLiteral
    { 
        $current = $this_XListLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXSetLiteral
entryRuleXSetLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXSetLiteralRule()); }
	 iv_ruleXSetLiteral=ruleXSetLiteral 
	 { $current=$iv_ruleXSetLiteral.current; } 
	 EOF 
;

// Rule XSetLiteral
ruleXSetLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXSetLiteralAccess().getXSetLiteralAction_0(),
            $current);
    }
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXSetLiteralAccess().getNumberSignKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXSetLiteralAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXSetLiteralAccess().getElementsXExpressionParserRuleCall_3_0_0()); 
	    }
		lv_elements_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSetLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXSetLiteralAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXSetLiteralAccess().getElementsXExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_elements_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSetLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXSetLiteralAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleXListLiteral
entryRuleXListLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXListLiteralRule()); }
	 iv_ruleXListLiteral=ruleXListLiteral 
	 { $current=$iv_ruleXListLiteral.current; } 
	 EOF 
;

// Rule XListLiteral
ruleXListLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXListLiteralAccess().getXListLiteralAction_0(),
            $current);
    }
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXListLiteralAccess().getNumberSignKeyword_1());
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXListLiteralAccess().getLeftSquareBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXListLiteralAccess().getElementsXExpressionParserRuleCall_3_0_0()); 
	    }
		lv_elements_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXListLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXListLiteralAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXListLiteralAccess().getElementsXExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_elements_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXListLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXListLiteralAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleXClosure
entryRuleXClosure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXClosureRule()); }
	 iv_ruleXClosure=ruleXClosure 
	 { $current=$iv_ruleXClosure.current; } 
	 EOF 
;

// Rule XClosure
ruleXClosure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)	'[' 
))=>((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXClosureAccess().getXClosureAction_0_0_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXClosureAccess().getLeftSquareBracketKeyword_0_0_1());
    }
))(((((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>(((
(
		{ 
	        newCompositeNode(grammarAccess.getXClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_0_0()); 
	    }
		lv_declaredFormalParameters_2_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXClosureRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		lv_declaredFormalParameters_2_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXClosureAccess().getCommaKeyword_1_0_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_1_1_0()); 
	    }
		lv_declaredFormalParameters_4_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXClosureRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		lv_declaredFormalParameters_4_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		lv_explicitSyntax_5_0=	'|' 
    {
        newLeafNode(lv_explicitSyntax_5_0, grammarAccess.getXClosureAccess().getExplicitSyntaxVerticalLineKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXClosureRule());
	        }
       		setWithLastConsumed($current, "explicitSyntax", true, "|");
	    }

)
)))?(
(
		{ 
	        newCompositeNode(grammarAccess.getXClosureAccess().getExpressionXExpressionInClosureParserRuleCall_2_0()); 
	    }
		lv_expression_6_0=ruleXExpressionInClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXClosureRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_6_0, 
        		"XExpressionInClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getXClosureAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleXExpressionInClosure
entryRuleXExpressionInClosure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpressionInClosureRule()); }
	 iv_ruleXExpressionInClosure=ruleXExpressionInClosure 
	 { $current=$iv_ruleXExpressionInClosure.current; } 
	 EOF 
;

// Rule XExpressionInClosure
ruleXExpressionInClosure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXExpressionInClosureAccess().getXBlockExpressionAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getXExpressionInClosureAccess().getExpressionsXExpressionOrVarDeclarationParserRuleCall_1_0_0()); 
	    }
		lv_expressions_1_0=ruleXExpressionOrVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpressionInClosureRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_1_0, 
        		"XExpressionOrVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXExpressionInClosureAccess().getSemicolonKeyword_1_1());
    }
)?)*)
;





// Entry rule entryRuleXShortClosure
entryRuleXShortClosure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXShortClosureRule()); }
	 iv_ruleXShortClosure=ruleXShortClosure 
	 { $current=$iv_ruleXShortClosure.current; } 
	 EOF 
;

// Rule XShortClosure
ruleXShortClosure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXShortClosureAccess().getXClosureAction_0_0_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getXShortClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_0_0()); 
	    }
		lv_declaredFormalParameters_1_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXShortClosureRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		lv_declaredFormalParameters_1_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXShortClosureAccess().getCommaKeyword_0_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXShortClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_1_1_0()); 
	    }
		lv_declaredFormalParameters_3_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXShortClosureRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		lv_declaredFormalParameters_3_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		lv_explicitSyntax_4_0=	'|' 
    {
        newLeafNode(lv_explicitSyntax_4_0, grammarAccess.getXShortClosureAccess().getExplicitSyntaxVerticalLineKeyword_0_0_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXShortClosureRule());
	        }
       		setWithLastConsumed($current, "explicitSyntax", true, "|");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXShortClosureAccess().getExpressionXExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXShortClosureRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXParenthesizedExpression
entryRuleXParenthesizedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXParenthesizedExpressionRule()); }
	 iv_ruleXParenthesizedExpression=ruleXParenthesizedExpression 
	 { $current=$iv_ruleXParenthesizedExpression.current; } 
	 EOF 
;

// Rule XParenthesizedExpression
ruleXParenthesizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getXParenthesizedExpressionAccess().getXExpressionParserRuleCall_1()); 
    }
    this_XExpression_1=ruleXExpression
    { 
        $current = $this_XExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXParenthesizedExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleXIfExpression
entryRuleXIfExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXIfExpressionRule()); }
	 iv_ruleXIfExpression=ruleXIfExpression 
	 { $current=$iv_ruleXIfExpression.current; } 
	 EOF 
;

// Rule XIfExpression
ruleXIfExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXIfExpressionAccess().getXIfExpressionAction_0(),
            $current);
    }
)	otherlv_1='if' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXIfExpressionAccess().getIfKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXIfExpressionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXIfExpressionAccess().getIfXExpressionParserRuleCall_3_0()); 
	    }
		lv_if_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXIfExpressionRule());
	        }
       		set(
       			$current, 
       			"if",
        		lv_if_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXIfExpressionAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXIfExpressionAccess().getThenXExpressionParserRuleCall_5_0()); 
	    }
		lv_then_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXIfExpressionRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_6='else' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXIfExpressionAccess().getElseKeyword_6_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXIfExpressionAccess().getElseXExpressionParserRuleCall_6_1_0()); 
	    }
		lv_else_7_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXIfExpressionRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_7_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleXSwitchExpression
entryRuleXSwitchExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXSwitchExpressionRule()); }
	 iv_ruleXSwitchExpression=ruleXSwitchExpression 
	 { $current=$iv_ruleXSwitchExpression.current; } 
	 EOF 
;

// Rule XSwitchExpression
ruleXSwitchExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXSwitchExpressionAccess().getXSwitchExpressionAction_0(),
            $current);
    }
)	otherlv_1='switch' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXSwitchExpressionAccess().getSwitchKeyword_1());
    }
(((((	'(' 
(
(
ruleJvmFormalParameter
)
)	':' 
))=>(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXSwitchExpressionAccess().getLeftParenthesisKeyword_2_0_0_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_2_0_0_0_1_0()); 
	    }
		lv_declaredParam_3_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"declaredParam",
        		lv_declaredParam_3_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXSwitchExpressionAccess().getColonKeyword_2_0_0_0_2());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getSwitchXExpressionParserRuleCall_2_0_1_0()); 
	    }
		lv_switch_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"switch",
        		lv_switch_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXSwitchExpressionAccess().getRightParenthesisKeyword_2_0_2());
    }
)
    |(((((
(
ruleJvmFormalParameter
)
)	':' 
))=>((
(
		{ 
	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_2_1_0_0_0_0()); 
	    }
		lv_declaredParam_7_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"declaredParam",
        		lv_declaredParam_7_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=':' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getXSwitchExpressionAccess().getColonKeyword_2_1_0_0_1());
    }
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getSwitchXExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_switch_9_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"switch",
        		lv_switch_9_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))	otherlv_10='{' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getXSwitchExpressionAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getCasesXCasePartParserRuleCall_4_0()); 
	    }
		lv_cases_11_0=ruleXCasePart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_11_0, 
        		"XCasePart");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_12='default' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getXSwitchExpressionAccess().getDefaultKeyword_5_0());
    }
	otherlv_13=':' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getXSwitchExpressionAccess().getColonKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getDefaultXExpressionParserRuleCall_5_2_0()); 
	    }
		lv_default_14_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_14_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getXSwitchExpressionAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleXCasePart
entryRuleXCasePart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXCasePartRule()); }
	 iv_ruleXCasePart=ruleXCasePart 
	 { $current=$iv_ruleXCasePart.current; } 
	 EOF 
;

// Rule XCasePart
ruleXCasePart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXCasePartAccess().getXCasePartAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXCasePartAccess().getTypeGuardJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeGuard_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXCasePartRule());
	        }
       		set(
       			$current, 
       			"typeGuard",
        		lv_typeGuard_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_2='case' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXCasePartAccess().getCaseKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXCasePartAccess().getCaseXExpressionParserRuleCall_2_1_0()); 
	    }
		lv_case_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXCasePartRule());
	        }
       		set(
       			$current, 
       			"case",
        		lv_case_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXCasePartAccess().getColonKeyword_3_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXCasePartAccess().getThenXExpressionParserRuleCall_3_0_1_0()); 
	    }
		lv_then_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXCasePartRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_fallThrough_6_0=	',' 
    {
        newLeafNode(lv_fallThrough_6_0, grammarAccess.getXCasePartAccess().getFallThroughCommaKeyword_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXCasePartRule());
	        }
       		setWithLastConsumed($current, "fallThrough", true, ",");
	    }

)
)))
;





// Entry rule entryRuleXForLoopExpression
entryRuleXForLoopExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXForLoopExpressionRule()); }
	 iv_ruleXForLoopExpression=ruleXForLoopExpression 
	 { $current=$iv_ruleXForLoopExpression.current; } 
	 EOF 
;

// Rule XForLoopExpression
ruleXForLoopExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)	'for' 
	'(' 
(
(
ruleJvmFormalParameter
)
)	':' 
))=>((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXForLoopExpressionAccess().getXForLoopExpressionAction_0_0_0(),
            $current);
    }
)	otherlv_1='for' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXForLoopExpressionAccess().getForKeyword_0_0_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXForLoopExpressionAccess().getLeftParenthesisKeyword_0_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXForLoopExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_0_0_3_0()); 
	    }
		lv_declaredParam_3_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"declaredParam",
        		lv_declaredParam_3_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXForLoopExpressionAccess().getColonKeyword_0_0_4());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXForLoopExpressionAccess().getForExpressionXExpressionParserRuleCall_1_0()); 
	    }
		lv_forExpression_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"forExpression",
        		lv_forExpression_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXForLoopExpressionAccess().getRightParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXForLoopExpressionAccess().getEachExpressionXExpressionParserRuleCall_3_0()); 
	    }
		lv_eachExpression_7_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"eachExpression",
        		lv_eachExpression_7_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXBasicForLoopExpression
entryRuleXBasicForLoopExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXBasicForLoopExpressionRule()); }
	 iv_ruleXBasicForLoopExpression=ruleXBasicForLoopExpression 
	 { $current=$iv_ruleXBasicForLoopExpression.current; } 
	 EOF 
;

// Rule XBasicForLoopExpression
ruleXBasicForLoopExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXBasicForLoopExpressionAccess().getXBasicForLoopExpressionAction_0(),
            $current);
    }
)	otherlv_1='for' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXBasicForLoopExpressionAccess().getForKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXBasicForLoopExpressionAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_0_0()); 
	    }
		lv_initExpressions_3_0=ruleXExpressionOrVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
	        }
       		add(
       			$current, 
       			"initExpressions",
        		lv_initExpressions_3_0, 
        		"XExpressionOrVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXBasicForLoopExpressionAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_1_1_0()); 
	    }
		lv_initExpressions_5_0=ruleXExpressionOrVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
	        }
       		add(
       			$current, 
       			"initExpressions",
        		lv_initExpressions_5_0, 
        		"XExpressionOrVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXBasicForLoopExpressionAccess().getSemicolonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getExpressionXExpressionParserRuleCall_5_0()); 
	    }
		lv_expression_7_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_7_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getXBasicForLoopExpressionAccess().getSemicolonKeyword_6());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getUpdateExpressionsXExpressionParserRuleCall_7_0_0()); 
	    }
		lv_updateExpressions_9_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
	        }
       		add(
       			$current, 
       			"updateExpressions",
        		lv_updateExpressions_9_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getXBasicForLoopExpressionAccess().getCommaKeyword_7_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getUpdateExpressionsXExpressionParserRuleCall_7_1_1_0()); 
	    }
		lv_updateExpressions_11_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
	        }
       		add(
       			$current, 
       			"updateExpressions",
        		lv_updateExpressions_11_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getXBasicForLoopExpressionAccess().getRightParenthesisKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getEachExpressionXExpressionParserRuleCall_9_0()); 
	    }
		lv_eachExpression_13_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"eachExpression",
        		lv_eachExpression_13_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXWhileExpression
entryRuleXWhileExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXWhileExpressionRule()); }
	 iv_ruleXWhileExpression=ruleXWhileExpression 
	 { $current=$iv_ruleXWhileExpression.current; } 
	 EOF 
;

// Rule XWhileExpression
ruleXWhileExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXWhileExpressionAccess().getXWhileExpressionAction_0(),
            $current);
    }
)	otherlv_1='while' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXWhileExpressionAccess().getWhileKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXWhileExpressionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXWhileExpressionAccess().getPredicateXExpressionParserRuleCall_3_0()); 
	    }
		lv_predicate_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXWhileExpressionRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXWhileExpressionAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXWhileExpressionAccess().getBodyXExpressionParserRuleCall_5_0()); 
	    }
		lv_body_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXWhileExpressionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXDoWhileExpression
entryRuleXDoWhileExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXDoWhileExpressionRule()); }
	 iv_ruleXDoWhileExpression=ruleXDoWhileExpression 
	 { $current=$iv_ruleXDoWhileExpression.current; } 
	 EOF 
;

// Rule XDoWhileExpression
ruleXDoWhileExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXDoWhileExpressionAccess().getXDoWhileExpressionAction_0(),
            $current);
    }
)	otherlv_1='do' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXDoWhileExpressionAccess().getDoKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXDoWhileExpressionAccess().getBodyXExpressionParserRuleCall_2_0()); 
	    }
		lv_body_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXDoWhileExpressionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='while' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXDoWhileExpressionAccess().getWhileKeyword_3());
    }
	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXDoWhileExpressionAccess().getLeftParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXDoWhileExpressionAccess().getPredicateXExpressionParserRuleCall_5_0()); 
	    }
		lv_predicate_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXDoWhileExpressionRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXDoWhileExpressionAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleXBlockExpression
entryRuleXBlockExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXBlockExpressionRule()); }
	 iv_ruleXBlockExpression=ruleXBlockExpression 
	 { $current=$iv_ruleXBlockExpression.current; } 
	 EOF 
;

// Rule XBlockExpression
ruleXBlockExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXBlockExpressionAccess().getXBlockExpressionAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXBlockExpressionAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXBlockExpressionAccess().getExpressionsXExpressionOrVarDeclarationParserRuleCall_2_0_0()); 
	    }
		lv_expressions_2_0=ruleXExpressionOrVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBlockExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"XExpressionOrVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXBlockExpressionAccess().getSemicolonKeyword_2_1());
    }
)?)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXBlockExpressionAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleXExpressionOrVarDeclaration
entryRuleXExpressionOrVarDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpressionOrVarDeclarationRule()); }
	 iv_ruleXExpressionOrVarDeclaration=ruleXExpressionOrVarDeclaration 
	 { $current=$iv_ruleXExpressionOrVarDeclaration.current; } 
	 EOF 
;

// Rule XExpressionOrVarDeclaration
ruleXExpressionOrVarDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXExpressionOrVarDeclarationAccess().getXVariableDeclarationParserRuleCall_0()); 
    }
    this_XVariableDeclaration_0=ruleXVariableDeclaration
    { 
        $current = $this_XVariableDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXExpressionOrVarDeclarationAccess().getXExpressionParserRuleCall_1()); 
    }
    this_XExpression_1=ruleXExpression
    { 
        $current = $this_XExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXVariableDeclaration
entryRuleXVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXVariableDeclarationRule()); }
	 iv_ruleXVariableDeclaration=ruleXVariableDeclaration 
	 { $current=$iv_ruleXVariableDeclaration.current; } 
	 EOF 
;

// Rule XVariableDeclaration
ruleXVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXVariableDeclarationAccess().getXVariableDeclarationAction_0(),
            $current);
    }
)((
(
		lv_writeable_1_0=	'var' 
    {
        newLeafNode(lv_writeable_1_0, grammarAccess.getXVariableDeclarationAccess().getWriteableVarKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXVariableDeclarationRule());
	        }
       		setWithLastConsumed($current, "writeable", true, "var");
	    }

)
)
    |	otherlv_2='val' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXVariableDeclarationAccess().getValKeyword_1_1());
    }
)(((((
(
ruleJvmTypeReference
)
)(
(
ruleValidID
)
)))=>((
(
		{ 
	        newCompositeNode(grammarAccess.getXVariableDeclarationAccess().getTypeJvmTypeReferenceParserRuleCall_2_0_0_0_0()); 
	    }
		lv_type_3_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXVariableDeclarationAccess().getNameValidIDParserRuleCall_2_0_0_1_0()); 
	    }
		lv_name_4_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXVariableDeclarationAccess().getNameValidIDParserRuleCall_2_1_0()); 
	    }
		lv_name_5_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXVariableDeclarationAccess().getEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXVariableDeclarationAccess().getRightXExpressionParserRuleCall_3_1_0()); 
	    }
		lv_right_7_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_7_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleJvmFormalParameter
entryRuleJvmFormalParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmFormalParameterRule()); }
	 iv_ruleJvmFormalParameter=ruleJvmFormalParameter 
	 { $current=$iv_ruleJvmFormalParameter.current; } 
	 EOF 
;

// Rule JvmFormalParameter
ruleJvmFormalParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJvmFormalParameterAccess().getParameterTypeJvmTypeReferenceParserRuleCall_0_0()); 
	    }
		lv_parameterType_0_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmFormalParameterRule());
	        }
       		set(
       			$current, 
       			"parameterType",
        		lv_parameterType_0_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmFormalParameterAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmFormalParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFullJvmFormalParameter
entryRuleFullJvmFormalParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFullJvmFormalParameterRule()); }
	 iv_ruleFullJvmFormalParameter=ruleFullJvmFormalParameter 
	 { $current=$iv_ruleFullJvmFormalParameter.current; } 
	 EOF 
;

// Rule FullJvmFormalParameter
ruleFullJvmFormalParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFullJvmFormalParameterAccess().getParameterTypeJvmTypeReferenceParserRuleCall_0_0()); 
	    }
		lv_parameterType_0_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFullJvmFormalParameterRule());
	        }
       		set(
       			$current, 
       			"parameterType",
        		lv_parameterType_0_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFullJvmFormalParameterAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFullJvmFormalParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXFeatureCall
entryRuleXFeatureCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXFeatureCallRule()); }
	 iv_ruleXFeatureCall=ruleXFeatureCall 
	 { $current=$iv_ruleXFeatureCall.current; } 
	 EOF 
;

// Rule XFeatureCall
ruleXFeatureCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXFeatureCallAccess().getXFeatureCallAction_0(),
            $current);
    }
)(	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXFeatureCallAccess().getLessThanSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_typeArguments_2_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_2_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXFeatureCallAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
	    }
		lv_typeArguments_4_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_4_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getXFeatureCallAccess().getGreaterThanSignKeyword_1_3());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXFeatureCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureJvmIdentifiableElementCrossReference_2_0()); 
	    }
		ruleIdOrSuper		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
	'(' 
 

)
)=>
(
		lv_explicitOperationCall_7_0=	'(' 
    {
        newLeafNode(lv_explicitOperationCall_7_0, grammarAccess.getXFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXFeatureCallRule());
	        }
       		setWithLastConsumed($current, "explicitOperationCall", true, "(");
	    }

)
)(((((
)((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXShortClosureParserRuleCall_3_1_0_0()); 
	    }
		lv_featureCallArguments_8_0=ruleXShortClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		lv_featureCallArguments_8_0, 
        		"XShortClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_0_0()); 
	    }
		lv_featureCallArguments_9_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		lv_featureCallArguments_9_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getXFeatureCallAccess().getCommaKeyword_3_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_1_1_0()); 
	    }
		lv_featureCallArguments_11_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		lv_featureCallArguments_11_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*))?	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getXFeatureCallAccess().getRightParenthesisKeyword_3_2());
    }
)?((((
)	'[' 
))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXClosureParserRuleCall_4_0()); 
	    }
		lv_featureCallArguments_13_0=ruleXClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		lv_featureCallArguments_13_0, 
        		"XClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleFeatureCallID
entryRuleFeatureCallID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureCallIDRule()); } 
	 iv_ruleFeatureCallID=ruleFeatureCallID 
	 { $current=$iv_ruleFeatureCallID.current.getText(); }  
	 EOF 
;

// Rule FeatureCallID
ruleFeatureCallID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFeatureCallIDAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='extends' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeatureCallIDAccess().getExtendsKeyword_1()); 
    }

    |
	kw='static' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeatureCallIDAccess().getStaticKeyword_2()); 
    }

    |
	kw='import' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeatureCallIDAccess().getImportKeyword_3()); 
    }

    |
	kw='extension' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeatureCallIDAccess().getExtensionKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleIdOrSuper
entryRuleIdOrSuper returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdOrSuperRule()); } 
	 iv_ruleIdOrSuper=ruleIdOrSuper 
	 { $current=$iv_ruleIdOrSuper.current.getText(); }  
	 EOF 
;

// Rule IdOrSuper
ruleIdOrSuper returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIdOrSuperAccess().getFeatureCallIDParserRuleCall_0()); 
    }
    this_FeatureCallID_0=ruleFeatureCallID    {
		$current.merge(this_FeatureCallID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='super' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdOrSuperAccess().getSuperKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleXConstructorCall
entryRuleXConstructorCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXConstructorCallRule()); }
	 iv_ruleXConstructorCall=ruleXConstructorCall 
	 { $current=$iv_ruleXConstructorCall.current; } 
	 EOF 
;

// Rule XConstructorCall
ruleXConstructorCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXConstructorCallAccess().getXConstructorCallAction_0(),
            $current);
    }
)	otherlv_1='new' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXConstructorCallAccess().getNewKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXConstructorCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getConstructorJvmConstructorCrossReference_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'<' 
)=>	otherlv_3='<' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXConstructorCallAccess().getLessThanSignKeyword_3_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0()); 
	    }
		lv_typeArguments_4_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_4_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getXConstructorCallAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0()); 
	    }
		lv_typeArguments_6_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_6_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7='>' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getXConstructorCallAccess().getGreaterThanSignKeyword_3_3());
    }
)?(((
(
	'(' 
 

)
)=>
(
		lv_explicitConstructorCall_8_0=	'(' 
    {
        newLeafNode(lv_explicitConstructorCall_8_0, grammarAccess.getXConstructorCallAccess().getExplicitConstructorCallLeftParenthesisKeyword_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXConstructorCallRule());
	        }
       		setWithLastConsumed($current, "explicitConstructorCall", true, "(");
	    }

)
)(((((
)((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getArgumentsXShortClosureParserRuleCall_4_1_0_0()); 
	    }
		lv_arguments_9_0=ruleXShortClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_9_0, 
        		"XShortClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getArgumentsXExpressionParserRuleCall_4_1_1_0_0()); 
	    }
		lv_arguments_10_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_10_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getXConstructorCallAccess().getCommaKeyword_4_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getArgumentsXExpressionParserRuleCall_4_1_1_1_1_0()); 
	    }
		lv_arguments_12_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_12_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*))?	otherlv_13=')' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getXConstructorCallAccess().getRightParenthesisKeyword_4_2());
    }
)?((((
)	'[' 
))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getArgumentsXClosureParserRuleCall_5_0()); 
	    }
		lv_arguments_14_0=ruleXClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_14_0, 
        		"XClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleXBooleanLiteral
entryRuleXBooleanLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXBooleanLiteralRule()); }
	 iv_ruleXBooleanLiteral=ruleXBooleanLiteral 
	 { $current=$iv_ruleXBooleanLiteral.current; } 
	 EOF 
;

// Rule XBooleanLiteral
ruleXBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXBooleanLiteralAccess().getXBooleanLiteralAction_0(),
            $current);
    }
)(	otherlv_1='false' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXBooleanLiteralAccess().getFalseKeyword_1_0());
    }

    |(
(
		lv_isTrue_2_0=	'true' 
    {
        newLeafNode(lv_isTrue_2_0, grammarAccess.getXBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "isTrue", true, "true");
	    }

)
)))
;





// Entry rule entryRuleXNullLiteral
entryRuleXNullLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXNullLiteralRule()); }
	 iv_ruleXNullLiteral=ruleXNullLiteral 
	 { $current=$iv_ruleXNullLiteral.current; } 
	 EOF 
;

// Rule XNullLiteral
ruleXNullLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXNullLiteralAccess().getXNullLiteralAction_0(),
            $current);
    }
)	otherlv_1='null' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXNullLiteralAccess().getNullKeyword_1());
    }
)
;





// Entry rule entryRuleXNumberLiteral
entryRuleXNumberLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXNumberLiteralRule()); }
	 iv_ruleXNumberLiteral=ruleXNumberLiteral 
	 { $current=$iv_ruleXNumberLiteral.current; } 
	 EOF 
;

// Rule XNumberLiteral
ruleXNumberLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXNumberLiteralAccess().getXNumberLiteralAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXNumberLiteralAccess().getValueNumberParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXNumberLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Number");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXStringLiteral
entryRuleXStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXStringLiteralRule()); }
	 iv_ruleXStringLiteral=ruleXStringLiteral 
	 { $current=$iv_ruleXStringLiteral.current; } 
	 EOF 
;

// Rule XStringLiteral
ruleXStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXStringLiteralAccess().getXStringLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getXStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleXTypeLiteral
entryRuleXTypeLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXTypeLiteralRule()); }
	 iv_ruleXTypeLiteral=ruleXTypeLiteral 
	 { $current=$iv_ruleXTypeLiteral.current; } 
	 EOF 
;

// Rule XTypeLiteral
ruleXTypeLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXTypeLiteralAccess().getXTypeLiteralAction_0(),
            $current);
    }
)	otherlv_1='typeof' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXTypeLiteralAccess().getTypeofKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXTypeLiteralAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXTypeLiteralRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXTypeLiteralAccess().getTypeJvmTypeCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXTypeLiteralAccess().getArrayDimensionsArrayBracketsParserRuleCall_4_0()); 
	    }
		lv_arrayDimensions_4_0=ruleArrayBrackets		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTypeLiteralRule());
	        }
       		add(
       			$current, 
       			"arrayDimensions",
        		lv_arrayDimensions_4_0, 
        		"ArrayBrackets");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getXTypeLiteralAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleXThrowExpression
entryRuleXThrowExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXThrowExpressionRule()); }
	 iv_ruleXThrowExpression=ruleXThrowExpression 
	 { $current=$iv_ruleXThrowExpression.current; } 
	 EOF 
;

// Rule XThrowExpression
ruleXThrowExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXThrowExpressionAccess().getXThrowExpressionAction_0(),
            $current);
    }
)	otherlv_1='throw' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXThrowExpressionAccess().getThrowKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXThrowExpressionAccess().getExpressionXExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXThrowExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXReturnExpression
entryRuleXReturnExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXReturnExpressionRule()); }
	 iv_ruleXReturnExpression=ruleXReturnExpression 
	 { $current=$iv_ruleXReturnExpression.current; } 
	 EOF 
;

// Rule XReturnExpression
ruleXReturnExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXReturnExpressionAccess().getXReturnExpressionAction_0(),
            $current);
    }
)	otherlv_1='return' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXReturnExpressionAccess().getReturnKeyword_1());
    }
((	'extends' 
 | 	'static' 
 | 	'import' 
 | 	'extension' 
 | 	'!' 
 | 	'-' 
 | 	'+' 
 | 	'new' 
 | 	'{' 
 | 	'switch' 
 | 	'synchronized' 
 | 	'<' 
 | 	'super' 
 | 	'#' 
 | 	'[' 
 | 	'false' 
 | 	'true' 
 | 	'null' 
 | 	'typeof' 
 | 	'if' 
 | 	'for' 
 | 	'while' 
 | 	'do' 
 | 	'throw' 
 | 	'return' 
 | 	'try' 
 | 	'(' 
 | 	RULE_ID | 	RULE_HEX | 	RULE_INT | 	RULE_DECIMAL | 	RULE_STRING)=>
(
		{ 
	        newCompositeNode(grammarAccess.getXReturnExpressionAccess().getExpressionXExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXReturnExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleXTryCatchFinallyExpression
entryRuleXTryCatchFinallyExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionRule()); }
	 iv_ruleXTryCatchFinallyExpression=ruleXTryCatchFinallyExpression 
	 { $current=$iv_ruleXTryCatchFinallyExpression.current; } 
	 EOF 
;

// Rule XTryCatchFinallyExpression
ruleXTryCatchFinallyExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXTryCatchFinallyExpressionAccess().getXTryCatchFinallyExpressionAction_0(),
            $current);
    }
)	otherlv_1='try' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXTryCatchFinallyExpressionAccess().getTryKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionAccess().getExpressionXExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTryCatchFinallyExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((((	'catch' 
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionAccess().getCatchClausesXCatchClauseParserRuleCall_3_0_0_0()); 
	    }
		lv_catchClauses_3_0=ruleXCatchClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTryCatchFinallyExpressionRule());
	        }
       		add(
       			$current, 
       			"catchClauses",
        		lv_catchClauses_3_0, 
        		"XCatchClause");
	        afterParserOrEnumRuleCall();
	    }

)
)+(((	'finally' 
)=>	otherlv_4='finally' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyKeyword_3_0_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionXExpressionParserRuleCall_3_0_1_1_0()); 
	    }
		lv_finallyExpression_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTryCatchFinallyExpressionRule());
	        }
       		set(
       			$current, 
       			"finallyExpression",
        		lv_finallyExpression_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(	otherlv_6='finally' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionXExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_finallyExpression_7_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTryCatchFinallyExpressionRule());
	        }
       		set(
       			$current, 
       			"finallyExpression",
        		lv_finallyExpression_7_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleXSynchronizedExpression
entryRuleXSynchronizedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXSynchronizedExpressionRule()); }
	 iv_ruleXSynchronizedExpression=ruleXSynchronizedExpression 
	 { $current=$iv_ruleXSynchronizedExpression.current; } 
	 EOF 
;

// Rule XSynchronizedExpression
ruleXSynchronizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)	'synchronized' 
	'(' 
))=>((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXSynchronizedExpressionAccess().getXSynchronizedExpressionAction_0_0_0(),
            $current);
    }
)	otherlv_1='synchronized' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXSynchronizedExpressionAccess().getSynchronizedKeyword_0_0_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXSynchronizedExpressionAccess().getLeftParenthesisKeyword_0_0_2());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXSynchronizedExpressionAccess().getParamXExpressionParserRuleCall_1_0()); 
	    }
		lv_param_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSynchronizedExpressionRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXSynchronizedExpressionAccess().getRightParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXSynchronizedExpressionAccess().getExpressionXExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSynchronizedExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXCatchClause
entryRuleXCatchClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXCatchClauseRule()); }
	 iv_ruleXCatchClause=ruleXCatchClause 
	 { $current=$iv_ruleXCatchClause.current; } 
	 EOF 
;

// Rule XCatchClause
ruleXCatchClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	'catch' 
)=>	otherlv_0='catch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXCatchClauseAccess().getCatchKeyword_0());
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXCatchClauseAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXCatchClauseAccess().getDeclaredParamFullJvmFormalParameterParserRuleCall_2_0()); 
	    }
		lv_declaredParam_2_0=ruleFullJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXCatchClauseRule());
	        }
       		set(
       			$current, 
       			"declaredParam",
        		lv_declaredParam_2_0, 
        		"FullJvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXCatchClauseAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXCatchClauseAccess().getExpressionXExpressionParserRuleCall_4_0()); 
	    }
		lv_expression_4_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXCatchClauseRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(((
	'.' 
)=>
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); 
    }
    this_ValidID_2=ruleValidID    {
		$current.merge(this_ValidID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_HEX_0=RULE_HEX    {
		$current.merge(this_HEX_0);
    }

    { 
    newLeafNode(this_HEX_0, grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0()); 
    }

    |((    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0()); 
    }

    |    this_DECIMAL_2=RULE_DECIMAL    {
		$current.merge(this_DECIMAL_2);
    }

    { 
    newLeafNode(this_DECIMAL_2, grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1()); 
    }
)(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0()); 
    }
(    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0()); 
    }

    |    this_DECIMAL_5=RULE_DECIMAL    {
		$current.merge(this_DECIMAL_5);
    }

    { 
    newLeafNode(this_DECIMAL_5, grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1()); 
    }
))?))
    ;
finally {
	myHiddenTokenState.restore();
}







// Entry rule entryRuleJvmTypeReference
entryRuleJvmTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmTypeReferenceRule()); }
	 iv_ruleJvmTypeReference=ruleJvmTypeReference 
	 { $current=$iv_ruleJvmTypeReference.current; } 
	 EOF 
;

// Rule JvmTypeReference
ruleJvmTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getJvmParameterizedTypeReferenceParserRuleCall_0_0()); 
    }
    this_JvmParameterizedTypeReference_0=ruleJvmParameterizedTypeReference
    { 
        $current = $this_JvmParameterizedTypeReference_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)	ruleArrayBrackets))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getArrayBracketsParserRuleCall_0_1_0_1()); 
    }
ruleArrayBrackets
    { 
        afterParserOrEnumRuleCall();
    }
))*)
    |
    { 
        newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getXFunctionTypeRefParserRuleCall_1()); 
    }
    this_XFunctionTypeRef_3=ruleXFunctionTypeRef
    { 
        $current = $this_XFunctionTypeRef_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArrayBrackets
entryRuleArrayBrackets returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayBracketsRule()); } 
	 iv_ruleArrayBrackets=ruleArrayBrackets 
	 { $current=$iv_ruleArrayBrackets.current.getText(); }  
	 EOF 
;

// Rule ArrayBrackets
ruleArrayBrackets returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayBracketsAccess().getLeftSquareBracketKeyword_0()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayBracketsAccess().getRightSquareBracketKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleXFunctionTypeRef
entryRuleXFunctionTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXFunctionTypeRefRule()); }
	 iv_ruleXFunctionTypeRef=ruleXFunctionTypeRef 
	 { $current=$iv_ruleXFunctionTypeRef.current; } 
	 EOF 
;

// Rule XFunctionTypeRef
ruleXFunctionTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXFunctionTypeRefAccess().getLeftParenthesisKeyword_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_0_0()); 
	    }
		lv_paramTypes_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
	        }
       		add(
       			$current, 
       			"paramTypes",
        		lv_paramTypes_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXFunctionTypeRefAccess().getCommaKeyword_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_1_1_0()); 
	    }
		lv_paramTypes_3_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
	        }
       		add(
       			$current, 
       			"paramTypes",
        		lv_paramTypes_3_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXFunctionTypeRefAccess().getRightParenthesisKeyword_0_2());
    }
)?	otherlv_5='=>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getXFunctionTypeRefAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getReturnTypeJvmTypeReferenceParserRuleCall_2_0()); 
	    }
		lv_returnType_6_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_6_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmParameterizedTypeReference
entryRuleJvmParameterizedTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceRule()); }
	 iv_ruleJvmParameterizedTypeReference=ruleJvmParameterizedTypeReference 
	 { $current=$iv_ruleJvmParameterizedTypeReference.current; } 
	 EOF 
;

// Rule JvmParameterizedTypeReference
ruleJvmParameterizedTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'<' 
)=>	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_arguments_2_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
	    }
		lv_arguments_4_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_3());
    }
(((((
)	'.' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0(),
            $current);
    }
)	otherlv_7='.' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getJvmParameterizedTypeReferenceAccess().getFullStopKeyword_1_4_0_0_1());
    }
))(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_1_4_1_0()); 
	    }
		ruleValidID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'<' 
)=>	otherlv_9='<' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_4_2_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_1_0()); 
	    }
		lv_arguments_10_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_10_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_4_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_2_1_0()); 
	    }
		lv_arguments_12_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_12_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_13='>' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_4_2_3());
    }
)?)*)?)
;





// Entry rule entryRuleJvmArgumentTypeReference
entryRuleJvmArgumentTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceRule()); }
	 iv_ruleJvmArgumentTypeReference=ruleJvmArgumentTypeReference 
	 { $current=$iv_ruleJvmArgumentTypeReference.current; } 
	 EOF 
;

// Rule JvmArgumentTypeReference
ruleJvmArgumentTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmTypeReferenceParserRuleCall_0()); 
    }
    this_JvmTypeReference_0=ruleJvmTypeReference
    { 
        $current = $this_JvmTypeReference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmWildcardTypeReferenceParserRuleCall_1()); 
    }
    this_JvmWildcardTypeReference_1=ruleJvmWildcardTypeReference
    { 
        $current = $this_JvmWildcardTypeReference_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJvmWildcardTypeReference
entryRuleJvmWildcardTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceRule()); }
	 iv_ruleJvmWildcardTypeReference=ruleJvmWildcardTypeReference 
	 { $current=$iv_ruleJvmWildcardTypeReference.current; } 
	 EOF 
;

// Rule JvmWildcardTypeReference
ruleJvmWildcardTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getJvmWildcardTypeReferenceAccess().getJvmWildcardTypeReferenceAction_0(),
            $current);
    }
)	otherlv_1='?' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJvmWildcardTypeReferenceAccess().getQuestionMarkKeyword_1());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundParserRuleCall_2_0_0_0()); 
	    }
		lv_constraints_2_0=ruleJvmUpperBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_2_0, 
        		"JvmUpperBound");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundAndedParserRuleCall_2_0_1_0()); 
	    }
		lv_constraints_3_0=ruleJvmUpperBoundAnded		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_3_0, 
        		"JvmUpperBoundAnded");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundParserRuleCall_2_1_0_0()); 
	    }
		lv_constraints_4_0=ruleJvmLowerBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_4_0, 
        		"JvmLowerBound");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundAndedParserRuleCall_2_1_1_0()); 
	    }
		lv_constraints_5_0=ruleJvmLowerBoundAnded		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_5_0, 
        		"JvmLowerBoundAnded");
	        afterParserOrEnumRuleCall();
	    }

)
)*))?)
;





// Entry rule entryRuleJvmUpperBound
entryRuleJvmUpperBound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmUpperBoundRule()); }
	 iv_ruleJvmUpperBound=ruleJvmUpperBound 
	 { $current=$iv_ruleJvmUpperBound.current; } 
	 EOF 
;

// Rule JvmUpperBound
ruleJvmUpperBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='extends' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmUpperBoundAccess().getExtendsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmUpperBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmUpperBoundRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmUpperBoundAnded
entryRuleJvmUpperBoundAnded returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmUpperBoundAndedRule()); }
	 iv_ruleJvmUpperBoundAnded=ruleJvmUpperBoundAnded 
	 { $current=$iv_ruleJvmUpperBoundAnded.current; } 
	 EOF 
;

// Rule JvmUpperBoundAnded
ruleJvmUpperBoundAnded returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='&' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmUpperBoundAndedAccess().getAmpersandKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmUpperBoundAndedAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmUpperBoundAndedRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmLowerBound
entryRuleJvmLowerBound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmLowerBoundRule()); }
	 iv_ruleJvmLowerBound=ruleJvmLowerBound 
	 { $current=$iv_ruleJvmLowerBound.current; } 
	 EOF 
;

// Rule JvmLowerBound
ruleJvmLowerBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='super' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmLowerBoundAccess().getSuperKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmLowerBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmLowerBoundRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmLowerBoundAnded
entryRuleJvmLowerBoundAnded returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmLowerBoundAndedRule()); }
	 iv_ruleJvmLowerBoundAnded=ruleJvmLowerBoundAnded 
	 { $current=$iv_ruleJvmLowerBoundAnded.current; } 
	 EOF 
;

// Rule JvmLowerBoundAnded
ruleJvmLowerBoundAnded returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='&' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmLowerBoundAndedAccess().getAmpersandKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmLowerBoundAndedAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmLowerBoundAndedRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1()); 
    }

	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidIDRule()); } 
	 iv_ruleValidID=ruleValidID 
	 { $current=$iv_ruleValidID.current.getText(); }  
	 EOF 
;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleXImportSection
entryRuleXImportSection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXImportSectionRule()); }
	 iv_ruleXImportSection=ruleXImportSection 
	 { $current=$iv_ruleXImportSection.current; } 
	 EOF 
;

// Rule XImportSection
ruleXImportSection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getXImportSectionAccess().getImportDeclarationsXImportDeclarationParserRuleCall_0()); 
	    }
		lv_importDeclarations_0_0=ruleXImportDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXImportSectionRule());
	        }
       		add(
       			$current, 
       			"importDeclarations",
        		lv_importDeclarations_0_0, 
        		"XImportDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleXImportDeclaration
entryRuleXImportDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXImportDeclarationRule()); }
	 iv_ruleXImportDeclaration=ruleXImportDeclaration 
	 { $current=$iv_ruleXImportDeclaration.current; } 
	 EOF 
;

// Rule XImportDeclaration
ruleXImportDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXImportDeclarationAccess().getImportKeyword_0());
    }
(((
(
		lv_static_1_0=	'static' 
    {
        newLeafNode(lv_static_1_0, grammarAccess.getXImportDeclarationAccess().getStaticStaticKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
       		setWithLastConsumed($current, "static", true, "static");
	    }

)
)(
(
		lv_extension_2_0=	'extension' 
    {
        newLeafNode(lv_extension_2_0, grammarAccess.getXImportDeclarationAccess().getExtensionExtensionKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
       		setWithLastConsumed($current, "extension", true, "extension");
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeCrossReference_1_0_2_0()); 
	    }
		ruleQualifiedNameInStaticImport		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_wildcard_4_0=	'*' 
    {
        newLeafNode(lv_wildcard_4_0, grammarAccess.getXImportDeclarationAccess().getWildcardAsteriskKeyword_1_0_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
       		setWithLastConsumed($current, "wildcard", true, "*");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getMemberNameValidIDParserRuleCall_1_0_3_1_0()); 
	    }
		lv_memberName_5_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXImportDeclarationRule());
	        }
       		set(
       			$current, 
       			"memberName",
        		lv_memberName_5_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeCrossReference_1_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_2_0()); 
	    }
		lv_importedNamespace_7_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXImportDeclarationRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_7_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getXImportDeclarationAccess().getSemicolonKeyword_2());
    }
)?)
;





// Entry rule entryRuleQualifiedNameInStaticImport
entryRuleQualifiedNameInStaticImport returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameInStaticImportRule()); } 
	 iv_ruleQualifiedNameInStaticImport=ruleQualifiedNameInStaticImport 
	 { $current=$iv_ruleQualifiedNameInStaticImport.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameInStaticImport
ruleQualifiedNameInStaticImport returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameInStaticImportAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameInStaticImportAccess().getFullStopKeyword_1()); 
    }
)+
    ;





RULE_HEX : ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+ ('#' (('b'|'B') ('i'|'I')|('l'|'L')))?;

RULE_INT : '0'..'9' ('0'..'9'|'_')*;

RULE_DECIMAL : RULE_INT (('e'|'E') ('+'|'-')? RULE_INT)? (('b'|'B') ('i'|'I'|'d'|'D')|('l'|'L'|'d'|'D'|'f'|'F'))?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'?|'\'' ('\\' .|~(('\\'|'\'')))* '\''?);

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


