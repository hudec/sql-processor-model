/*
 * generated by Xtext
 */
package org.sqlproc.model.generator

import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.sqlproc.model.processorModel.PojoProperty
import org.sqlproc.model.ImportManager

import static org.sqlproc.model.util.Utils.*
import static org.eclipse.xtext.EcoreUtil2.*
import org.sqlproc.model.processorModel.PojoType
import org.sqlproc.model.processorModel.EnumProperty
import org.sqlproc.model.processorModel.PojoEntity
import com.google.inject.Inject
import org.sqlproc.model.processorModel.PojoPropertyDirectiveUpdateCol
import org.sqlproc.model.processorModel.PojoPropertyDirectiveCreateCol
import org.sqlproc.model.processorModel.PojoPropertyDirectivePrimaryKey
import org.sqlproc.model.processorModel.PojoPropertyDirectiveRequired
import org.sqlproc.model.processorModel.PojoPropertyDirectiveIndex
import org.sqlproc.model.processorModel.PojoPropertyDirectiveVersion
import org.sqlproc.model.processorModel.EnumEntity
import java.util.List
import org.sqlproc.model.processorModel.PojoDirectiveOperators
import org.sqlproc.model.processorModel.PojoDao
import org.sqlproc.model.processorModel.PojoDirectiveSerializable
import java.util.Map
import org.sqlproc.model.processorModel.PojoDirectiveIndex
import java.util.TreeMap
import org.sqlproc.model.processorModel.DaoDirectiveDiscriminator
import org.sqlproc.model.processorModel.PojoDirectiveDiscriminator
import org.sqlproc.model.processorModel.DaoDirectiveCrud
import org.sqlproc.model.processorModel.DaoDirectiveQuery
import org.sqlproc.model.processorModel.DaoDirective
import org.sqlproc.model.processorModel.Artifacts
import org.eclipse.xtext.scoping.IScopeProvider
import org.eclipse.xtext.naming.IQualifiedNameConverter
import org.sqlproc.model.processorModel.ProcessorModelPackage
import org.sqlproc.model.processorModel.FunProcDirective
import org.eclipse.xtext.common.types.JvmPrimitiveType
import org.sqlproc.model.processorModel.Implements
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveGenerics
import org.sqlproc.model.processorModel.Annotation
import org.sqlproc.model.processorModel.AnnotatedEntity
import org.sqlproc.model.processorModel.AnnotationDirectiveConflict
import org.sqlproc.model.processorModel.AnnotationDirectiveConstructor
import org.sqlproc.model.processorModel.AnnotationDirectiveStatic
import org.sqlproc.model.processorModel.AnnotationDirectiveStandard
import org.sqlproc.model.processorModel.AnnotationDirectiveSetter
import org.sqlproc.model.processorModel.PojoAnnotatedProperty
import org.sqlproc.model.processorModel.AnnotationDirectiveGetter
import org.sqlproc.model.processorModel.AnnotationDirectiveAttribute
import org.sqlproc.model.processorModel.PojoPropertyDirectiveToInit
import org.sqlproc.model.processorModel.PojoPropertyDirectiveEnumInit
import org.sqlproc.model.processorModel.PojoPropertyDirectiveIsDef
import org.sqlproc.model.processorModel.PojoPropertyDirectiveEnumDef
import org.sqlproc.model.processorModel.PojoDirectiveToString
import org.sqlproc.model.processorModel.PojoDirectiveEquals
import org.sqlproc.model.processorModel.PojoDirectiveHashCode
import org.sqlproc.model.processorModel.Package
import org.sqlproc.model.processorModel.Entity
import org.sqlproc.model.processorModel.Extends
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveOnlyPojos
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveExceptPojos
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveOnlyDaos
import org.sqlproc.model.processorModel.ImplementsExtendsDirectiveExceptDaos
import org.sqlproc.model.processorModel.ValueType

class ProcessorGeneratorUtils {

	@Inject extension IQualifiedNameProvider

    @Inject
    IScopeProvider scopeProvider

    @Inject
    IQualifiedNameConverter qualifiedNameConverter

	def compileType(EnumProperty f, ImportManager im) '''
	«IF f.getType != null»«im.serialize(f.getType)»«ENDIF»'''

	def compileType(PojoProperty f, ImportManager im) '''
	«IF f.getRef != null»«f.getRef.fullyQualifiedName»«ELSEIF f.
		getType != null»«im.serialize(f.getType)»«ENDIF»«IF f.getGtype != null»<«im.serialize(f.getGtype)»>«ENDIF»«IF f.
		getGref != null»<«f.getGref.fullyQualifiedName»>«ENDIF»«IF f.array»[]«ENDIF»'''

	def compileType(PojoType f, ImportManager im) '''
	«IF f.getRef != null»«im.serialize(pojoMethod2jvmType(f.getRef))»«ELSEIF f.
		getType != null»«im.serialize(f.getType)»«ENDIF»«IF f.getGtype != null»<«im.serialize(f.getGtype)»>«ENDIF»«IF f.
		getGref != null»<«im.serialize(pojoMethod2jvmType(f.getGref))»>«ENDIF»«IF f.array»[]«ENDIF»'''

	def completeName(PojoEntity e) {
		return getPackage(e) + "." + e.name
	}

	// Implements
    def isGenerics(Implements impl) {
		val d = impl.directives?.findFirst[x|x instanceof ImplementsExtendsDirectiveGenerics]
		return if(d != null) true else false
    }

	// PojoProperty
	def isRequired(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveRequired]
		return if(d != null) true else false
	}

	def Integer getIndex(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveIndex] as PojoPropertyDirectiveIndex
		return d?.index
	}

	def getUpdateColumn1(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveUpdateCol] as PojoPropertyDirectiveUpdateCol
		return d?.updateColumn1
	}

	def getUpdateColumn2(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveUpdateCol] as PojoPropertyDirectiveUpdateCol
		return d?.updateColumn2
	}

	def getCreateColumn1(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveCreateCol] as PojoPropertyDirectiveCreateCol
		return d?.createColumn1
	}

	def getCreateColumn2(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveCreateCol] as PojoPropertyDirectiveCreateCol
		return d?.createColumn2
	}

	def isPrimaryKey(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectivePrimaryKey]
		return if(d != null) true else false
	}

	def isOptLock(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveVersion]
		return if(d != null) true else false
	}

//	def isAttribute(PojoProperty f) {
//		return if(f.attrs == null || f.attrs.isEmpty()) true else false
//	}

	def isList(PojoProperty f) {
		val name = f?.type?.simpleName
		return "List" == name
	}

	def isNative(PojoProperty f) {
		return if (f.type != null && f.type instanceof JvmPrimitiveType) true else false
	}

	def isToInit(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveToInit]
		return if(d != null) true else false
	}

	def isEnumInit(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveEnumInit]
		return if(d != null) true else false
	}

	def isIsDef(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveIsDef]
		return if(d != null) true else false
	}

	def isEnumDef(PojoProperty f) {
		val d = f.directives?.findFirst[x|x instanceof PojoPropertyDirectiveEnumDef]
		return if(d != null) true else false
	}

	// PojoEntity

    def isAbstract(PojoEntity pojo) {
		val m = pojo.modifiers1?.findFirst[x|x.abstract]
		return if(m != null) true else false
    }

    def hasOperators(PojoEntity pojo) {
		val d = pojo.directives?.findFirst[x|x instanceof PojoDirectiveOperators]
		return if(d != null) true else false
    }

    def getOperatorsSuffix(PojoEntity pojo) {
		val d = pojo.directives?.findFirst[x|x instanceof PojoDirectiveOperators] as PojoDirectiveOperators
		return d?.operatorsSuffix
    }

    def Integer getSernum(PojoEntity pojo) {
		val d = pojo.directives?.findFirst[x|x instanceof PojoDirectiveSerializable] as PojoDirectiveSerializable
		return d?.sernum
    }
    
    def getDiscriminator(PojoEntity pojo) {
		val d = pojo?.directives?.findFirst[x|x instanceof PojoDirectiveDiscriminator] as PojoDirectiveDiscriminator
		return d?.discriminator
    }

    def isFinal(PojoEntity pojo) {
		val m = pojo.modifiers1?.findFirst[x|x.final]
		return if(m != null) true else false
    }

	def PojoEntity getSuperType(PojoEntity pojo) {
		val m = pojo?.modifiers2?.findFirst[x|x.superType != null]
		return m?.superType
	}

    def PojoEntity getParent(PojoEntity pojo) {
        if (getDiscriminator(pojo) != null)
            return null
        return pojo.superType
    }

	def PojoProperty getOptLock(PojoEntity pojo) {
		val fea = pojo?.features?.findFirst[x|isOptLock(x.feature)]?.feature
		return fea ?: pojo?.getSuperType?.getOptLock
	}

    def Map<Integer, List<PojoProperty>> getIndex(PojoEntity pojo) {
        val Map<Integer, List<PojoProperty>> result = new TreeMap()
		pojo?.directives.filter[x|x instanceof PojoDirectiveIndex].forEach[
			val d = it as PojoDirectiveIndex
			result.put(d.index, d.proplist.features)
		]
        return result
    }

    def List<PojoProperty> toStringFeatures(PojoEntity pojo) {
        val List<PojoProperty> result = newArrayList()
		pojo?.directives.filter[x|x instanceof PojoDirectiveToString].forEach[
			val d = it as PojoDirectiveToString
			result.addAll(d.proplist.features)
		]
        return result
    }

    def List<PojoProperty> equalsFeatures(PojoEntity pojo) {
        val List<PojoProperty> result = newArrayList()
		pojo?.directives.filter[x|x instanceof PojoDirectiveEquals].forEach[
			val d = it as PojoDirectiveEquals
			result.addAll(d.proplist.features)
		]
        return result
    }

    def List<PojoProperty> hashCodeFeatures(PojoEntity pojo) {
        val List<PojoProperty> result = newArrayList()
		pojo?.directives.filter[x|x instanceof PojoDirectiveHashCode].forEach[
			val d = it as PojoDirectiveHashCode
			result.addAll(d.proplist.features)
		]
        return result
    }

	def List<PojoProperty> requiredFeatures(PojoEntity pojo) {
		if (pojo == null)
			return newArrayList()
		val features = pojo.features.filter[x|x.feature.isRequired].map[feature].toList
		val se = pojo.superType
		if (se == null)
			return features
		features.addAll(se.requiredFeatures)
		return features
	}

	def List<PojoProperty> attributes(PojoEntity pojo) {
		if (pojo == null)
			return newArrayList()
		val features = pojo.features/*.filter[x|x.feature.isAttribute]*/.map[feature].toList
		val se = pojo.superType
		if (se == null)
			return features
		features.addAll(se.attributes)
		return features
	}

	def Map<String, PojoProperty> attributesAsMap(PojoEntity pojo) {
		val result = new TreeMap()
		if (pojo == null)
			return result
		pojo.features/*.filter[x|x.feature.isAttribute]*/.map[feature].forEach[
			result.put(it.name, it)
		]
		val se = pojo.superType
		if (se == null)
			return result
		result.putAll(se.attributesAsMap)
		return result
	}

	def List<PojoProperty> toInitFeatures(PojoEntity pojo) {
		if (pojo == null)
			return newArrayList()
		val features = pojo.features.filter[x|x.feature.isToInit].map[feature].toList
		val se = pojo.superType
		if (se == null)
			return features
		features.addAll(se.toInitFeatures)
		return features
	}

	def List<PojoProperty> enumInitFeatures(PojoEntity pojo) {
		if (pojo == null)
			return newArrayList()
		val features = pojo.features.filter[x|x.feature.isEnumInit].map[feature].toList
		val se = pojo.superType
		if (se == null)
			return features
		features.addAll(se.enumInitFeatures)
		return features
	}

	def List<PojoProperty> isDefFeatures(PojoEntity pojo) {
		if (pojo == null)
			return newArrayList()
		val features = pojo.features.filter[x|x.feature.isIsDef].map[feature].toList
		val se = pojo.superType
		if (se == null)
			return features
		features.addAll(se.isDefFeatures)
		return features
	}

	def List<PojoProperty> enumDefFeatures(PojoEntity pojo) {
		if (pojo == null)
			return newArrayList()
		val features = pojo.features.filter[x|x.feature.isEnumDef].map[feature].toList
		val se = pojo.superType
		if (se == null)
			return features
		features.addAll(se.enumDefFeatures)
		return features
	}
	
	def boolean hasIsDef(PojoEntity pojo) {
		val result = pojo.features.findFirst(f|f.feature.isIsDef || f.feature.isEnumDef)
		if (result != null)
			return true
		val se = pojo.superType
		if (se == null)
			return false
		return hasIsDef(se)
	}
	
	def boolean hasToInit(PojoEntity pojo) {
		val result = pojo.features.findFirst(f|f.feature.isToInit || f.feature.isEnumInit)
		if (result != null)
			return true
		val se = pojo.superType
		if (se == null)
			return false
		return hasIsDef(se)
	}
	
    def PojoProperty getAttribute(PojoEntity pojo, String name) {
		if (pojo == null)
			return null
		val feature = pojo.features.findFirst[x|/*x.feature.isAttribute &&*/ x.feature.name == name]
		return feature?.feature ?: pojo.superType?.getAttribute(name)
    }

    def String getSuffix(Entity pojo) {
        val Package packageDeclaration = getContainerOfType(pojo, Package)
        return getSuffix(packageDeclaration)
    }

	// EnumEntity
    def isFinal(EnumEntity ^enum) {
		val m = ^enum.modifiers1?.findFirst[x|x.final]
		return if(m != null) true else false
    }

	def PojoEntity getSuperType(EnumEntity ^enum) {
		val m = ^enum.modifiers2?.findFirst[x|x.superType != null]
		return m?.superType
	}

    def Integer getSernum(EnumEntity ^enum) {
		val d = ^enum.directives?.findFirst[x|x instanceof PojoDirectiveSerializable] as PojoDirectiveSerializable
		return d?.sernum
    }

	// PojoDao
    def isFinal(PojoDao dao) {
		val m = dao.modifiers1?.findFirst[x|x.final]
		return if(m != null) true else false
    }

    def isAbstract(PojoDao dao) {
		val m = dao.modifiers1?.findFirst[x|x.abstract]
		return if(m != null) true else false
    }

    def Integer getSernum(PojoDao dao) {
		val d = dao.directives?.findFirst[x|x instanceof PojoDirectiveSerializable] as PojoDirectiveSerializable
		return d?.sernum
    }

    def PojoDao getSuperType(PojoDao dao) {
		val m = dao.modifiers2?.findFirst[x|x.superType != null]
		return m?.superType
    }

    def Map<String, Map<String, PojoType>> getMoreResultClasses(PojoDao dao) {
        val Map<String, Map<String, PojoType>> result = new TreeMap()
		dao?.directives.filter[x|x instanceof DaoDirectiveDiscriminator].forEach[
			val d = it as DaoDirectiveDiscriminator
			val Map<String, PojoType> map = new TreeMap()
			d.descendants.forEach[dd|
				map.put(getValue(dd), dd.descendant)
			]
			result.put(d.ancestor.name, map)
		]
        return result
    }
    
    def getPojoDirective(PojoDao dao) {
    	dao?.directives.findFirst[x|x instanceof DaoDirectiveCrud || 
    		x instanceof DaoDirectiveQuery || x instanceof FunProcDirective
    	] 
    }
    
    def String getFunProcName(PojoDao dao) {
        var pojoName = dao.getName()
        if (pojoName.endsWith("Dao"))
            pojoName = pojoName.substring(0, pojoName.length() - 3)
        return pojoName.toFirstLower
	}    
	
    def PojoEntity getPojoImplicit(PojoDao dao) {
        var pojoName = dao.getName()
        if (pojoName.endsWith("Dao"))
            pojoName = pojoName.substring(0, pojoName.length() - 3)
        val Artifacts artifacts = getContainerOfType(dao, Artifacts)
        return findEntity(qualifiedNameConverter, artifacts,
                scopeProvider.getScope(artifacts, ProcessorModelPackage.Literals.ARTIFACTS__POJOS), pojoName)
    }

    def dispatch PojoEntity getPojo(PojoDao dao, DaoDirectiveCrud pojoDirective) {
    	return pojoDirective?.pojo?.ref ?: getPojoImplicit(dao)
    }

    def dispatch PojoEntity getPojo(PojoDao dao, DaoDirectiveQuery pojoDirective) {
    	return pojoDirective?.pojo?.ref ?: getPojoImplicit(dao)
    }

    def dispatch PojoEntity getPojo(PojoDao dao, FunProcDirective pojoDirective) {
    	val List<PojoType> list = pojoDirective?.paramlist?.ins
    	if (list == null || list.empty || list.head.ref == null)
    		return getPojoImplicit(dao)
    	return list.head.ref
    }

    def PojoEntity getPojo(PojoDao dao) {
    	val DaoDirective pojoDirective = dao?.getPojoDirective
    	return dao?.getPojo(pojoDirective)
    }

    def String getDaoImplements(PojoDao dao, Implements impl) {
        val StringBuilder sb = new StringBuilder()
        sb.append(impl.getImplements().getSimpleName())
        if (isGenerics(impl)) {
        	val pojo = getPojo(dao)
        	if (pojo != null)
        	sb.append("<").append(pojo.getName()).append(">")
        }
        return sb.toString()
    }

    def isCRUD(PojoDao dao) {
		val d = dao.directives?.findFirst[x|x instanceof DaoDirectiveCrud]
		return if(d != null) true else false
    }

    def isQuery(PojoDao dao) {
		val d = dao.directives?.findFirst[x|x instanceof DaoDirectiveQuery]
		return if(d != null) true else false
    }

    def listFunctionsDirectives(PojoDao dao) {
    	val List<FunProcDirective> result = newArrayList()
		dao.directives?.filter[x|x instanceof FunProcDirective].forEach[
			result.add(it as FunProcDirective)
		]
		return result
    }

    def String getSuffix(PojoDao dao) {
        val Package packageDeclaration = getContainerOfType(dao, Package)
        return getSuffix(packageDeclaration)
    }

	def getParamName(PojoType pojo) {
		if (pojo.ref != null)
			return pojo.ref.name.toFirstLower
		return pojo.type.simpleName.toFirstLower
	}

	// Annotations
    def isConflict(Annotation an) {
		val d = an.directives?.findFirst[x|x instanceof AnnotationDirectiveConflict]
		return if(d != null) true else false
    }
	
	def List<Annotation> conflictAnnotations(AnnotatedEntity pojo) {
		if (pojo == null)
			return newArrayList()
		return pojo.annotations.filter[x|x.isConflict].toList
	}

    def isConstructor(Annotation an) {
		val d = an.directives?.findFirst[x|x instanceof AnnotationDirectiveConstructor]
		return if(d != null) true else false
    }
	
	def List<Annotation> constructorAnnotations(AnnotatedEntity pojo) {
		if (pojo == null)
			return newArrayList()
		return pojo.annotations.filter[x|x.isConstructor].toList
	}

    def isStatic(Annotation an) {
		val d = an.directives?.findFirst[x|x instanceof AnnotationDirectiveStatic]
		return if(d != null) true else false
    }
	
	def List<Annotation> staticAnnotations(AnnotatedEntity pojo) {
		if (pojo == null)
			return newArrayList()
		return pojo.annotations.filter[x|x.isStatic].toList
	}

    def isStandard(Annotation an) {
    	if (an.directives == null || an.directives.isEmpty)
    		return true
		val d = an.directives?.findFirst[x|x instanceof AnnotationDirectiveStandard]
		return if(d != null) true else false
    }
	
	def List<Annotation> standardAnnotations(AnnotatedEntity pojo) {
		if (pojo == null)
			return newArrayList()
		return pojo.annotations.filter[x|x.isStandard].toList
	}

    def isSetter(Annotation an) {
		val d = an.directives?.findFirst[x|x instanceof AnnotationDirectiveSetter]
		return if(d != null) true else false
    }
	
	def List<Annotation> setterAnnotations(PojoAnnotatedProperty prop) {
		if (prop == null)
			return newArrayList()
		return prop.annotations.filter[x|x.isSetter].toList
	}

    def isGetter(Annotation an) {
		val d = an.directives?.findFirst[x|x instanceof AnnotationDirectiveGetter]
		return if(d != null) true else false
    }
	
	def List<Annotation> getterAnnotations(PojoAnnotatedProperty prop) {
		if (prop == null)
			return newArrayList()
		return prop.annotations.filter[x|x.isGetter].toList
	}

    def isAttribute(Annotation an) {
    	if (an.directives == null || an.directives.isEmpty)
    		return true
		val d = an.directives?.findFirst[x|x instanceof AnnotationDirectiveAttribute]
		return if(d != null) true else false
    }
	
	def List<Annotation> attributeAnnotations(PojoAnnotatedProperty prop) {
		if (prop == null)
			return newArrayList()
		return prop.annotations.filter[x|x.isAttribute].toList
	}

	def List<PojoEntity> onlyPojos(Extends ext) {
    	val List<PojoEntity> result = newArrayList()
		ext.directives?.filter[x|x instanceof ImplementsExtendsDirectiveOnlyPojos].forEach[
			result.addAll((it as ImplementsExtendsDirectiveOnlyPojos).onlyPojos)
		]
		return result
	}

	def List<PojoEntity> exceptPojos(Extends ext) {
    	val List<PojoEntity> result = newArrayList()
		ext.directives?.filter[x|x instanceof ImplementsExtendsDirectiveExceptPojos].forEach[
			result.addAll((it as ImplementsExtendsDirectiveExceptPojos).exceptPojos)
		]
		return result
	}

	def List<PojoEntity> onlyPojos(Implements imp) {
    	val List<PojoEntity> result = newArrayList()
		imp.directives?.filter[x|x instanceof ImplementsExtendsDirectiveOnlyPojos].forEach[
			result.addAll((it as ImplementsExtendsDirectiveOnlyPojos).onlyPojos)
		]
		return result
	}

	def List<PojoEntity> exceptPojos(Implements imp) {
    	val List<PojoEntity> result = newArrayList()
		imp.directives?.filter[x|x instanceof ImplementsExtendsDirectiveExceptPojos].forEach[
			result.addAll((it as ImplementsExtendsDirectiveExceptPojos).exceptPojos)
		]
		return result
	}

	def List<PojoDao> onlyDaos(Extends ext) {
    	val List<PojoDao> result = newArrayList()
		ext.directives?.filter[x|x instanceof ImplementsExtendsDirectiveOnlyDaos].forEach[
			result.addAll((it as ImplementsExtendsDirectiveOnlyDaos).onlyDaos)
		]
		return result
	}

	def List<PojoDao> exceptDaos(Extends ext) {
    	val List<PojoDao> result = newArrayList()
		ext.directives?.filter[x|x instanceof ImplementsExtendsDirectiveExceptDaos].forEach[
			result.addAll((it as ImplementsExtendsDirectiveExceptDaos).exceptDaos)
		]
		return result
	}

	def List<PojoDao> onlyDaos(Implements imp) {
    	val List<PojoDao> result = newArrayList()
		imp.directives?.filter[x|x instanceof ImplementsExtendsDirectiveOnlyDaos].forEach[
			result.addAll((it as ImplementsExtendsDirectiveOnlyDaos).onlyDaos)
		]
		return result
	}

	def List<PojoDao> exceptDaos(Implements imp) {
    	val List<PojoDao> result = newArrayList()
		imp.directives?.filter[x|x instanceof ImplementsExtendsDirectiveExceptDaos].forEach[
			result.addAll((it as ImplementsExtendsDirectiveExceptDaos).exceptDaos)
		]
		return result
	}
	
    def String value(ValueType pv) {
        if (pv == null)
            return null
        var String s = pv.getValue()
        if (s != null) {
            s = s.trim()
            if (!s.startsWith("\""))
                s = "\"" + s
            if (!s.endsWith("\""))
                s = s + "\""
            return s
        } else if (pv.getId() != null)
            return pv.getId()
        else
            return "" + pv.getNumber()
    }
}
