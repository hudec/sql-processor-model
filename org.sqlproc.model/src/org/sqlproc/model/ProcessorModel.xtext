grammar org.sqlproc.model.ProcessorModel with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

generate processorModel "http://www.sqlproc.org/model/ProcessorModel"
import "http://www.eclipse.org/Xtext/Xbase/XAnnotations"
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

Artifacts: {Artifacts}
	( properties+=Property 
	| pojos+=PojoDefinition 
	| tables+=TableDefinition
    | procedures+=ProcedureDefinition 
    | functions+=FunctionDefinition
    | packages+=Package
    )*;

PropertyValue: value=STRING;
DatabaseCatalogAssignement: dbCatalog=PropertyValue;
DatabaseSchemaAssignement: dbSchema=PropertyValue;
DatabaseTypeAssignement: dbType=ValidID;
DatabaseMetaInfoAssignement: dbMetaInfo=PropertyValue;
DriverMetaInfoAssignement: dbDriverInfo=PropertyValue;
DriverMethodOutputAssignement: driverMethod=ValidID '->' callOutput=PropertyValue;
SqlTypeAssignement: typeName=ValidID ('(' size=INT ')')? '->' type=PojoType;
ColumnTypeAssignement: dbColumn=ValidID '->' type=PojoType;
ShowColumnTypeAssignement: dbColumn=ValidID '->' type=PropertyValue;
TableAssignement: dbTable=ValidID '->' newName=ValidID;
JoinTableAssignement: dbTable=ValidID ('->' dbTables+=ValidID)+;
ColumnAssignement: dbColumn=ValidID '->' newName=ValidID;
ImportAssignement: dbColumn=ValidID '->' pkTable=ValidID ('->' pkColumn=ValidID)?;
ExportAssignement: dbColumn=ValidID '->' fkTable=ValidID ('->' fkColumn=ValidID)?;
InheritanceAssignement: discriminator=ValidID '->' dbTable=ValidID ('->' dbColumns+=ValidID)+;
ManyToManyAssignement: pkColumn=ValidID '->' pkTable=ValidID ('->' fkColumn=ValidID)?;
DebugLevelAssignement: debug=ValidID (WS+ scope=PropertyValue)?;
ProcedurePojoAssignement: dbProcedure=ValidID '->' pojo=PojoType;
FunctionPojoAssignement: dbFunction=ValidID '->' pojo=PojoType;
ImplementsAssignement: ':' toImplement=[jvmTypes::JvmType|QualifiedName] (WS+ '+' (WS+ dbTables+=ValidID)+)? (WS+ '-' (WS+ dbNotTables+=ValidID)+)?;
ExtendsAssignement: ':' toExtends=[jvmTypes::JvmType|QualifiedName] (WS+ '+' (WS+ dbTables+=ValidID)+)? (WS+ '-' (WS+ dbNotTables+=ValidID)+)?;
ImplementsAssignementGenerics: ':' toImplement=[jvmTypes::JvmType|QualifiedName] (WS+ '+' (WS+ dbTables+=ValidID)+)? (WS+ '-' (WS+ dbNotTables+=ValidID)+)?;
ExtendsAssignementGenerics: ':' toExtends=[jvmTypes::JvmType|QualifiedName] (WS+ '+' (WS+ dbTables+=ValidID)+)? (WS+ '-' (WS+ dbNotTables+=ValidID)+)?;

Property hidden(ML_COMMENT, SL_COMMENT):
	(name='resolve-pojo-on'
	|name='resolve-pojo-off'
	|name='database-' database=DatabaseProperty
	|name='pojogen-' pojogen=PojogenProperty
	|name='metagen-' metagen=MetagenProperty
	|name='daogen-' daogen=DaogenProperty
	|name='replace-all-regex' WS+ replaceId=ValidID WS+ regex=PropertyValue
	|name='replace-all-replacement' WS+ replaceId=ValidID WS+ replacement=PropertyValue
	|name='compress-meta-directives'
	) ';';

//PropertyCondition:
//	'{' WS* name=ValidID WS+ '=' WS+ value=(ValidID | INT) WS* '}'
//;

DatabaseProperty hidden(ML_COMMENT, SL_COMMENT):
	(name='is-online'
	|name='is-offline'
	|name='has-url' WS+ dbUrl=PropertyValue
	|name='login-username' WS+ dbUsername=PropertyValue
	|name='login-password' WS+ dbPassword=PropertyValue
	|name='in-catalog' WS+ dbCatalog=DatabaseCatalogAssignement
	|name='active-schema' WS+ dbSchema=DatabaseSchemaAssignement
	|name='jdbc-driver' WS+ (=> ':' dbDriverx=[jvmTypes::JvmType|QualifiedName]|dbDriver=PropertyValue)
	|name='ddl-create' WS+ dbExecuteBefore=PropertyValue
	|name='ddl-drop' WS+ dbExecuteAfter=PropertyValue
	|name='index-types' WS+ dbIndexTypes=PropertyValue
	|name='skip-indexes'
	|name='skip-functions-procedures'
	|name='skip-check-constraints'
	|name='is-of-type' WS+ dbType=DatabaseTypeAssignement
	|name='show-database-info' WS+ dbMetaInfo=DatabaseMetaInfoAssignement
	|name='show-driver-info' WS+ dbDriverInfo=DriverMetaInfoAssignement
	|name='show-driver-output' (WS+ dbMethodsCalls+=DriverMethodOutputAssignement)+
	|name='debug-level' WS+ debug=DebugLevelAssignement
	|name='take-comments'
	|name='lowercase-names'
	|name='uppercase-names'
	);

PojogenProperty hidden(ML_COMMENT, SL_COMMENT):
	(name='types-sqltypes' (WS+ sqlTypes+=SqlTypeAssignement)+
	|name='types-in-table' WS+ dbTable=ValidID (WS+ sqlTypes+=SqlTypeAssignement)+
	|name='types-for-columns' WS+ dbTable=ValidID (WS+ columnTypes+=ColumnTypeAssignement)+
	|name='types-for-procedure' WS+ dbProcedure=ValidID (WS+ columnTypes+=ColumnTypeAssignement)+
	|name='types-for-function' WS+ dbFunction=ValidID (WS+ columnTypes+=ColumnTypeAssignement)+
	|name='show-type-for-column' WS+ dbTable=ValidID WS+ columnType=ShowColumnTypeAssignement
	|name='show-type-for-procedure' WS+ dbProcedure=ValidID WS+ columnType=ShowColumnTypeAssignement
	|name='show-type-for-function' WS+ dbFunction=ValidID WS+ columnType=ShowColumnTypeAssignement
	|name='ignore-tables' (WS+ dbTables+=ValidID)+
	|name='only-tables' (WS+ dbTables+=ValidID)+
	|name='not-abstract-tables' (WS+ dbTables+=ValidID)+
	|name='join-tables' (WS+ joinTables+=JoinTableAssignement)+
	|name='ignore-columns' WS+ dbTable=ValidID (WS+ dbColumns+=ValidID)+
	|name='required-columns' WS+ dbTable=ValidID (WS+ dbColumns+=ValidID)+
	|name='not-required-columns' WS+ dbTable=ValidID (WS+ dbColumns+=ValidID)+
	|name='create-columns' WS+ dbTable=ValidID (WS+ columnTypes+=ColumnTypeAssignement)+
	|name='rename-tables' (WS+ tables+=TableAssignement)+
	|name='rename-columns' WS+ dbTable=ValidID (WS+ columns+=ColumnAssignement)+
	|name='ignore-one-to-many' WS+ dbTable=ValidID (WS+ exports+=ExportAssignement)+ // exports
	|name='ignore-many-to-one' WS+ dbTable=ValidID (WS+ imports+=ImportAssignement)+ // imports
	|name='inherit-many-to-one' WS+ dbTable=ValidID (WS+ imports+=ImportAssignement)+ // imports
	|name='create-one-to-many' WS+ dbTable=ValidID (WS+ exports+=ExportAssignement)+ // exports
	|name='create-many-to-one' WS+ dbTable=ValidID (WS+ imports+=ImportAssignement)+ // imports
	|name='table-many-to-many' WS+ dbTable=ValidID (WS+ many2s+=ManyToManyAssignement)+
	|name='inherit-discriminator' WS+ dbTable=ValidID WS+ dbColumn=ValidID (WS+ inheritance+=InheritanceAssignement)+
	|name='generate-methods' (WS+ methods+=ValidID)+
	|name='generate-operators' (WS+ operatorsSuffix=ValidID)?
	|name='implements-interfaces' WS+ toImplements=ImplementsAssignement 
	|name='extends-class' WS+ toExtends=ExtendsAssignement
	|name='implements-interfaces-generics' WS+ toImplementsGenerics=ImplementsAssignementGenerics 
	|name='extends-class-generics' WS+ toExtendsGenerics=ExtendsAssignementGenerics
	|name='generate-wrappers'
	|name='generate-validation-annotations'
	|name='preserve-foreign-keys' (WS+ dbTables+=ValidID)*
	|name='make-it-final'
	|name='version-column' WS+ version=ValidID (WS+ '+' (WS+ dbTables+=ValidID)+)? (WS+ '-' (WS+ dbNotTables+=ValidID)+)?
	|name='debug-level' WS+ debug=DebugLevelAssignement
	|name='pojos-for-procedures' (WS+ procPojos+=ProcedurePojoAssignement)+
	|name='pojos-for-functions' (WS+ funPojos+=FunctionPojoAssignement)+
	|name='active-filter' WS+ activeFilter=PropertyValue
	|name='package' WS+ pckg=PropertyValue
	|name='enum-for-check-constraints' WS+ enumName=ValidID (WS+ dbCheckConstraints+=ValidID)+
	);

MetaTypeAssignement: dbColumn=ValidID '->' type=ValidID ('->' extension=ValidID)?;

MetagenProperty hidden(ML_COMMENT, SL_COMMENT):
	(name='global-sequence' WS+ sequence=ValidID (type=ValidID)? (WS+ '+' (WS+ dbTables+=ValidID)+)? (WS+ '-' (WS+ dbNotTables+=ValidID)+)?
	|name='table-sequence' WS+ dbTable=ValidID WS+ sequence=ValidID (WS+ type=ValidID)?
	|name='global-identity' (WS+ identity=ValidID (type=ValidID)?)? (WS+ '+' (WS+ dbTables+=ValidID)+)? (WS+ '-' (WS+ dbNotTables+=ValidID)+)?
	|name='table-identity' WS+ dbTable=ValidID WS+ identity=ValidID (WS+ type=ValidID)?
	|name='column-meta-type' WS+ dbTable=ValidID (WS+ metaTypes+=MetaTypeAssignement)+
	|name='statement-meta-type' WS+ dbStatement=ValidID (WS+ metaTypes+=MetaTypeAssignement)+
	|name='make-it-final'
	|name='like-columns' (WS+ dbTable=ValidID (WS+ dbColumns+=ValidID)+)?
	|name='not-like-columns' (WS+ dbTable=ValidID (WS+ dbColumns+=ValidID)+)?
	|name='generate-sequences'
	|name='generate-identities'
	|name='generate-idgenerators'
	|name='generate-default-idgenerators'
	|name='function-result' WS+ dbFunction=ValidID WS+ type=ValidID
	|name='function-result-set' WS+ dbFunction=ValidID WS+ dbTable=ValidID
	|name='procedure-result-set' WS+ dbProcedure=ValidID WS+ dbTable=ValidID
	|name='debug-level' WS+ debug=DebugLevelAssignement
	|name='generate-operators'
	|name='optimize-insert' (WS+ dbTables+=ValidID)*
	|name='optional-features' WS+ dbStatement=ValidID (WS+ optionalFeatures+=ValidID)+
	|name='active-filter' WS+ activeFilter=PropertyValue
	);

DaogenProperty hidden(ML_COMMENT, SL_COMMENT):
	(name='ignore-tables' (WS+ dbTables+=ValidID)+
	|name='only-tables' (WS+ dbTables+=ValidID)*
	|name='implements-interfaces' WS+ toImplements=ImplementsAssignement
	|name='extends-class' WS+ toExtends=ExtendsAssignement
	|name='implements-interfaces-generics' WS+ toImplementsGenerics=ImplementsAssignementGenerics 
	|name='extends-class-generics' WS+ toExtendsGenerics=ExtendsAssignementGenerics
	|name='make-it-final'
	|name='function-result' WS+ dbFunction=ValidID WS+ resultType=PojoType
	|name='debug-level' WS+ debug=DebugLevelAssignement
	|name='active-filter' WS+ activeFilter=PropertyValue
	|name='package' WS+ pckg=PropertyValue
	);

PojoDefinition hidden(ML_COMMENT, SL_COMMENT, WS):
	'pojo' name=ValidID (class=(QualifiedName) | ':' classx=[jvmTypes::JvmType|QualifiedName]) ';';

TableDefinition hidden(ML_COMMENT, SL_COMMENT, WS):
	'table' name=ValidID table=ValidID ';';

ProcedureDefinition hidden(ML_COMMENT, SL_COMMENT, WS):
	'procedure' name=ValidID table=ValidID ';';

FunctionDefinition hidden(ML_COMMENT, SL_COMMENT, WS):
	'function' name=ValidID table=ValidID ';';

ValueType:
	value = STRING | number = INT | id = ValidID
;

PojoType:
	(':' type=[jvmTypes::JvmType|QualifiedName] | ref=[PojoEntity|ValidID])
	('<' (':' gtype=[jvmTypes::JvmType|QualifiedName] | gref=[PojoEntity|ValidID]) '>')? (array ?= '[]')?;

PackageDirective hidden(ML_COMMENT, SL_COMMENT, WS): 
	{PackageDirectiveSuffix} '#Suffix' '(' suffix=(ValidID) ')'
	| {PackageDirectiveImplementation} '#Implementation' '(' implementation=(QualifiedName) ')'
;

Package hidden(ML_COMMENT, SL_COMMENT, WS):
	directives+=PackageDirective*
	'package' name=(QualifiedName) '{'
		elements+=AbstractPojoEntity*
	'}';

AnnotationDirective hidden(ML_COMMENT, SL_COMMENT, WS): 
	{AnnotationDirectiveConflict} '#Conflict'
	| {AnnotationDirectiveStatic} '#Static'
	| {AnnotationDirectiveConstructor} '#Constructor'
	| {AnnotationDirectiveStandard} '#Standard'
	| {AnnotationDirectiveSetter} '#Setter'
	| {AnnotationDirectiveGetter} '#Getter'
	| {AnnotationDirectiveAttribute} '#Attribute'
;

Annotation:
	directives+=AnnotationDirective*
	'@' type=[jvmTypes::JvmType|QualifiedName] (=> '(' features+=AnnotationProperty (',' features+=AnnotationProperty)* ')')?
;

AnnotationProperty:
	name=ValidID '=' value = ValueType ((':' type=[jvmTypes::JvmType|QualifiedName] | ref=[PojoEntity|ValidID]))?  
;

Entity: PojoEntity | EnumEntity;

AnnotatedEntity: (annotations+=Annotation)* entity=Entity;

AbstractPojoEntity hidden(ML_COMMENT, SL_COMMENT, WS):
	Package | AnnotatedEntity | Import | Implements | Extends | PojoDao
;

Import hidden(ML_COMMENT, SL_COMMENT, WS):
	'import' importedNamespace = QualifiedNameWithWildcard
;

ImplementsExtendsDirective hidden(ML_COMMENT, SL_COMMENT, WS): 
	{ImplementsExtendsDirectiveGenerics} '#Generics'
;

Implements hidden(ML_COMMENT, SL_COMMENT, WS):
	directives+=ImplementsExtendsDirective*
	'implements' ':' implements = [jvmTypes::JvmType|QualifiedName] 
	('onlyPojos' onlyPojos+=[PojoEntity|ValidID]*)? 
//	('onlyDaos' onlyDaos+=[PojoDao|ValidID]*)? 
	('exceptPojos' exceptPojos+=[PojoEntity|ValidID]*)? 
	//('exceptDaos' exceptDaos+=[PojoDao|ValidID]*)?
;

Extends hidden(ML_COMMENT, SL_COMMENT, WS):
	directives+=ImplementsExtendsDirective*
	'extends' ':' extends = [jvmTypes::JvmType|QualifiedName] 
	('onlyPojos' onlyPojos+=[PojoEntity|ValidID]*)? 
//	('onlyDaos' onlyDaos+=[PojoDao|ValidID]*)? 
	('exceptPojos' exceptPojos+=[PojoEntity|ValidID]*)? 
	//('exceptDaos' exceptDaos+=[PojoDao|ValidID]*)?
;

PojoEntityModifier1: ((final?='final') | (abstract?='abstract'));

DirectiveProperties hidden(ML_COMMENT, SL_COMMENT, WS):
	features+=[PojoProperty|ValidID] (',' features+=[PojoProperty|ValidID])*
;

PojoDirective hidden(ML_COMMENT, SL_COMMENT, WS): 
	{PojoDirectiveToString} '#ToString' '(' proplist=DirectiveProperties ')'
	| {PojoDirectiveIndex} '#Index' '(' index=INT ',' proplist=DirectiveProperties ')'
	| {PojoDirectiveOperators} '#Operators' ('(' operatorsSuffix=ValidID ')')?
	| {PojoDirectiveSerializable} '#Serializable' '(' sernum=INT ')'
	| {PojoDirectiveDiscriminator} '#InheritanceChild' '(' discriminator=(ValidID) ')'
	| {PojoDirectiveEquals} '#Equals' '(' proplist=DirectiveProperties ')'
	| {PojoDirectiveHashCode} '#HashCode' '(' proplist=DirectiveProperties ')'
;

PojoEntityModifier2: ('extends' superType=[PojoEntity|ValidID]);

PojoEntity hidden(ML_COMMENT, SL_COMMENT, WS):
	directives+=PojoDirective*
	(modifiers1+=PojoEntityModifier1)* 'pojo' name=ValidID (modifiers2+=PojoEntityModifier2)* 
	'{'
		features+=PojoAnnotatedProperty*
	'}'
;

PojoAnnotatedProperty: (annotations+=Annotation)* feature=PojoProperty;

PojoPropertyDirective hidden(ML_COMMENT, SL_COMMENT, WS): 
	{PojoPropertyDirectiveRequired} '#Required'
	| {PojoPropertyDirectivePrimaryKey} '#PrimaryKey'
	| {PojoPropertyDirectiveDiscriminator} '#InheritanceDiscriminator'
	| {PojoPropertyDirectiveIndex} '#Index' '(' index=INT ')'
	| {PojoPropertyDirectiveVersion} '#Version'
	| {PojoPropertyDirectiveUpdateCol} '#UpdateCol' '(' updateColumn1=ValidID ',' updateColumn2=ValidID ')'
	| {PojoPropertyDirectiveCreateCol} '#CreateCol' '(' createColumn1=ValidID ',' createColumn2=ValidID ')'
	| {PojoPropertyDirectiveToInit} '#ToInit'
	| {PojoPropertyDirectiveEnumInit} '#EnumInit'
	| {PojoPropertyDirectiveIsDef} '#IsDef'
	| {PojoPropertyDirectiveEnumDef} '#EnumDef'
;

PojoProperty hidden(ML_COMMENT, SL_COMMENT, WS):
	directives+=PojoPropertyDirective*
	name=ValidID (':' type=[jvmTypes::JvmType|QualifiedName] | ref=[Entity|ValidID])
	('<' (':' gtype=[jvmTypes::JvmType|QualifiedName] | gref=[PojoEntity|ValidID]) '>')? (array ?= '[]')?
;

EnumEntityModifier1: ((final?='final'));

EnumEntityModifier2: ('extends' superType=[PojoEntity|ValidID]);

EnumEntity hidden(ML_COMMENT, SL_COMMENT, WS):
	directives+=PojoDirective*
	(modifiers1+=EnumEntityModifier1)* 'enum' name=ValidID (modifiers2+=EnumEntityModifier2)* 
	'{'
		features+=EnumProperty*
	'}'
;

EnumPropertyValue: name=ValidID '=' value = ValueType;

EnumPropertyDirective hidden(ML_COMMENT, SL_COMMENT, WS):
	{EnumPropertyDirectiveValues} '#Values' '(' values+=EnumPropertyValue (',' values+=EnumPropertyValue)* ')'
;

EnumProperty hidden(ML_COMMENT, SL_COMMENT, WS):
	directives+=EnumPropertyDirective name=ValidID ':' type=[jvmTypes::JvmType|QualifiedName]
;

DaoDirectiveParameters hidden(ML_COMMENT, SL_COMMENT, WS):
	out=PojoType (',' ins+=PojoType)*
;

DescendantAssignment hidden(ML_COMMENT, SL_COMMENT, WS):
	value = ValueType '=' descendant=PojoType
;

FunProcType  hidden(ML_COMMENT, SL_COMMENT, WS):
	{FunctionCallQuery} "#FunctionCallQuery" | 
	{ProcedureCallQuery} "#ProcedureCallQuery" | 
	{FunctionCall} "#FunctionCall" | 
	{ProcedureUpdate} "#ProcedureUpdate" | 
	{FunctionQuery} "#FunctionQuery"
;

DaoDirective hidden(ML_COMMENT, SL_COMMENT, WS):
	{DaoDirectiveSerializable} '#Serializable' '(' sernum=INT ')'
	| {DaoDirectiveDiscriminator} '#InheritanceHandler' '(' ancestor=[PojoProperty|ValidID] (',' descendants+=DescendantAssignment)+ ')'
	| {DaoDirectiveCrud} '#CRUD' (=> '(' pojo=PojoType ')')?
	| {DaoDirectiveQuery} '#Query' (=> '(' pojo=PojoType ')')?
	| {FunProcDirective} type=FunProcType (=> '(' paramlist=DaoDirectiveParameters ')')?
;

PojoDaoModifier: ('extends' superType=[PojoDao|ValidID]);

PojoDao hidden(ML_COMMENT, SL_COMMENT, WS):
	directives+=DaoDirective*
	(modifiers1+=PojoEntityModifier1)* 'dao' name=ValidID
	  (modifiers2+=PojoDaoModifier)* 
	'{'
		//methods+=PojoMethod*
	'}'
;
