grammar org.sqlproc.model.ProcessorModel with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

generate processorModel "http://www.sqlproc.org/model/ProcessorModel"
import "http://www.eclipse.org/Xtext/Xbase/XAnnotations"
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

Artifacts: {Artifacts}
	( properties+=Property 
	| pojos+=PojoDefinition 
	| tables+=TableDefinition
    | procedures+=ProcedureDefinition 
    | functions+=FunctionDefinition
    | packages+=Package
    )*;

ValueType: value = STRING | number = INT | id = QualifiedName;
DatabaseCatalogAssignement: dbCatalog=QualifiedName;
DatabaseSchemaAssignement: dbSchema=QualifiedName;
DatabaseTypeAssignement: dbType=ValidID;
DatabaseMetaInfoAssignement: dbMetaInfo=ValueType;
DriverMetaInfoAssignement: dbDriverInfo=ValueType;
DriverMethodOutputAssignement: driverMethod=ValidID '->' callOutput=ValueType;
SqlTypeAssignement: typeName=ValidID ('(' size=INT ')')? '->' type=PojoType;
ColumnTypeAssignement: dbColumn=ValidID '->' type=PojoType;
ShowColumnTypeAssignement: dbColumn=ValidID '->' type=ValueType;
TableAssignement: dbTable=ValidID '->' newName=ValidID;
JoinTableAssignement: dbTable=ValidID ('->' dbTables+=ValidID)+;
ColumnAssignement: dbColumn=ValidID '->' newName=ValidID;
ImportAssignement: dbColumn=ValidID '->' pkTable=ValidID ('->' pkColumn=ValidID)?;
ExportAssignement: dbColumn=ValidID '->' fkTable=ValidID ('->' fkColumn=ValidID)?;
InheritanceAssignement: discriminator=ValidID '->' dbTable=ValidID ('->' dbColumns+=ValidID)+;
ManyToManyAssignement: pkColumn=ValidID '->' pkTable=ValidID ('->' fkColumn=ValidID)?;
DebugLevelAssignement: debug=ValidID (scope=ValidID)?;
ProcedurePojoAssignement: dbProcedure=ValidID '->' pojo=PojoType;
FunctionPojoAssignement: dbFunction=ValidID '->' pojo=PojoType;
ImplementsAssignement: ':' toImplement=[jvmTypes::JvmType|QualifiedName] ('+' (dbTables+=ValidID)+)? ('-' (dbNotTables+=ValidID)+)?;
ExtendsAssignement: ':' toExtends=[jvmTypes::JvmType|QualifiedName] ('+' (dbTables+=ValidID)+)? ('-' (dbNotTables+=ValidID)+)?;
ImplementsAssignementGenerics: ':' toImplement=[jvmTypes::JvmType|QualifiedName] ('+' (dbTables+=ValidID)+)? ('-' (dbNotTables+=ValidID)+)?;
ExtendsAssignementGenerics: ':' toExtends=[jvmTypes::JvmType|QualifiedName] ('+' (dbTables+=ValidID)+)? ('-' (dbNotTables+=ValidID)+)?;

Property:
	(name='resolve-pojo-on'
	|name='resolve-pojo-off'
	|name='database-' database=DatabaseProperty
	|name='pojogen-' pojogen=PojogenProperty
	|name='metagen-' metagen=MetagenProperty
	|name='daogen-' daogen=DaogenProperty
	|name='replace-all-regex' replaceId=ValidID regex=ValueType
	|name='replace-all-replacement' replaceId=ValidID replacement=ValueType
	|name='compress-meta-directives'
	) ';';

//PropertyCondition:
//	'{' WS* name=ValidID '=' value=(ValidID | INT) WS* '}'
//;

DatabaseProperty:
	(name='is-online'
	|name='is-offline'
	|name='has-url' dbUrl=ValueType
	|name='login-username' dbUsername=ValueType
	|name='login-password' dbPassword=ValueType
	|name='in-catalog' dbCatalog=DatabaseCatalogAssignement
	|name='active-schema' dbSchema=DatabaseSchemaAssignement
	|name='jdbc-driver' (=> ':' dbDriverx=[jvmTypes::JvmType|QualifiedName]|dbDriver=ValueType)
	|name='ddl-create' dbExecuteBefore=ValueType
	|name='ddl-drop' dbExecuteAfter=ValueType
	|name='index-types' dbIndexTypes=ValueType
	|name='skip-indexes'
	|name='skip-functions-procedures'
	|name='skip-check-constraints'
	|name='is-of-type' dbType=DatabaseTypeAssignement
	|name='show-database-info' dbMetaInfo=DatabaseMetaInfoAssignement
	|name='show-driver-info' dbDriverInfo=DriverMetaInfoAssignement
	|name='show-driver-output' (dbMethodsCalls+=DriverMethodOutputAssignement)+
	|name='debug-level' debug=DebugLevelAssignement
	|name='take-comments'
	|name='lowercase-names'
	|name='uppercase-names'
	);

PojogenProperty:
	(name='types-sqltypes' (sqlTypes+=SqlTypeAssignement)+
	|name='types-in-table' dbTable=ValidID (sqlTypes+=SqlTypeAssignement)+
	|name='types-for-columns' dbTable=ValidID (columnTypes+=ColumnTypeAssignement)+
	|name='types-for-procedure' dbProcedure=ValidID (columnTypes+=ColumnTypeAssignement)+
	|name='types-for-function' dbFunction=ValidID (columnTypes+=ColumnTypeAssignement)+
	|name='show-type-for-column' dbTable=ValidID columnType=ShowColumnTypeAssignement
	|name='show-type-for-procedure' dbProcedure=ValidID columnType=ShowColumnTypeAssignement
	|name='show-type-for-function' dbFunction=ValidID columnType=ShowColumnTypeAssignement
	|name='ignore-tables' (dbTables+=ValidID)+
	|name='only-tables' (dbTables+=ValidID)+
	|name='not-abstract-tables' (dbTables+=ValidID)+
	|name='join-tables' (joinTables+=JoinTableAssignement)+
	|name='ignore-columns' dbTable=ValidID (dbColumns+=ValidID)+
	|name='required-columns' dbTable=ValidID (dbColumns+=ValidID)+
	|name='not-required-columns' dbTable=ValidID (dbColumns+=ValidID)+
	|name='create-columns' dbTable=ValidID (columnTypes+=ColumnTypeAssignement)+
	|name='rename-tables' (tables+=TableAssignement)+
	|name='rename-columns' dbTable=ValidID (columns+=ColumnAssignement)+
	|name='ignore-one-to-many' dbTable=ValidID (exports+=ExportAssignement)+ // exports
	|name='ignore-many-to-one' dbTable=ValidID (imports+=ImportAssignement)+ // imports
	|name='inherit-many-to-one' dbTable=ValidID (imports+=ImportAssignement)+ // imports
	|name='create-one-to-many' dbTable=ValidID (exports+=ExportAssignement)+ // exports
	|name='create-many-to-one' dbTable=ValidID (imports+=ImportAssignement)+ // imports
	|name='table-many-to-many' dbTable=ValidID (many2s+=ManyToManyAssignement)+
	|name='inherit-discriminator' dbTable=ValidID dbColumn=ValidID (inheritance+=InheritanceAssignement)+
	|name='generate-methods' (methods+=ValidID)+
	|name='generate-operators' (operatorsSuffix=ValidID)?
	|name='implements-interfaces' toImplements=ImplementsAssignement 
	|name='extends-class' toExtends=ExtendsAssignement
	|name='implements-interfaces-generics' toImplementsGenerics=ImplementsAssignementGenerics 
	|name='extends-class-generics' toExtendsGenerics=ExtendsAssignementGenerics
	|name='generate-wrappers'
	|name='generate-validation-annotations'
	|name='preserve-foreign-keys' (dbTables+=ValidID)*
	|name='make-it-final'
	|name='version-column' version=ValidID ('+' (dbTables+=ValidID)+)? ('-' (dbNotTables+=ValidID)+)?
	|name='debug-level' debug=DebugLevelAssignement
	|name='pojos-for-procedures' (procPojos+=ProcedurePojoAssignement)+
	|name='pojos-for-functions' (funPojos+=FunctionPojoAssignement)+
	|name='active-filter' activeFilter=ValueType
	|name='package' pckg=QualifiedName
	|name='enum-for-check-constraints' enumName=ValidID (dbCheckConstraints+=ValidID)+
	);

MetaTypeAssignement: dbColumn=ValidID '->' type=ValidID ('->' extension=ValidID)?;

MetagenProperty:
	(name='global-sequence' sequence=ValidID (type=ValidID)? ('+' (dbTables+=ValidID)+)? ('-' (dbNotTables+=ValidID)+)?
	|name='table-sequence' dbTable=ValidID sequence=ValidID (type=ValidID)?
	|name='global-identity' (identity=ValidID (type=ValidID)?)? ('+' (dbTables+=ValidID)+)? ('-' (dbNotTables+=ValidID)+)?
	|name='table-identity' dbTable=ValidID identity=ValidID (type=ValidID)?
	|name='column-meta-type' dbTable=ValidID (metaTypes+=MetaTypeAssignement)+
	|name='statement-meta-type' dbStatement=ValidID (metaTypes+=MetaTypeAssignement)+
	|name='make-it-final'
	|name='like-columns' (dbTable=ValidID (dbColumns+=ValidID)+)?
	|name='not-like-columns' (dbTable=ValidID (dbColumns+=ValidID)+)?
	|name='generate-sequences'
	|name='generate-identities'
	|name='generate-idgenerators'
	|name='generate-default-idgenerators'
	|name='function-result' dbFunction=ValidID type=ValidID
	|name='function-result-set' dbFunction=ValidID dbTable=ValidID
	|name='procedure-result-set' dbProcedure=ValidID dbTable=ValidID
	|name='debug-level' debug=DebugLevelAssignement
	|name='generate-operators'
	|name='optimize-insert' (dbTables+=ValidID)*
	|name='optional-features' dbStatement=ValidID (optionalFeatures+=ValidID)+
	|name='active-filter' activeFilter=ValueType
	);

DaogenProperty:
	(name='ignore-tables' (dbTables+=ValidID)+
	|name='only-tables' (dbTables+=ValidID)*
	|name='implements-interfaces' toImplements=ImplementsAssignement
	|name='extends-class' toExtends=ExtendsAssignement
	|name='implements-interfaces-generics' toImplementsGenerics=ImplementsAssignementGenerics 
	|name='extends-class-generics' toExtendsGenerics=ExtendsAssignementGenerics
	|name='make-it-final'
	|name='function-result' dbFunction=ValidID resultType=PojoType
	|name='debug-level' debug=DebugLevelAssignement
	|name='active-filter' activeFilter=ValueType
	|name='package' pckg=QualifiedName
	);

PojoDefinition:
	'pojo' name=ValidID (class=(QualifiedName) | ':' classx=[jvmTypes::JvmType|QualifiedName]) ';';

TableDefinition:
	'table' name=ValidID table=ValidID ';';

ProcedureDefinition:
	'procedure' name=ValidID table=ValidID ';';

FunctionDefinition:
	'function' name=ValidID table=ValidID ';';

PojoType:
	(':' type=[jvmTypes::JvmType|QualifiedName] | ref=[PojoEntity|ValidID])
	('<' (':' gtype=[jvmTypes::JvmType|QualifiedName] | gref=[PojoEntity|ValidID]) '>')? (array ?= '[]')?;

PackageDirective: 
	{PackageDirectiveSuffix} '#Suffix' '(' suffix=(ValidID) ')'
	| {PackageDirectiveImplementation} '#Implementation' '(' implementation=(QualifiedName) ')'
;

Package:
	directives+=PackageDirective*
	'package' name=(QualifiedName) '{'
		elements+=AbstractPojoEntity*
	'}';

AnnotationDirective: 
	{AnnotationDirectiveConflict} '#Conflict'
	| {AnnotationDirectiveStatic} '#Static'
	| {AnnotationDirectiveConstructor} '#Constructor'
	| {AnnotationDirectiveStandard} '#Standard'
	| {AnnotationDirectiveSetter} '#Setter'
	| {AnnotationDirectiveGetter} '#Getter'
	| {AnnotationDirectiveAttribute} '#Attribute'
;

Annotation:
	directives+=AnnotationDirective*
	'@' type=[jvmTypes::JvmType|QualifiedName] (=> '(' features+=AnnotationProperty (',' features+=AnnotationProperty)* ')')?
;

AnnotationProperty:
	name=ValidID '=' value = ValueType ((':' type=[jvmTypes::JvmType|QualifiedName] | ref=[PojoEntity|ValidID]))?  
;

Entity: PojoEntity | EnumEntity;

AnnotatedEntity: (annotations+=Annotation)* entity=Entity;

AbstractPojoEntity:
	Package | AnnotatedEntity | Import | Implements | Extends | PojoDao
;

Import:
	'import' importedNamespace = QualifiedName
;

ImplementsExtendsDirective: 
	{ImplementsExtendsDirectiveGenerics} '#Generics'
	| {ImplementsExtendsDirectiveOnlyPojos} '#OnlyPojos' onlyPojos+=[PojoEntity|ValidID]*
	| {ImplementsExtendsDirectiveOnlyDaos} '#OnlyDaos' onlyDaos+=[PojoDao|ValidID]*
	| {ImplementsExtendsDirectiveExceptPojos} '#ExceptPojos' exceptPojos+=[PojoEntity|ValidID]*
	| {ImplementsExtendsDirectiveExceptDaos} '#ExceptDaos' exceptDaos+=[PojoDao|ValidID]*
;

Implements:
	directives+=ImplementsExtendsDirective*
	'implements' ':' implements = [jvmTypes::JvmType|QualifiedName] 
;

Extends:
	directives+=ImplementsExtendsDirective*
	'extends' ':' extends = [jvmTypes::JvmType|QualifiedName] 
;

PojoEntityModifier1: ((final?='final') | (abstract?='abstract'));

DirectiveProperties:
	features+=[PojoProperty|ValidID] (',' features+=[PojoProperty|ValidID])*
;

PojoDirective: 
	{PojoDirectiveToString} '#ToString' '(' proplist=DirectiveProperties ')'
	| {PojoDirectiveIndex} '#Index' '(' index=INT ',' proplist=DirectiveProperties ')'
	| {PojoDirectiveOperators} '#Operators' ('(' operatorsSuffix=ValidID ')')?
	| {PojoDirectiveSerializable} '#Serializable' '(' sernum=INT ')'
	| {PojoDirectiveDiscriminator} '#InheritanceChild' '(' discriminator=(ValidID) ')'
	| {PojoDirectiveEquals} '#Equals' '(' proplist=DirectiveProperties ')'
	| {PojoDirectiveHashCode} '#HashCode' '(' proplist=DirectiveProperties ')'
;

PojoEntityModifier2: ('extends' superType=[PojoEntity|ValidID]);

PojoEntity:
	directives+=PojoDirective*
	(modifiers1+=PojoEntityModifier1)* 'pojo' name=ValidID (modifiers2+=PojoEntityModifier2)* 
	'{'
		features+=PojoAnnotatedProperty*
	'}'
;

PojoAnnotatedProperty: (annotations+=Annotation)* feature=PojoProperty;

PojoPropertyDirective: 
	{PojoPropertyDirectiveRequired} '#Required'
	| {PojoPropertyDirectivePrimaryKey} '#PrimaryKey'
	| {PojoPropertyDirectiveDiscriminator} '#InheritanceDiscriminator'
	| {PojoPropertyDirectiveIndex} '#Index' '(' index=INT ')'
	| {PojoPropertyDirectiveVersion} '#Version'
	| {PojoPropertyDirectiveUpdateCol} '#UpdateCol' '(' updateColumn1=ValidID ',' updateColumn2=ValidID ')'
	| {PojoPropertyDirectiveCreateCol} '#CreateCol' '(' createColumn1=ValidID ',' createColumn2=ValidID ')'
	| {PojoPropertyDirectiveToInit} '#ToInit'
	| {PojoPropertyDirectiveEnumInit} '#EnumInit'
	| {PojoPropertyDirectiveIsDef} '#IsDef'
	| {PojoPropertyDirectiveEnumDef} '#EnumDef'
;

PojoProperty:
	directives+=PojoPropertyDirective*
	name=ValidID (':' type=[jvmTypes::JvmType|QualifiedName] | ref=[Entity|ValidID])
	('<' (':' gtype=[jvmTypes::JvmType|QualifiedName] | gref=[PojoEntity|ValidID]) '>')? (array ?= '[]')?
;

EnumEntityModifier1: ((final?='final'));

EnumEntityModifier2: ('extends' superType=[PojoEntity|ValidID]);

EnumEntity:
	directives+=PojoDirective*
	(modifiers1+=EnumEntityModifier1)* 'enum' name=ValidID (modifiers2+=EnumEntityModifier2)* 
	'{'
		features+=EnumProperty*
	'}'
;

EnumPropertyValue: name=ValidID '=' value = ValueType;

EnumPropertyDirective:
	{EnumPropertyDirectiveValues} '#Values' '(' values+=EnumPropertyValue (',' values+=EnumPropertyValue)* ')'
;

EnumProperty:
	directives+=EnumPropertyDirective name=ValidID ':' type=[jvmTypes::JvmType|QualifiedName]
;

DaoDirectiveParameters:
	out=PojoType (',' ins+=PojoType)*
;

DescendantAssignment:
	value = ValueType '=' descendant=PojoType
;

FunProcType :
	{FunctionCallQuery} "#FunctionCallQuery" | 
	{ProcedureCallQuery} "#ProcedureCallQuery" | 
	{FunctionCall} "#FunctionCall" | 
	{ProcedureUpdate} "#ProcedureUpdate" | 
	{FunctionQuery} "#FunctionQuery"
;

DaoDirective:
	{DaoDirectiveSerializable} '#Serializable' '(' sernum=INT ')'
	| {DaoDirectiveDiscriminator} '#InheritanceHandler' '(' ancestor=[PojoProperty|ValidID] (',' descendants+=DescendantAssignment)+ ')'
	| {DaoDirectiveCrud} '#CRUD' (=> '(' pojo=PojoType ')')?
	| {DaoDirectiveQuery} '#Query' (=> '(' pojo=PojoType ')')?
	| {FunProcDirective} type=FunProcType (=> '(' paramlist=DaoDirectiveParameters ')')?
;

PojoDaoModifier: ('extends' superType=[PojoDao|ValidID]);

PojoDao:
	directives+=DaoDirective*
	(modifiers1+=PojoEntityModifier1)* 'dao' name=ValidID
	  (modifiers2+=PojoDaoModifier)* 
	'{'
		//methods+=PojoMethod*
	'}'
;
